
CAR_REMOTE_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b2c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08008cf0  08008cf0  00009cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e30  08008e30  0000a10c  2**0
                  CONTENTS
  4 .ARM          00000008  08008e30  08008e30  00009e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e38  08008e38  0000a10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e38  08008e38  00009e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e3c  08008e3c  00009e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  08008e40  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c4c  2000010c  08008f4c  0000a10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d58  08008f4c  0000ad58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133f5  00000000  00000000  0000a13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003318  00000000  00000000  0001d531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00020850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3b  00000000  00000000  00021728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023cee  00000000  00000000  00022263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001471b  00000000  00000000  00045f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc735  00000000  00000000  0005a66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126da1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c48  00000000  00000000  00126de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  0012aa2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08008cd8 	.word	0x08008cd8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	08008cd8 	.word	0x08008cd8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fb29 	bl	8000b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f82d 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8c1 	bl	8000688 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000506:	f000 f895 	bl	8000634 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800050a:	f007 fe29 	bl	8008160 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart1, RxBuff, 7);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800050e:	2201      	movs	r2, #1
 8000510:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000514:	480f      	ldr	r0, [pc, #60]	@ (8000554 <main+0x60>)
 8000516:	f000 ff01 	bl	800131c <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 800051a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800051e:	f000 fb89 	bl	8000c34 <HAL_Delay>
  CDC_Transmit_FS((uint8_t*)"This USB is talking\r\n", sizeof("This USB is talking\r\n"));
 8000522:	2116      	movs	r1, #22
 8000524:	480c      	ldr	r0, [pc, #48]	@ (8000558 <main+0x64>)
 8000526:	f007 fed9 	bl	80082dc <CDC_Transmit_FS>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 800052a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800052e:	4809      	ldr	r0, [pc, #36]	@ (8000554 <main+0x60>)
 8000530:	f000 fedc 	bl	80012ec <HAL_GPIO_ReadPin>
 8000534:	4603      	mov	r3, r0
 8000536:	71fb      	strb	r3, [r7, #7]
	  if(pinState == GPIO_PIN_SET){
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d1f5      	bne.n	800052a <main+0x36>
		  HAL_Delay(250);
 800053e:	20fa      	movs	r0, #250	@ 0xfa
 8000540:	f000 fb78 	bl	8000c34 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800054a:	4802      	ldr	r0, [pc, #8]	@ (8000554 <main+0x60>)
 800054c:	f000 fee6 	bl	800131c <HAL_GPIO_WritePin>
  {
 8000550:	e7eb      	b.n	800052a <main+0x36>
 8000552:	bf00      	nop
 8000554:	40020400 	.word	0x40020400
 8000558:	08008cf0 	.word	0x08008cf0

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	@ 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	2234      	movs	r2, #52	@ 0x34
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f008 fb88 	bl	8008c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b29      	ldr	r3, [pc, #164]	@ (800062c <SystemClock_Config+0xd0>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000588:	4a28      	ldr	r2, [pc, #160]	@ (800062c <SystemClock_Config+0xd0>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000590:	4b26      	ldr	r3, [pc, #152]	@ (800062c <SystemClock_Config+0xd0>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	4b23      	ldr	r3, [pc, #140]	@ (8000630 <SystemClock_Config+0xd4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a22      	ldr	r2, [pc, #136]	@ (8000630 <SystemClock_Config+0xd4>)
 80005a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b20      	ldr	r3, [pc, #128]	@ (8000630 <SystemClock_Config+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d0:	23a8      	movs	r3, #168	@ 0xa8
 80005d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d8:	2307      	movs	r3, #7
 80005da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 031c 	add.w	r3, r7, #28
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 ffdd 	bl	80035a4 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005f0:	f000 f986 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2302      	movs	r3, #2
 80005fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000600:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000604:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800060a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2105      	movs	r1, #5
 8000612:	4618      	mov	r0, r3
 8000614:	f002 f952 	bl	80028bc <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800061e:	f000 f96f 	bl	8000900 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	@ 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000638:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 800063a:	4a12      	ldr	r2, [pc, #72]	@ (8000684 <MX_USART1_UART_Init+0x50>)
 800063c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800063e:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000640:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000644:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 800066c:	f003 fa38 	bl	8003ae0 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000676:	f000 f943 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000128 	.word	0x20000128
 8000684:	40011000 	.word	0x40011000

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	@ 0x28
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	4b46      	ldr	r3, [pc, #280]	@ (80007bc <MX_GPIO_Init+0x134>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a45      	ldr	r2, [pc, #276]	@ (80007bc <MX_GPIO_Init+0x134>)
 80006a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b43      	ldr	r3, [pc, #268]	@ (80007bc <MX_GPIO_Init+0x134>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	4b3f      	ldr	r3, [pc, #252]	@ (80007bc <MX_GPIO_Init+0x134>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a3e      	ldr	r2, [pc, #248]	@ (80007bc <MX_GPIO_Init+0x134>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b3c      	ldr	r3, [pc, #240]	@ (80007bc <MX_GPIO_Init+0x134>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	4b38      	ldr	r3, [pc, #224]	@ (80007bc <MX_GPIO_Init+0x134>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a37      	ldr	r2, [pc, #220]	@ (80007bc <MX_GPIO_Init+0x134>)
 80006e0:	f043 0302 	orr.w	r3, r3, #2
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b35      	ldr	r3, [pc, #212]	@ (80007bc <MX_GPIO_Init+0x134>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b31      	ldr	r3, [pc, #196]	@ (80007bc <MX_GPIO_Init+0x134>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a30      	ldr	r2, [pc, #192]	@ (80007bc <MX_GPIO_Init+0x134>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b2e      	ldr	r3, [pc, #184]	@ (80007bc <MX_GPIO_Init+0x134>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Status_LED_Pin|Trig_LED_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000714:	482a      	ldr	r0, [pc, #168]	@ (80007c0 <MX_GPIO_Init+0x138>)
 8000716:	f000 fe01 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800071a:	233f      	movs	r3, #63	@ 0x3f
 800071c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800071e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000724:	2301      	movs	r3, #1
 8000726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	4825      	ldr	r0, [pc, #148]	@ (80007c4 <MX_GPIO_Init+0x13c>)
 8000730:	f000 fc48 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Status_LED_Pin Trig_LED_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin|Trig_LED_Pin;
 8000734:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	2301      	movs	r3, #1
 800073c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4619      	mov	r1, r3
 800074c:	481c      	ldr	r0, [pc, #112]	@ (80007c0 <MX_GPIO_Init+0x138>)
 800074e:	f000 fc39 	bl	8000fc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	2006      	movs	r0, #6
 8000758:	f000 fb6b 	bl	8000e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800075c:	2006      	movs	r0, #6
 800075e:	f000 fb84 	bl	8000e6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2007      	movs	r0, #7
 8000768:	f000 fb63 	bl	8000e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800076c:	2007      	movs	r0, #7
 800076e:	f000 fb7c 	bl	8000e6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	2008      	movs	r0, #8
 8000778:	f000 fb5b 	bl	8000e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800077c:	2008      	movs	r0, #8
 800077e:	f000 fb74 	bl	8000e6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	2009      	movs	r0, #9
 8000788:	f000 fb53 	bl	8000e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800078c:	2009      	movs	r0, #9
 800078e:	f000 fb6c 	bl	8000e6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	200a      	movs	r0, #10
 8000798:	f000 fb4b 	bl	8000e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800079c:	200a      	movs	r0, #10
 800079e:	f000 fb64 	bl	8000e6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	2017      	movs	r0, #23
 80007a8:	f000 fb43 	bl	8000e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007ac:	2017      	movs	r0, #23
 80007ae:	f000 fb5c 	bl	8000e6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b2:	bf00      	nop
 80007b4:	3728      	adds	r7, #40	@ 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020400 	.word	0x40020400
 80007c4:	40020800 	.word	0x40020800

080007c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	80fb      	strh	r3, [r7, #6]
//	HAL_Delay(50);
	if(GPIO_Pin == GPIO_PIN_0) // If The INT Source Is EXTI Line14 (PB14 Pin)
 80007d2:	88fb      	ldrh	r3, [r7, #6]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d110      	bne.n	80007fa <HAL_GPIO_EXTI_Callback+0x32>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)"MOVE_F0", strlen("MOVE_F0"), 100); //This will be sent to the other MCU via HC-12 wireless module
 80007d8:	2364      	movs	r3, #100	@ 0x64
 80007da:	2207      	movs	r2, #7
 80007dc:	493a      	ldr	r1, [pc, #232]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0x100>)
 80007de:	483b      	ldr	r0, [pc, #236]	@ (80008cc <HAL_GPIO_EXTI_Callback+0x104>)
 80007e0:	f003 f9ce 	bl	8003b80 <HAL_UART_Transmit>
		CDC_Transmit_FS((uint8_t*)"Button C0 is Pressed\r\n", sizeof("Button C0 is Pressed\r\n"));
 80007e4:	2117      	movs	r1, #23
 80007e6:	483a      	ldr	r0, [pc, #232]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0x108>)
 80007e8:	f007 fd78 	bl	80082dc <CDC_Transmit_FS>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007f2:	4838      	ldr	r0, [pc, #224]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x10c>)
 80007f4:	f000 fd92 	bl	800131c <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart1, (uint8_t *)"MOVE_F5", strlen("MOVE_F5"), 100); //This will be sent to the other MCU via HC-12 wireless module
		CDC_Transmit_FS((uint8_t*)"Button C5 is Pressed\r\n", sizeof("Button C5 is Pressed\r\n"));
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
	}

}
 80007f8:	e062      	b.n	80008c0 <HAL_GPIO_EXTI_Callback+0xf8>
	else if(GPIO_Pin == GPIO_PIN_1)
 80007fa:	88fb      	ldrh	r3, [r7, #6]
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d110      	bne.n	8000822 <HAL_GPIO_EXTI_Callback+0x5a>
		HAL_UART_Transmit(&huart1, (uint8_t *)"MOVE_F1", strlen("MOVE_F1"), 100); //This will be sent to the other MCU via HC-12 wireless module
 8000800:	2364      	movs	r3, #100	@ 0x64
 8000802:	2207      	movs	r2, #7
 8000804:	4934      	ldr	r1, [pc, #208]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0x110>)
 8000806:	4831      	ldr	r0, [pc, #196]	@ (80008cc <HAL_GPIO_EXTI_Callback+0x104>)
 8000808:	f003 f9ba 	bl	8003b80 <HAL_UART_Transmit>
		CDC_Transmit_FS((uint8_t*)"Button C1 is Pressed\r\n", sizeof("Button C1 is Pressed\r\n"));
 800080c:	2117      	movs	r1, #23
 800080e:	4833      	ldr	r0, [pc, #204]	@ (80008dc <HAL_GPIO_EXTI_Callback+0x114>)
 8000810:	f007 fd64 	bl	80082dc <CDC_Transmit_FS>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800081a:	482e      	ldr	r0, [pc, #184]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x10c>)
 800081c:	f000 fd7e 	bl	800131c <HAL_GPIO_WritePin>
}
 8000820:	e04e      	b.n	80008c0 <HAL_GPIO_EXTI_Callback+0xf8>
	else if(GPIO_Pin == GPIO_PIN_2)
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	2b04      	cmp	r3, #4
 8000826:	d110      	bne.n	800084a <HAL_GPIO_EXTI_Callback+0x82>
		HAL_UART_Transmit(&huart1, (uint8_t *)"MOVE_F2", strlen("MOVE_F2"), 100); //This will be sent to the other MCU via HC-12 wireless module
 8000828:	2364      	movs	r3, #100	@ 0x64
 800082a:	2207      	movs	r2, #7
 800082c:	492c      	ldr	r1, [pc, #176]	@ (80008e0 <HAL_GPIO_EXTI_Callback+0x118>)
 800082e:	4827      	ldr	r0, [pc, #156]	@ (80008cc <HAL_GPIO_EXTI_Callback+0x104>)
 8000830:	f003 f9a6 	bl	8003b80 <HAL_UART_Transmit>
		CDC_Transmit_FS((uint8_t*)"Button C2 is Pressed\r\n", sizeof("Button C2 is Pressed\r\n"));
 8000834:	2117      	movs	r1, #23
 8000836:	482b      	ldr	r0, [pc, #172]	@ (80008e4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000838:	f007 fd50 	bl	80082dc <CDC_Transmit_FS>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000842:	4824      	ldr	r0, [pc, #144]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000844:	f000 fd6a 	bl	800131c <HAL_GPIO_WritePin>
}
 8000848:	e03a      	b.n	80008c0 <HAL_GPIO_EXTI_Callback+0xf8>
	else if(GPIO_Pin == GPIO_PIN_3)
 800084a:	88fb      	ldrh	r3, [r7, #6]
 800084c:	2b08      	cmp	r3, #8
 800084e:	d110      	bne.n	8000872 <HAL_GPIO_EXTI_Callback+0xaa>
		HAL_UART_Transmit(&huart1, (uint8_t *)"MOVE_F3", strlen("MOVE_F3"), 100); //This will be sent to the other MCU via HC-12 wireless module
 8000850:	2364      	movs	r3, #100	@ 0x64
 8000852:	2207      	movs	r2, #7
 8000854:	4924      	ldr	r1, [pc, #144]	@ (80008e8 <HAL_GPIO_EXTI_Callback+0x120>)
 8000856:	481d      	ldr	r0, [pc, #116]	@ (80008cc <HAL_GPIO_EXTI_Callback+0x104>)
 8000858:	f003 f992 	bl	8003b80 <HAL_UART_Transmit>
		CDC_Transmit_FS((uint8_t*)"Button C3 is Pressed\r\n", sizeof("Button C3 is Pressed\r\n"));
 800085c:	2117      	movs	r1, #23
 800085e:	4823      	ldr	r0, [pc, #140]	@ (80008ec <HAL_GPIO_EXTI_Callback+0x124>)
 8000860:	f007 fd3c 	bl	80082dc <CDC_Transmit_FS>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800086a:	481a      	ldr	r0, [pc, #104]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x10c>)
 800086c:	f000 fd56 	bl	800131c <HAL_GPIO_WritePin>
}
 8000870:	e026      	b.n	80008c0 <HAL_GPIO_EXTI_Callback+0xf8>
	else if(GPIO_Pin == GPIO_PIN_4)
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	2b10      	cmp	r3, #16
 8000876:	d110      	bne.n	800089a <HAL_GPIO_EXTI_Callback+0xd2>
		HAL_UART_Transmit(&huart1, (uint8_t *)"TOGGLED", strlen("TOGGLED"), 100); //This will be sent to the other MCU via HC-12 wireless module
 8000878:	2364      	movs	r3, #100	@ 0x64
 800087a:	2207      	movs	r2, #7
 800087c:	491c      	ldr	r1, [pc, #112]	@ (80008f0 <HAL_GPIO_EXTI_Callback+0x128>)
 800087e:	4813      	ldr	r0, [pc, #76]	@ (80008cc <HAL_GPIO_EXTI_Callback+0x104>)
 8000880:	f003 f97e 	bl	8003b80 <HAL_UART_Transmit>
		CDC_Transmit_FS((uint8_t*)"Toggle Button C4 is Pressed\r\n", sizeof("Toggle Button C4 is Pressed\r\n"));
 8000884:	211e      	movs	r1, #30
 8000886:	481b      	ldr	r0, [pc, #108]	@ (80008f4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000888:	f007 fd28 	bl	80082dc <CDC_Transmit_FS>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000892:	4810      	ldr	r0, [pc, #64]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000894:	f000 fd42 	bl	800131c <HAL_GPIO_WritePin>
}
 8000898:	e012      	b.n	80008c0 <HAL_GPIO_EXTI_Callback+0xf8>
	else if(GPIO_Pin == GPIO_PIN_5)
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	2b20      	cmp	r3, #32
 800089e:	d10f      	bne.n	80008c0 <HAL_GPIO_EXTI_Callback+0xf8>
		HAL_UART_Transmit(&huart1, (uint8_t *)"MOVE_F5", strlen("MOVE_F5"), 100); //This will be sent to the other MCU via HC-12 wireless module
 80008a0:	2364      	movs	r3, #100	@ 0x64
 80008a2:	2207      	movs	r2, #7
 80008a4:	4914      	ldr	r1, [pc, #80]	@ (80008f8 <HAL_GPIO_EXTI_Callback+0x130>)
 80008a6:	4809      	ldr	r0, [pc, #36]	@ (80008cc <HAL_GPIO_EXTI_Callback+0x104>)
 80008a8:	f003 f96a 	bl	8003b80 <HAL_UART_Transmit>
		CDC_Transmit_FS((uint8_t*)"Button C5 is Pressed\r\n", sizeof("Button C5 is Pressed\r\n"));
 80008ac:	2117      	movs	r1, #23
 80008ae:	4813      	ldr	r0, [pc, #76]	@ (80008fc <HAL_GPIO_EXTI_Callback+0x134>)
 80008b0:	f007 fd14 	bl	80082dc <CDC_Transmit_FS>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008ba:	4806      	ldr	r0, [pc, #24]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x10c>)
 80008bc:	f000 fd2e 	bl	800131c <HAL_GPIO_WritePin>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	08008d08 	.word	0x08008d08
 80008cc:	20000128 	.word	0x20000128
 80008d0:	08008d10 	.word	0x08008d10
 80008d4:	40020400 	.word	0x40020400
 80008d8:	08008d28 	.word	0x08008d28
 80008dc:	08008d30 	.word	0x08008d30
 80008e0:	08008d48 	.word	0x08008d48
 80008e4:	08008d50 	.word	0x08008d50
 80008e8:	08008d68 	.word	0x08008d68
 80008ec:	08008d70 	.word	0x08008d70
 80008f0:	08008d88 	.word	0x08008d88
 80008f4:	08008d90 	.word	0x08008d90
 80008f8:	08008db0 	.word	0x08008db0
 80008fc:	08008db8 	.word	0x08008db8

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <Error_Handler+0x8>

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091a:	4a0f      	ldr	r2, [pc, #60]	@ (8000958 <HAL_MspInit+0x4c>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000920:	6453      	str	r3, [r2, #68]	@ 0x44
 8000922:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <HAL_MspInit+0x4c>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	4a08      	ldr	r2, [pc, #32]	@ (8000958 <HAL_MspInit+0x4c>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	@ 0x40
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <HAL_MspInit+0x4c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	@ 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a1d      	ldr	r2, [pc, #116]	@ (80009f0 <HAL_UART_MspInit+0x94>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d134      	bne.n	80009e8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	4b1c      	ldr	r3, [pc, #112]	@ (80009f4 <HAL_UART_MspInit+0x98>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000986:	4a1b      	ldr	r2, [pc, #108]	@ (80009f4 <HAL_UART_MspInit+0x98>)
 8000988:	f043 0310 	orr.w	r3, r3, #16
 800098c:	6453      	str	r3, [r2, #68]	@ 0x44
 800098e:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <HAL_UART_MspInit+0x98>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000992:	f003 0310 	and.w	r3, r3, #16
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <HAL_UART_MspInit+0x98>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a14      	ldr	r2, [pc, #80]	@ (80009f4 <HAL_UART_MspInit+0x98>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <HAL_UART_MspInit+0x98>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009b6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009c8:	2307      	movs	r3, #7
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	4809      	ldr	r0, [pc, #36]	@ (80009f8 <HAL_UART_MspInit+0x9c>)
 80009d4:	f000 faf6 	bl	8000fc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	2025      	movs	r0, #37	@ 0x25
 80009de:	f000 fa28 	bl	8000e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009e2:	2025      	movs	r0, #37	@ 0x25
 80009e4:	f000 fa41 	bl	8000e6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	@ 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40011000 	.word	0x40011000
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020000 	.word	0x40020000

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <NMI_Handler+0x4>

08000a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <MemManage_Handler+0x4>

08000a14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a52:	f000 f8cf 	bl	8000bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f000 fc76 	bl	8001350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000a6c:	2002      	movs	r0, #2
 8000a6e:	f000 fc6f 	bl	8001350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000a7a:	2004      	movs	r0, #4
 8000a7c:	f000 fc68 	bl	8001350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000a88:	2008      	movs	r0, #8
 8000a8a:	f000 fc61 	bl	8001350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000a96:	2010      	movs	r0, #16
 8000a98:	f000 fc5a 	bl	8001350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000aa4:	2020      	movs	r0, #32
 8000aa6:	f000 fc53 	bl	8001350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ab4:	4802      	ldr	r0, [pc, #8]	@ (8000ac0 <USART1_IRQHandler+0x10>)
 8000ab6:	f003 f8ef 	bl	8003c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000128 	.word	0x20000128

08000ac4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ac8:	4802      	ldr	r0, [pc, #8]	@ (8000ad4 <OTG_FS_IRQHandler+0x10>)
 8000aca:	f000 fda4 	bl	8001616 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20001654 	.word	0x20001654

08000ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <SystemInit+0x20>)
 8000ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ae2:	4a05      	ldr	r2, [pc, #20]	@ (8000af8 <SystemInit+0x20>)
 8000ae4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000afc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b00:	f7ff ffea 	bl	8000ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b04:	480c      	ldr	r0, [pc, #48]	@ (8000b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b06:	490d      	ldr	r1, [pc, #52]	@ (8000b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b08:	4a0d      	ldr	r2, [pc, #52]	@ (8000b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f008 f8b1 	bl	8008c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2e:	f7ff fce1 	bl	80004f4 <main>
  bx  lr    
 8000b32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000b40:	08008e40 	.word	0x08008e40
  ldr r2, =_sbss
 8000b44:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000b48:	20001d58 	.word	0x20001d58

08000b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC_IRQHandler>
	...

08000b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b54:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0d      	ldr	r2, [pc, #52]	@ (8000b90 <HAL_Init+0x40>)
 8000b5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b60:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <HAL_Init+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <HAL_Init+0x40>)
 8000b66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a07      	ldr	r2, [pc, #28]	@ (8000b90 <HAL_Init+0x40>)
 8000b72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f000 f94f 	bl	8000e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7e:	200f      	movs	r0, #15
 8000b80:	f000 f808 	bl	8000b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b84:	f7ff fec2 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023c00 	.word	0x40023c00

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b9c:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <HAL_InitTick+0x54>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <HAL_InitTick+0x58>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 f967 	bl	8000e86 <HAL_SYSTICK_Config>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00e      	b.n	8000be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b0f      	cmp	r3, #15
 8000bc6:	d80a      	bhi.n	8000bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f000 f92f 	bl	8000e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd4:	4a06      	ldr	r2, [pc, #24]	@ (8000bf0 <HAL_InitTick+0x5c>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e000      	b.n	8000be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000004 	.word	0x20000004

08000bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <HAL_IncTick+0x20>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_IncTick+0x24>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a04      	ldr	r2, [pc, #16]	@ (8000c18 <HAL_IncTick+0x24>)
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008
 8000c18:	20000170 	.word	0x20000170

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b03      	ldr	r3, [pc, #12]	@ (8000c30 <HAL_GetTick+0x14>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000170 	.word	0x20000170

08000c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c3c:	f7ff ffee 	bl	8000c1c <HAL_GetTick>
 8000c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c4c:	d005      	beq.n	8000c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <HAL_Delay+0x44>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4413      	add	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c5a:	bf00      	nop
 8000c5c:	f7ff ffde 	bl	8000c1c <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d8f7      	bhi.n	8000c5c <HAL_Delay+0x28>
  {
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008

08000c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cae:	4a04      	ldr	r2, [pc, #16]	@ (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	60d3      	str	r3, [r2, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc8:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <__NVIC_GetPriorityGrouping+0x18>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	f003 0307 	and.w	r3, r3, #7
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	db0b      	blt.n	8000d0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	f003 021f 	and.w	r2, r3, #31
 8000cf8:	4907      	ldr	r1, [pc, #28]	@ (8000d18 <__NVIC_EnableIRQ+0x38>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	2001      	movs	r0, #1
 8000d02:	fa00 f202 	lsl.w	r2, r0, r2
 8000d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000e100 	.word	0xe000e100

08000d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	db0a      	blt.n	8000d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	490c      	ldr	r1, [pc, #48]	@ (8000d68 <__NVIC_SetPriority+0x4c>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	0112      	lsls	r2, r2, #4
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	440b      	add	r3, r1
 8000d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d44:	e00a      	b.n	8000d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4908      	ldr	r1, [pc, #32]	@ (8000d6c <__NVIC_SetPriority+0x50>)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	3b04      	subs	r3, #4
 8000d54:	0112      	lsls	r2, r2, #4
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	440b      	add	r3, r1
 8000d5a:	761a      	strb	r2, [r3, #24]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000e100 	.word	0xe000e100
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	@ 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f1c3 0307 	rsb	r3, r3, #7
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	bf28      	it	cs
 8000d8e:	2304      	movcs	r3, #4
 8000d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3304      	adds	r3, #4
 8000d96:	2b06      	cmp	r3, #6
 8000d98:	d902      	bls.n	8000da0 <NVIC_EncodePriority+0x30>
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3b03      	subs	r3, #3
 8000d9e:	e000      	b.n	8000da2 <NVIC_EncodePriority+0x32>
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	f04f 32ff 	mov.w	r2, #4294967295
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43da      	mvns	r2, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	401a      	ands	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc2:	43d9      	mvns	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	4313      	orrs	r3, r2
         );
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3724      	adds	r7, #36	@ 0x24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000de8:	d301      	bcc.n	8000dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00f      	b.n	8000e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dee:	4a0a      	ldr	r2, [pc, #40]	@ (8000e18 <SysTick_Config+0x40>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df6:	210f      	movs	r1, #15
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f7ff ff8e 	bl	8000d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	4b05      	ldr	r3, [pc, #20]	@ (8000e18 <SysTick_Config+0x40>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	4b04      	ldr	r3, [pc, #16]	@ (8000e18 <SysTick_Config+0x40>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff29 	bl	8000c7c <__NVIC_SetPriorityGrouping>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e44:	f7ff ff3e 	bl	8000cc4 <__NVIC_GetPriorityGrouping>
 8000e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	68b9      	ldr	r1, [r7, #8]
 8000e4e:	6978      	ldr	r0, [r7, #20]
 8000e50:	f7ff ff8e 	bl	8000d70 <NVIC_EncodePriority>
 8000e54:	4602      	mov	r2, r0
 8000e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff5d 	bl	8000d1c <__NVIC_SetPriority>
}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff31 	bl	8000ce0 <__NVIC_EnableIRQ>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ffa2 	bl	8000dd8 <SysTick_Config>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eaa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff feb6 	bl	8000c1c <HAL_GetTick>
 8000eb0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d008      	beq.n	8000ed0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e052      	b.n	8000f76 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0216 	bic.w	r2, r2, #22
 8000ede:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	695a      	ldr	r2, [r3, #20]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000eee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d103      	bne.n	8000f00 <HAL_DMA_Abort+0x62>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d007      	beq.n	8000f10 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0208 	bic.w	r2, r2, #8
 8000f0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 0201 	bic.w	r2, r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f20:	e013      	b.n	8000f4a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f22:	f7ff fe7b 	bl	8000c1c <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b05      	cmp	r3, #5
 8000f2e:	d90c      	bls.n	8000f4a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2220      	movs	r2, #32
 8000f34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2203      	movs	r2, #3
 8000f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e015      	b.n	8000f76 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1e4      	bne.n	8000f22 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f5c:	223f      	movs	r2, #63	@ 0x3f
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d004      	beq.n	8000f9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2280      	movs	r2, #128	@ 0x80
 8000f96:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e00c      	b.n	8000fb6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2205      	movs	r2, #5
 8000fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0201 	bic.w	r2, r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	@ 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
 8000fde:	e165      	b.n	80012ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	f040 8154 	bne.w	80012a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b01      	cmp	r3, #1
 8001008:	d005      	beq.n	8001016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001012:	2b02      	cmp	r3, #2
 8001014:	d130      	bne.n	8001078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	091b      	lsrs	r3, r3, #4
 8001062:	f003 0201 	and.w	r2, r3, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b03      	cmp	r3, #3
 8001082:	d017      	beq.n	80010b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d123      	bne.n	8001108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	08da      	lsrs	r2, r3, #3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3208      	adds	r2, #8
 8001102:	69b9      	ldr	r1, [r7, #24]
 8001104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0203 	and.w	r2, r3, #3
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 80ae 	beq.w	80012a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b5d      	ldr	r3, [pc, #372]	@ (80012c4 <HAL_GPIO_Init+0x300>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001152:	4a5c      	ldr	r2, [pc, #368]	@ (80012c4 <HAL_GPIO_Init+0x300>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001158:	6453      	str	r3, [r2, #68]	@ 0x44
 800115a:	4b5a      	ldr	r3, [pc, #360]	@ (80012c4 <HAL_GPIO_Init+0x300>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001166:	4a58      	ldr	r2, [pc, #352]	@ (80012c8 <HAL_GPIO_Init+0x304>)
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	220f      	movs	r2, #15
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4f      	ldr	r2, [pc, #316]	@ (80012cc <HAL_GPIO_Init+0x308>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d025      	beq.n	80011de <HAL_GPIO_Init+0x21a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4e      	ldr	r2, [pc, #312]	@ (80012d0 <HAL_GPIO_Init+0x30c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d01f      	beq.n	80011da <HAL_GPIO_Init+0x216>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4d      	ldr	r2, [pc, #308]	@ (80012d4 <HAL_GPIO_Init+0x310>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_GPIO_Init+0x212>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4c      	ldr	r2, [pc, #304]	@ (80012d8 <HAL_GPIO_Init+0x314>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x20e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4b      	ldr	r2, [pc, #300]	@ (80012dc <HAL_GPIO_Init+0x318>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x20a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4a      	ldr	r2, [pc, #296]	@ (80012e0 <HAL_GPIO_Init+0x31c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x206>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a49      	ldr	r2, [pc, #292]	@ (80012e4 <HAL_GPIO_Init+0x320>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x202>
 80011c2:	2306      	movs	r3, #6
 80011c4:	e00c      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011c6:	2307      	movs	r3, #7
 80011c8:	e00a      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011ca:	2305      	movs	r3, #5
 80011cc:	e008      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011ce:	2304      	movs	r3, #4
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011d2:	2303      	movs	r3, #3
 80011d4:	e004      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e002      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011de:	2300      	movs	r3, #0
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	f002 0203 	and.w	r2, r2, #3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4093      	lsls	r3, r2
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f0:	4935      	ldr	r1, [pc, #212]	@ (80012c8 <HAL_GPIO_Init+0x304>)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fe:	4b3a      	ldr	r3, [pc, #232]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001222:	4a31      	ldr	r2, [pc, #196]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001228:	4b2f      	ldr	r3, [pc, #188]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800124c:	4a26      	ldr	r2, [pc, #152]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001252:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001276:	4a1c      	ldr	r2, [pc, #112]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127c:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a0:	4a11      	ldr	r2, [pc, #68]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3301      	adds	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	2b0f      	cmp	r3, #15
 80012b0:	f67f ae96 	bls.w	8000fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3724      	adds	r7, #36	@ 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40013800 	.word	0x40013800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40021400 	.word	0x40021400
 80012e4:	40021800 	.word	0x40021800
 80012e8:	40013c00 	.word	0x40013c00

080012ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	887b      	ldrh	r3, [r7, #2]
 80012fe:	4013      	ands	r3, r2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001304:	2301      	movs	r3, #1
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	e001      	b.n	800130e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800130e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
 8001328:	4613      	mov	r3, r2
 800132a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800132c:	787b      	ldrb	r3, [r7, #1]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001332:	887a      	ldrh	r2, [r7, #2]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001338:	e003      	b.n	8001342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800133a:	887b      	ldrh	r3, [r7, #2]
 800133c:	041a      	lsls	r2, r3, #16
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	619a      	str	r2, [r3, #24]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800135a:	4b08      	ldr	r3, [pc, #32]	@ (800137c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800135c:	695a      	ldr	r2, [r3, #20]
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	4013      	ands	r3, r2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d006      	beq.n	8001374 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001366:	4a05      	ldr	r2, [pc, #20]	@ (800137c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fa2a 	bl	80007c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40013c00 	.word	0x40013c00

08001380 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af02      	add	r7, sp, #8
 8001386:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e108      	b.n	80015a4 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d106      	bne.n	80013b2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f007 f8ef 	bl	8008590 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2203      	movs	r2, #3
 80013b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013c0:	d102      	bne.n	80013c8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f003 fca0 	bl	8004d12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	7c1a      	ldrb	r2, [r3, #16]
 80013da:	f88d 2000 	strb.w	r2, [sp]
 80013de:	3304      	adds	r3, #4
 80013e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013e2:	f003 fb7f 	bl	8004ae4 <USB_CoreInit>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2202      	movs	r2, #2
 80013f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e0d5      	b.n	80015a4 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 fc98 	bl	8004d34 <USB_SetCurrentMode>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2202      	movs	r2, #2
 800140e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e0c6      	b.n	80015a4 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001416:	2300      	movs	r3, #0
 8001418:	73fb      	strb	r3, [r7, #15]
 800141a:	e04a      	b.n	80014b2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4413      	add	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	3315      	adds	r3, #21
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001430:	7bfa      	ldrb	r2, [r7, #15]
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4413      	add	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	3314      	adds	r3, #20
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	b298      	uxth	r0, r3
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	332e      	adds	r3, #46	@ 0x2e
 8001458:	4602      	mov	r2, r0
 800145a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	3318      	adds	r3, #24
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	331c      	adds	r3, #28
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	4413      	add	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	3320      	adds	r3, #32
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001498:	7bfa      	ldrb	r2, [r7, #15]
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	4413      	add	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	3324      	adds	r3, #36	@ 0x24
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	3301      	adds	r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	791b      	ldrb	r3, [r3, #4]
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d3af      	bcc.n	800141c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
 80014c0:	e044      	b.n	800154c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80014ea:	7bfa      	ldrb	r2, [r7, #15]
 80014ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4413      	add	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800151a:	7bfa      	ldrb	r2, [r7, #15]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	440b      	add	r3, r1
 8001528:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	3301      	adds	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	791b      	ldrb	r3, [r3, #4]
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	429a      	cmp	r2, r3
 8001554:	d3b5      	bcc.n	80014c2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	7c1a      	ldrb	r2, [r3, #16]
 800155e:	f88d 2000 	strb.w	r2, [sp]
 8001562:	3304      	adds	r3, #4
 8001564:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001566:	f003 fc31 	bl	8004dcc <USB_DevInit>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2202      	movs	r2, #2
 8001574:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e013      	b.n	80015a4 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	7b1b      	ldrb	r3, [r3, #12]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d102      	bne.n	8001598 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f001 f96e 	bl	8002874 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f004 fc6e 	bl	8005e7e <USB_DevDisconnect>

  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_PCD_Start+0x1c>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e022      	b.n	800160e <HAL_PCD_Start+0x62>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d009      	beq.n	80015f0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d105      	bne.n	80015f0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 fb7b 	bl	8004cf0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f004 fc1c 	bl	8005e3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001616:	b590      	push	{r4, r7, lr}
 8001618:	b08d      	sub	sp, #52	@ 0x34
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f004 fcda 	bl	8005fe6 <USB_GetMode>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	f040 84b9 	bne.w	8001fac <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f004 fc3e 	bl	8005ec0 <USB_ReadInterrupts>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 84af 	beq.w	8001faa <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f004 fc2b 	bl	8005ec0 <USB_ReadInterrupts>
 800166a:	4603      	mov	r3, r0
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b02      	cmp	r3, #2
 8001672:	d107      	bne.n	8001684 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	695a      	ldr	r2, [r3, #20]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f002 0202 	and.w	r2, r2, #2
 8001682:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f004 fc19 	bl	8005ec0 <USB_ReadInterrupts>
 800168e:	4603      	mov	r3, r0
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	2b10      	cmp	r3, #16
 8001696:	d161      	bne.n	800175c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699a      	ldr	r2, [r3, #24]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0210 	bic.w	r2, r2, #16
 80016a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	f003 020f 	and.w	r2, r3, #15
 80016b4:	4613      	mov	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	3304      	adds	r3, #4
 80016c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	0c5b      	lsrs	r3, r3, #17
 80016cc:	f003 030f 	and.w	r3, r3, #15
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d124      	bne.n	800171e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d035      	beq.n	800174c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	091b      	lsrs	r3, r3, #4
 80016e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	6a38      	ldr	r0, [r7, #32]
 80016f4:	f004 fa50 	bl	8005b98 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001704:	441a      	add	r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	695a      	ldr	r2, [r3, #20]
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001716:	441a      	add	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	615a      	str	r2, [r3, #20]
 800171c:	e016      	b.n	800174c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	0c5b      	lsrs	r3, r3, #17
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	2b06      	cmp	r3, #6
 8001728:	d110      	bne.n	800174c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001730:	2208      	movs	r2, #8
 8001732:	4619      	mov	r1, r3
 8001734:	6a38      	ldr	r0, [r7, #32]
 8001736:	f004 fa2f 	bl	8005b98 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001746:	441a      	add	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	699a      	ldr	r2, [r3, #24]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0210 	orr.w	r2, r2, #16
 800175a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f004 fbad 	bl	8005ec0 <USB_ReadInterrupts>
 8001766:	4603      	mov	r3, r0
 8001768:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800176c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001770:	f040 80a7 	bne.w	80018c2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f004 fbb2 	bl	8005ee6 <USB_ReadDevAllOutEpInterrupt>
 8001782:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001784:	e099      	b.n	80018ba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 808e 	beq.w	80018ae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f004 fbd6 	bl	8005f4e <USB_ReadDevOutEPInterrupt>
 80017a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00c      	beq.n	80017c8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80017ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b0:	015a      	lsls	r2, r3, #5
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017ba:	461a      	mov	r2, r3
 80017bc:	2301      	movs	r3, #1
 80017be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80017c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fed0 	bl	8002568 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00c      	beq.n	80017ec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d4:	015a      	lsls	r2, r3, #5
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	4413      	add	r3, r2
 80017da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017de:	461a      	mov	r2, r3
 80017e0:	2308      	movs	r3, #8
 80017e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80017e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 ffa6 	bl	8002738 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d008      	beq.n	8001808 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	015a      	lsls	r2, r3, #5
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	4413      	add	r3, r2
 80017fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001802:	461a      	mov	r2, r3
 8001804:	2310      	movs	r3, #16
 8001806:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d030      	beq.n	8001874 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800181a:	2b80      	cmp	r3, #128	@ 0x80
 800181c:	d109      	bne.n	8001832 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800182c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001830:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001834:	4613      	mov	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	4413      	add	r3, r2
 8001844:	3304      	adds	r3, #4
 8001846:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	78db      	ldrb	r3, [r3, #3]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d108      	bne.n	8001862 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	2200      	movs	r2, #0
 8001854:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001858:	b2db      	uxtb	r3, r3
 800185a:	4619      	mov	r1, r3
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f006 ffb3 	bl	80087c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001864:	015a      	lsls	r2, r3, #5
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	4413      	add	r3, r2
 800186a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800186e:	461a      	mov	r2, r3
 8001870:	2302      	movs	r3, #2
 8001872:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	f003 0320 	and.w	r3, r3, #32
 800187a:	2b00      	cmp	r3, #0
 800187c:	d008      	beq.n	8001890 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001880:	015a      	lsls	r2, r3, #5
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	4413      	add	r3, r2
 8001886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800188a:	461a      	mov	r2, r3
 800188c:	2320      	movs	r3, #32
 800188e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	015a      	lsls	r2, r3, #5
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	4413      	add	r3, r2
 80018a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018a6:	461a      	mov	r2, r3
 80018a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	3301      	adds	r3, #1
 80018b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80018b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b6:	085b      	lsrs	r3, r3, #1
 80018b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80018ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f47f af62 	bne.w	8001786 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f004 fafa 	bl	8005ec0 <USB_ReadInterrupts>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80018d6:	f040 80db 	bne.w	8001a90 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f004 fb1b 	bl	8005f1a <USB_ReadDevAllInEpInterrupt>
 80018e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80018ea:	e0cd      	b.n	8001a88 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 80c2 	beq.w	8001a7c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	4611      	mov	r1, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f004 fb41 	bl	8005f8a <USB_ReadDevInEPInterrupt>
 8001908:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d057      	beq.n	80019c4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	2201      	movs	r2, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	43db      	mvns	r3, r3
 800192e:	69f9      	ldr	r1, [r7, #28]
 8001930:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001934:	4013      	ands	r3, r2
 8001936:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193a:	015a      	lsls	r2, r3, #5
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	4413      	add	r3, r2
 8001940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001944:	461a      	mov	r2, r3
 8001946:	2301      	movs	r3, #1
 8001948:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	799b      	ldrb	r3, [r3, #6]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d132      	bne.n	80019b8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001956:	4613      	mov	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	3320      	adds	r3, #32
 8001962:	6819      	ldr	r1, [r3, #0]
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001968:	4613      	mov	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4413      	add	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4403      	add	r3, r0
 8001972:	331c      	adds	r3, #28
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4419      	add	r1, r3
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800197c:	4613      	mov	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4403      	add	r3, r0
 8001986:	3320      	adds	r3, #32
 8001988:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198c:	2b00      	cmp	r3, #0
 800198e:	d113      	bne.n	80019b8 <HAL_PCD_IRQHandler+0x3a2>
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001994:	4613      	mov	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	3324      	adds	r3, #36	@ 0x24
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d108      	bne.n	80019b8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80019b0:	461a      	mov	r2, r3
 80019b2:	2101      	movs	r1, #1
 80019b4:	f004 fb48 	bl	8006048 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	4619      	mov	r1, r3
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f006 fe7d 	bl	80086be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d008      	beq.n	80019e0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	015a      	lsls	r2, r3, #5
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	4413      	add	r3, r2
 80019d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019da:	461a      	mov	r2, r3
 80019dc:	2308      	movs	r3, #8
 80019de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d008      	beq.n	80019fc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	015a      	lsls	r2, r3, #5
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	4413      	add	r3, r2
 80019f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019f6:	461a      	mov	r2, r3
 80019f8:	2310      	movs	r3, #16
 80019fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d008      	beq.n	8001a18 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	015a      	lsls	r2, r3, #5
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a12:	461a      	mov	r2, r3
 8001a14:	2340      	movs	r3, #64	@ 0x40
 8001a16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d023      	beq.n	8001a6a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001a22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a24:	6a38      	ldr	r0, [r7, #32]
 8001a26:	f003 fb2f 	bl	8005088 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	3310      	adds	r3, #16
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	78db      	ldrb	r3, [r3, #3]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d108      	bne.n	8001a58 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	4619      	mov	r1, r3
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f006 feca 	bl	80087ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	015a      	lsls	r2, r3, #5
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a64:	461a      	mov	r2, r3
 8001a66:	2302      	movs	r3, #2
 8001a68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fcea 	bl	8002450 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7e:	3301      	adds	r3, #1
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a84:	085b      	lsrs	r3, r3, #1
 8001a86:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f47f af2e 	bne.w	80018ec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f004 fa13 	bl	8005ec0 <USB_ReadInterrupts>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001aa4:	d122      	bne.n	8001aec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	69fa      	ldr	r2, [r7, #28]
 8001ab0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ab4:	f023 0301 	bic.w	r3, r3, #1
 8001ab8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d108      	bne.n	8001ad6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001acc:	2100      	movs	r1, #0
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f007 f844 	bl	8008b5c <HAL_PCDEx_LPM_Callback>
 8001ad4:	e002      	b.n	8001adc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f006 fe68 	bl	80087ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f004 f9e5 	bl	8005ec0 <USB_ReadInterrupts>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001afc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b00:	d112      	bne.n	8001b28 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d102      	bne.n	8001b18 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f006 fe24 	bl	8008760 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001b26:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f004 f9c7 	bl	8005ec0 <USB_ReadInterrupts>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001b3c:	d121      	bne.n	8001b82 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001b4c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d111      	bne.n	8001b7c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	f003 020f 	and.w	r2, r3, #15
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001b72:	2101      	movs	r1, #1
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f006 fff1 	bl	8008b5c <HAL_PCDEx_LPM_Callback>
 8001b7a:	e002      	b.n	8001b82 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f006 fdef 	bl	8008760 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 f99a 	bl	8005ec0 <USB_ReadInterrupts>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b96:	f040 80b7 	bne.w	8001d08 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2110      	movs	r1, #16
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f003 fa67 	bl	8005088 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bbe:	e046      	b.n	8001c4e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bc2:	015a      	lsls	r2, r3, #5
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bcc:	461a      	mov	r2, r3
 8001bce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001bd2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001be4:	0151      	lsls	r1, r2, #5
 8001be6:	69fa      	ldr	r2, [r7, #28]
 8001be8:	440a      	add	r2, r1
 8001bea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001bee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001bf2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf6:	015a      	lsls	r2, r3, #5
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c00:	461a      	mov	r2, r3
 8001c02:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001c06:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c0a:	015a      	lsls	r2, r3, #5
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c18:	0151      	lsls	r1, r2, #5
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	440a      	add	r2, r1
 8001c1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001c22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001c26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c2a:	015a      	lsls	r2, r3, #5
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c38:	0151      	lsls	r1, r2, #5
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	440a      	add	r2, r1
 8001c3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001c42:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001c46:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	791b      	ldrb	r3, [r3, #4]
 8001c52:	461a      	mov	r2, r3
 8001c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d3b2      	bcc.n	8001bc0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c68:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001c6c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	7bdb      	ldrb	r3, [r3, #15]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d016      	beq.n	8001ca4 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c86:	f043 030b 	orr.w	r3, r3, #11
 8001c8a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c9c:	f043 030b 	orr.w	r3, r3, #11
 8001ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ca2:	e015      	b.n	8001cd0 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	69fa      	ldr	r2, [r7, #28]
 8001cae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cb2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cb6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001cba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cca:	f043 030b 	orr.w	r3, r3, #11
 8001cce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cde:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001ce2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f004 f9a8 	bl	8006048 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001d06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f004 f8d7 	bl	8005ec0 <USB_ReadInterrupts>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d1c:	d123      	bne.n	8001d66 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f004 f96d 	bl	8006002 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f003 fa24 	bl	800517a <USB_GetDevSpeed>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681c      	ldr	r4, [r3, #0]
 8001d3e:	f000 fea3 	bl	8002a88 <HAL_RCC_GetHCLKFreq>
 8001d42:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	f002 ff2e 	bl	8004bac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f006 fcdc 	bl	800870e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695a      	ldr	r2, [r3, #20]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001d64:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f004 f8a8 	bl	8005ec0 <USB_ReadInterrupts>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d10a      	bne.n	8001d90 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f006 fcb9 	bl	80086f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695a      	ldr	r2, [r3, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f002 0208 	and.w	r2, r2, #8
 8001d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f004 f893 	bl	8005ec0 <USB_ReadInterrupts>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da0:	2b80      	cmp	r3, #128	@ 0x80
 8001da2:	d123      	bne.n	8001dec <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001db0:	2301      	movs	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001db4:	e014      	b.n	8001de0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d105      	bne.n	8001dda <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 fb0a 	bl	80023ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	3301      	adds	r3, #1
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	791b      	ldrb	r3, [r3, #4]
 8001de4:	461a      	mov	r2, r3
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d3e4      	bcc.n	8001db6 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f004 f865 	bl	8005ec0 <USB_ReadInterrupts>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e00:	d13c      	bne.n	8001e7c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e02:	2301      	movs	r3, #1
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e06:	e02b      	b.n	8001e60 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	3318      	adds	r3, #24
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d115      	bne.n	8001e5a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e2e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	da12      	bge.n	8001e5a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	3317      	adds	r3, #23
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	4619      	mov	r1, r3
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 faca 	bl	80023ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	791b      	ldrb	r3, [r3, #4]
 8001e64:	461a      	mov	r2, r3
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d3cd      	bcc.n	8001e08 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001e7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f004 f81d 	bl	8005ec0 <USB_ReadInterrupts>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001e90:	d156      	bne.n	8001f40 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e92:	2301      	movs	r3, #1
 8001e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e96:	e045      	b.n	8001f24 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9a:	015a      	lsls	r2, r3, #5
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d12e      	bne.n	8001f1e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ec0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	da2b      	bge.n	8001f1e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001ed2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d121      	bne.n	8001f1e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10a      	bne.n	8001f1e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f1a:	6053      	str	r3, [r2, #4]
            break;
 8001f1c:	e008      	b.n	8001f30 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	3301      	adds	r3, #1
 8001f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	791b      	ldrb	r3, [r3, #4]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d3b3      	bcc.n	8001e98 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001f3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 ffbb 	bl	8005ec0 <USB_ReadInterrupts>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f54:	d10a      	bne.n	8001f6c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f006 fc5a 	bl	8008810 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001f6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 ffa5 	bl	8005ec0 <USB_ReadInterrupts>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d115      	bne.n	8001fac <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f006 fc4a 	bl	800882c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6859      	ldr	r1, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	e000      	b.n	8001fac <HAL_PCD_IRQHandler+0x996>
      return;
 8001faa:	bf00      	nop
    }
  }
}
 8001fac:	3734      	adds	r7, #52	@ 0x34
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd90      	pop	{r4, r7, pc}

08001fb2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_PCD_SetAddress+0x1a>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e012      	b.n	8001ff2 <HAL_PCD_SetAddress+0x40>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	78fa      	ldrb	r2, [r7, #3]
 8001fd8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	78fa      	ldrb	r2, [r7, #3]
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f003 ff04 	bl	8005df0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	4608      	mov	r0, r1
 8002004:	4611      	mov	r1, r2
 8002006:	461a      	mov	r2, r3
 8002008:	4603      	mov	r3, r0
 800200a:	70fb      	strb	r3, [r7, #3]
 800200c:	460b      	mov	r3, r1
 800200e:	803b      	strh	r3, [r7, #0]
 8002010:	4613      	mov	r3, r2
 8002012:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002018:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201c:	2b00      	cmp	r3, #0
 800201e:	da0f      	bge.n	8002040 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	f003 020f 	and.w	r2, r3, #15
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	3310      	adds	r3, #16
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	3304      	adds	r3, #4
 8002036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	705a      	strb	r2, [r3, #1]
 800203e:	e00f      	b.n	8002060 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	f003 020f 	and.w	r2, r3, #15
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	3304      	adds	r3, #4
 8002058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	b2da      	uxtb	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800206c:	883b      	ldrh	r3, [r7, #0]
 800206e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	78ba      	ldrb	r2, [r7, #2]
 800207a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	785b      	ldrb	r3, [r3, #1]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d004      	beq.n	800208e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800208e:	78bb      	ldrb	r3, [r7, #2]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d102      	bne.n	800209a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_PCD_EP_Open+0xae>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e00e      	b.n	80020c6 <HAL_PCD_EP_Open+0xcc>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68f9      	ldr	r1, [r7, #12]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 f884 	bl	80051c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80020c4:	7afb      	ldrb	r3, [r7, #11]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	da0f      	bge.n	8002102 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	f003 020f 	and.w	r2, r3, #15
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	3310      	adds	r3, #16
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	3304      	adds	r3, #4
 80020f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2201      	movs	r2, #1
 80020fe:	705a      	strb	r2, [r3, #1]
 8002100:	e00f      	b.n	8002122 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	f003 020f 	and.w	r2, r3, #15
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4413      	add	r3, r2
 8002118:	3304      	adds	r3, #4
 800211a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	b2da      	uxtb	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_PCD_EP_Close+0x6e>
 8002138:	2302      	movs	r3, #2
 800213a:	e00e      	b.n	800215a <HAL_PCD_EP_Close+0x8c>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68f9      	ldr	r1, [r7, #12]
 800214a:	4618      	mov	r0, r3
 800214c:	f003 f8c2 	bl	80052d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b086      	sub	sp, #24
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	460b      	mov	r3, r1
 8002170:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002172:	7afb      	ldrb	r3, [r7, #11]
 8002174:	f003 020f 	and.w	r2, r3, #15
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4413      	add	r3, r2
 8002188:	3304      	adds	r3, #4
 800218a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	2200      	movs	r2, #0
 800219c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	2200      	movs	r2, #0
 80021a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021a4:	7afb      	ldrb	r3, [r7, #11]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	799b      	ldrb	r3, [r3, #6]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d102      	bne.n	80021be <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	799b      	ldrb	r3, [r3, #6]
 80021c6:	461a      	mov	r2, r3
 80021c8:	6979      	ldr	r1, [r7, #20]
 80021ca:	f003 f95f 	bl	800548c <USB_EPStartXfer>

  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	f003 020f 	and.w	r2, r3, #15
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	460b      	mov	r3, r1
 8002216:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002218:	7afb      	ldrb	r3, [r7, #11]
 800221a:	f003 020f 	and.w	r2, r3, #15
 800221e:	4613      	mov	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	3310      	adds	r3, #16
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4413      	add	r3, r2
 800222c:	3304      	adds	r3, #4
 800222e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2200      	movs	r2, #0
 8002240:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2201      	movs	r2, #1
 8002246:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002248:	7afb      	ldrb	r3, [r7, #11]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	b2da      	uxtb	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	799b      	ldrb	r3, [r3, #6]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d102      	bne.n	8002262 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	799b      	ldrb	r3, [r3, #6]
 800226a:	461a      	mov	r2, r3
 800226c:	6979      	ldr	r1, [r7, #20]
 800226e:	f003 f90d 	bl	800548c <USB_EPStartXfer>

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	7912      	ldrb	r2, [r2, #4]
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e04f      	b.n	800233a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800229a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	da0f      	bge.n	80022c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022a2:	78fb      	ldrb	r3, [r7, #3]
 80022a4:	f003 020f 	and.w	r2, r3, #15
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	3310      	adds	r3, #16
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	3304      	adds	r3, #4
 80022b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2201      	movs	r2, #1
 80022be:	705a      	strb	r2, [r3, #1]
 80022c0:	e00d      	b.n	80022de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	4413      	add	r3, r2
 80022d4:	3304      	adds	r3, #4
 80022d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2201      	movs	r2, #1
 80022e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_PCD_EP_SetStall+0x82>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e01d      	b.n	800233a <HAL_PCD_EP_SetStall+0xbe>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68f9      	ldr	r1, [r7, #12]
 800230c:	4618      	mov	r0, r3
 800230e:	f003 fc9b 	bl	8005c48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	2b00      	cmp	r3, #0
 800231a:	d109      	bne.n	8002330 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	7999      	ldrb	r1, [r3, #6]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800232a:	461a      	mov	r2, r3
 800232c:	f003 fe8c 	bl	8006048 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	460b      	mov	r3, r1
 800234c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	7912      	ldrb	r2, [r2, #4]
 8002358:	4293      	cmp	r3, r2
 800235a:	d901      	bls.n	8002360 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e042      	b.n	80023e6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002360:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002364:	2b00      	cmp	r3, #0
 8002366:	da0f      	bge.n	8002388 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	f003 020f 	and.w	r2, r3, #15
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	3310      	adds	r3, #16
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	4413      	add	r3, r2
 800237c:	3304      	adds	r3, #4
 800237e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	705a      	strb	r2, [r3, #1]
 8002386:	e00f      	b.n	80023a8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	f003 020f 	and.w	r2, r3, #15
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	3304      	adds	r3, #4
 80023a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_PCD_EP_ClrStall+0x86>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e00e      	b.n	80023e6 <HAL_PCD_EP_ClrStall+0xa4>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68f9      	ldr	r1, [r7, #12]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f003 fca4 	bl	8005d24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80023fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	da0c      	bge.n	800241c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	f003 020f 	and.w	r2, r3, #15
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	3310      	adds	r3, #16
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	3304      	adds	r3, #4
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	e00c      	b.n	8002436 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	f003 020f 	and.w	r2, r3, #15
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	3304      	adds	r3, #4
 8002434:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68f9      	ldr	r1, [r7, #12]
 800243c:	4618      	mov	r0, r3
 800243e:	f003 fac3 	bl	80059c8 <USB_EPStopXfer>
 8002442:	4603      	mov	r3, r0
 8002444:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002446:	7afb      	ldrb	r3, [r7, #11]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	@ 0x28
 8002454:	af02      	add	r7, sp, #8
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	3310      	adds	r3, #16
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	4413      	add	r3, r2
 8002474:	3304      	adds	r3, #4
 8002476:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	429a      	cmp	r2, r3
 8002482:	d901      	bls.n	8002488 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e06b      	b.n	8002560 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	429a      	cmp	r2, r3
 800249c:	d902      	bls.n	80024a4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	3303      	adds	r3, #3
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024ac:	e02a      	b.n	8002504 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d902      	bls.n	80024ca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3303      	adds	r3, #3
 80024ce:	089b      	lsrs	r3, r3, #2
 80024d0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	68d9      	ldr	r1, [r3, #12]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	4603      	mov	r3, r0
 80024e6:	6978      	ldr	r0, [r7, #20]
 80024e8:	f003 fb18 	bl	8005b1c <USB_WritePacket>

    ep->xfer_buff  += len;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	441a      	add	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	695a      	ldr	r2, [r3, #20]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	441a      	add	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4413      	add	r3, r2
 800250c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	429a      	cmp	r2, r3
 8002518:	d809      	bhi.n	800252e <PCD_WriteEmptyTxFifo+0xde>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	695a      	ldr	r2, [r3, #20]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002522:	429a      	cmp	r2, r3
 8002524:	d203      	bcs.n	800252e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1bf      	bne.n	80024ae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	429a      	cmp	r2, r3
 8002538:	d811      	bhi.n	800255e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	2201      	movs	r2, #1
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800254e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	43db      	mvns	r3, r3
 8002554:	6939      	ldr	r1, [r7, #16]
 8002556:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800255a:	4013      	ands	r3, r2
 800255c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	333c      	adds	r3, #60	@ 0x3c
 8002580:	3304      	adds	r3, #4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4413      	add	r3, r2
 800258e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	799b      	ldrb	r3, [r3, #6]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d17b      	bne.n	8002696 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d015      	beq.n	80025d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	4a61      	ldr	r2, [pc, #388]	@ (8002730 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	f240 80b9 	bls.w	8002724 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80b3 	beq.w	8002724 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025ca:	461a      	mov	r2, r3
 80025cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025d0:	6093      	str	r3, [r2, #8]
 80025d2:	e0a7      	b.n	8002724 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d009      	beq.n	80025f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025ea:	461a      	mov	r2, r3
 80025ec:	2320      	movs	r3, #32
 80025ee:	6093      	str	r3, [r2, #8]
 80025f0:	e098      	b.n	8002724 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f040 8093 	bne.w	8002724 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	4a4b      	ldr	r2, [pc, #300]	@ (8002730 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d90f      	bls.n	8002626 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	4413      	add	r3, r2
 8002618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800261c:	461a      	mov	r2, r3
 800261e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002622:	6093      	str	r3, [r2, #8]
 8002624:	e07e      	b.n	8002724 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	4413      	add	r3, r2
 8002638:	3304      	adds	r3, #4
 800263a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a1a      	ldr	r2, [r3, #32]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	0159      	lsls	r1, r3, #5
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	440b      	add	r3, r1
 8002648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002652:	1ad2      	subs	r2, r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d114      	bne.n	8002688 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002670:	461a      	mov	r2, r3
 8002672:	2101      	movs	r1, #1
 8002674:	f003 fce8 	bl	8006048 <USB_EP0_OutStart>
 8002678:	e006      	b.n	8002688 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	441a      	add	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	b2db      	uxtb	r3, r3
 800268c:	4619      	mov	r1, r3
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f005 fffa 	bl	8008688 <HAL_PCD_DataOutStageCallback>
 8002694:	e046      	b.n	8002724 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	4a26      	ldr	r2, [pc, #152]	@ (8002734 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d124      	bne.n	80026e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026b4:	461a      	mov	r2, r3
 80026b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026ba:	6093      	str	r3, [r2, #8]
 80026bc:	e032      	b.n	8002724 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026d4:	461a      	mov	r2, r3
 80026d6:	2320      	movs	r3, #32
 80026d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	4619      	mov	r1, r3
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f005 ffd1 	bl	8008688 <HAL_PCD_DataOutStageCallback>
 80026e6:	e01d      	b.n	8002724 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d114      	bne.n	8002718 <PCD_EP_OutXfrComplete_int+0x1b0>
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d108      	bne.n	8002718 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002710:	461a      	mov	r2, r3
 8002712:	2100      	movs	r1, #0
 8002714:	f003 fc98 	bl	8006048 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	4619      	mov	r1, r3
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f005 ffb2 	bl	8008688 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3720      	adds	r7, #32
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	4f54300a 	.word	0x4f54300a
 8002734:	4f54310a 	.word	0x4f54310a

08002738 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	333c      	adds	r3, #60	@ 0x3c
 8002750:	3304      	adds	r3, #4
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4413      	add	r3, r2
 800275e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4a15      	ldr	r2, [pc, #84]	@ (80027c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d90e      	bls.n	800278c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002774:	2b00      	cmp	r3, #0
 8002776:	d009      	beq.n	800278c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4413      	add	r3, r2
 8002780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002784:	461a      	mov	r2, r3
 8002786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800278a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f005 ff69 	bl	8008664 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4a0a      	ldr	r2, [pc, #40]	@ (80027c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d90c      	bls.n	80027b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	799b      	ldrb	r3, [r3, #6]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d108      	bne.n	80027b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80027ac:	461a      	mov	r2, r3
 80027ae:	2101      	movs	r1, #1
 80027b0:	f003 fc4a 	bl	8006048 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	4f54300a 	.word	0x4f54300a

080027c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	70fb      	strb	r3, [r7, #3]
 80027d0:	4613      	mov	r3, r2
 80027d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d107      	bne.n	80027f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80027e2:	883b      	ldrh	r3, [r7, #0]
 80027e4:	0419      	lsls	r1, r3, #16
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80027f0:	e028      	b.n	8002844 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f8:	0c1b      	lsrs	r3, r3, #16
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	4413      	add	r3, r2
 80027fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002800:	2300      	movs	r3, #0
 8002802:	73fb      	strb	r3, [r7, #15]
 8002804:	e00d      	b.n	8002822 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	3340      	adds	r3, #64	@ 0x40
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	0c1b      	lsrs	r3, r3, #16
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	4413      	add	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	3301      	adds	r3, #1
 8002820:	73fb      	strb	r3, [r7, #15]
 8002822:	7bfa      	ldrb	r2, [r7, #15]
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	3b01      	subs	r3, #1
 8002828:	429a      	cmp	r2, r3
 800282a:	d3ec      	bcc.n	8002806 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800282c:	883b      	ldrh	r3, [r7, #0]
 800282e:	0418      	lsls	r0, r3, #16
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6819      	ldr	r1, [r3, #0]
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	3b01      	subs	r3, #1
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	4302      	orrs	r2, r0
 800283c:	3340      	adds	r3, #64	@ 0x40
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	887a      	ldrh	r2, [r7, #2]
 8002864:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	f043 0303 	orr.w	r3, r3, #3
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0cc      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d0:	4b68      	ldr	r3, [pc, #416]	@ (8002a74 <HAL_RCC_ClockConfig+0x1b8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d90c      	bls.n	80028f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b65      	ldr	r3, [pc, #404]	@ (8002a74 <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e6:	4b63      	ldr	r3, [pc, #396]	@ (8002a74 <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0b8      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d020      	beq.n	8002946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002910:	4b59      	ldr	r3, [pc, #356]	@ (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	4a58      	ldr	r2, [pc, #352]	@ (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800291a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002928:	4b53      	ldr	r3, [pc, #332]	@ (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	4a52      	ldr	r2, [pc, #328]	@ (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002934:	4b50      	ldr	r3, [pc, #320]	@ (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	494d      	ldr	r1, [pc, #308]	@ (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	4313      	orrs	r3, r2
 8002944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d044      	beq.n	80029dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d107      	bne.n	800296a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295a:	4b47      	ldr	r3, [pc, #284]	@ (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d119      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e07f      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d003      	beq.n	800297a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002976:	2b03      	cmp	r3, #3
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e06f      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e067      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299a:	4b37      	ldr	r3, [pc, #220]	@ (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f023 0203 	bic.w	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4934      	ldr	r1, [pc, #208]	@ (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ac:	f7fe f936 	bl	8000c1c <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b4:	f7fe f932 	bl	8000c1c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e04f      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 020c 	and.w	r2, r3, #12
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1eb      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029dc:	4b25      	ldr	r3, [pc, #148]	@ (8002a74 <HAL_RCC_ClockConfig+0x1b8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d20c      	bcs.n	8002a04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b22      	ldr	r3, [pc, #136]	@ (8002a74 <HAL_RCC_ClockConfig+0x1b8>)
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f2:	4b20      	ldr	r3, [pc, #128]	@ (8002a74 <HAL_RCC_ClockConfig+0x1b8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e032      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a10:	4b19      	ldr	r3, [pc, #100]	@ (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4916      	ldr	r1, [pc, #88]	@ (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d009      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a2e:	4b12      	ldr	r3, [pc, #72]	@ (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	490e      	ldr	r1, [pc, #56]	@ (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a42:	f000 fb7f 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 8002a46:	4602      	mov	r2, r0
 8002a48:	4b0b      	ldr	r3, [pc, #44]	@ (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	490a      	ldr	r1, [pc, #40]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	5ccb      	ldrb	r3, [r1, r3]
 8002a56:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5a:	4a09      	ldr	r2, [pc, #36]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a5e:	4b09      	ldr	r3, [pc, #36]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe f896 	bl	8000b94 <HAL_InitTick>

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40023c00 	.word	0x40023c00
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	08008e18 	.word	0x08008e18
 8002a80:	20000000 	.word	0x20000000
 8002a84:	20000004 	.word	0x20000004

08002a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	@ (8002a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	20000000 	.word	0x20000000

08002aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aa4:	f7ff fff0 	bl	8002a88 <HAL_RCC_GetHCLKFreq>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b05      	ldr	r3, [pc, #20]	@ (8002ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	0a9b      	lsrs	r3, r3, #10
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	4903      	ldr	r1, [pc, #12]	@ (8002ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab6:	5ccb      	ldrb	r3, [r1, r3]
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	08008e28 	.word	0x08008e28

08002ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002acc:	f7ff ffdc 	bl	8002a88 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	0b5b      	lsrs	r3, r3, #13
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4903      	ldr	r1, [pc, #12]	@ (8002aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	08008e28 	.word	0x08008e28

08002af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08c      	sub	sp, #48	@ 0x30
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d010      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002b28:	4b6f      	ldr	r3, [pc, #444]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b2e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b36:	496c      	ldr	r1, [pc, #432]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002b46:	2301      	movs	r3, #1
 8002b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d010      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002b56:	4b64      	ldr	r3, [pc, #400]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b5c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b64:	4960      	ldr	r1, [pc, #384]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002b74:	2301      	movs	r3, #1
 8002b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d017      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b84:	4b58      	ldr	r3, [pc, #352]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	4955      	ldr	r1, [pc, #340]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d017      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bc0:	4b49      	ldr	r3, [pc, #292]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bc6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bce:	4946      	ldr	r1, [pc, #280]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bde:	d101      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002be0:	2301      	movs	r3, #1
 8002be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002bec:	2301      	movs	r3, #1
 8002bee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 808a 	beq.w	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	4b39      	ldr	r3, [pc, #228]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	4a38      	ldr	r2, [pc, #224]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c0e:	4b36      	ldr	r3, [pc, #216]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002c1a:	4b34      	ldr	r3, [pc, #208]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a33      	ldr	r2, [pc, #204]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c26:	f7fd fff9 	bl	8000c1c <HAL_GetTick>
 8002c2a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2e:	f7fd fff5 	bl	8000c1c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e278      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002c40:	4b2a      	ldr	r3, [pc, #168]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c4c:	4b26      	ldr	r3, [pc, #152]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c54:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d02f      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c64:	6a3a      	ldr	r2, [r7, #32]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d028      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c72:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c74:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c80:	4a19      	ldr	r2, [pc, #100]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c86:	4b18      	ldr	r3, [pc, #96]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d114      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c92:	f7fd ffc3 	bl	8000c1c <HAL_GetTick>
 8002c96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c98:	e00a      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7fd ffbf 	bl	8000c1c <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e240      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ee      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cc8:	d114      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002cca:	4b07      	ldr	r3, [pc, #28]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cde:	4902      	ldr	r1, [pc, #8]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	608b      	str	r3, [r1, #8]
 8002ce4:	e00c      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	42470e40 	.word	0x42470e40
 8002cf4:	4b4a      	ldr	r3, [pc, #296]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4a49      	ldr	r2, [pc, #292]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cfa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002cfe:	6093      	str	r3, [r2, #8]
 8002d00:	4b47      	ldr	r3, [pc, #284]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0c:	4944      	ldr	r1, [pc, #272]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d004      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002d24:	4b3f      	ldr	r3, [pc, #252]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002d26:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002d34:	4b3a      	ldr	r3, [pc, #232]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d3a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d42:	4937      	ldr	r1, [pc, #220]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d56:	4b32      	ldr	r3, [pc, #200]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d5c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d64:	492e      	ldr	r1, [pc, #184]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d011      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d78:	4b29      	ldr	r3, [pc, #164]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d7e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d86:	4926      	ldr	r1, [pc, #152]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d96:	d101      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002da8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db6:	491a      	ldr	r1, [pc, #104]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d011      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002dca:	4b15      	ldr	r3, [pc, #84]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dd0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dd8:	4911      	ldr	r1, [pc, #68]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002de8:	d101      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002dea:	2301      	movs	r3, #1
 8002dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d005      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dfc:	f040 80ff 	bne.w	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e00:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e06:	f7fd ff09 	bl	8000c1c <HAL_GetTick>
 8002e0a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e0c:	e00e      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e0e:	f7fd ff05 	bl	8000c1c <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d907      	bls.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e188      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002e20:	40023800 	.word	0x40023800
 8002e24:	424711e0 	.word	0x424711e0
 8002e28:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e2c:	4b7e      	ldr	r3, [pc, #504]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ea      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d009      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d028      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d124      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002e60:	4b71      	ldr	r3, [pc, #452]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e66:	0c1b      	lsrs	r3, r3, #16
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e72:	4b6d      	ldr	r3, [pc, #436]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e78:	0e1b      	lsrs	r3, r3, #24
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	019b      	lsls	r3, r3, #6
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	3b01      	subs	r3, #1
 8002e92:	041b      	lsls	r3, r3, #16
 8002e94:	431a      	orrs	r2, r3
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	061b      	lsls	r3, r3, #24
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	071b      	lsls	r3, r3, #28
 8002ea2:	4961      	ldr	r1, [pc, #388]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d004      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d035      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ed4:	d130      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002ed6:	4b54      	ldr	r3, [pc, #336]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002edc:	0c1b      	lsrs	r3, r3, #16
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ee8:	4b4f      	ldr	r3, [pc, #316]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eee:	0f1b      	lsrs	r3, r3, #28
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	019b      	lsls	r3, r3, #6
 8002f00:	431a      	orrs	r2, r3
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	085b      	lsrs	r3, r3, #1
 8002f06:	3b01      	subs	r3, #1
 8002f08:	041b      	lsls	r3, r3, #16
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	431a      	orrs	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	071b      	lsls	r3, r3, #28
 8002f18:	4943      	ldr	r1, [pc, #268]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f20:	4b41      	ldr	r3, [pc, #260]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f26:	f023 021f 	bic.w	r2, r3, #31
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	493d      	ldr	r1, [pc, #244]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d029      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f4c:	d124      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002f4e:	4b36      	ldr	r3, [pc, #216]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f54:	0c1b      	lsrs	r3, r3, #16
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f60:	4b31      	ldr	r3, [pc, #196]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f66:	0f1b      	lsrs	r3, r3, #28
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	019b      	lsls	r3, r3, #6
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	085b      	lsrs	r3, r3, #1
 8002f80:	3b01      	subs	r3, #1
 8002f82:	041b      	lsls	r3, r3, #16
 8002f84:	431a      	orrs	r2, r3
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	061b      	lsls	r3, r3, #24
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	071b      	lsls	r3, r3, #28
 8002f90:	4925      	ldr	r1, [pc, #148]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d016      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	019b      	lsls	r3, r3, #6
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	085b      	lsrs	r3, r3, #1
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	041b      	lsls	r3, r3, #16
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	061b      	lsls	r3, r3, #24
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	071b      	lsls	r3, r3, #28
 8002fca:	4917      	ldr	r1, [pc, #92]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fd2:	4b16      	ldr	r3, [pc, #88]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fd8:	f7fd fe20 	bl	8000c1c <HAL_GetTick>
 8002fdc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fe0:	f7fd fe1c 	bl	8000c1c <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e09f      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8002ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003000:	2b01      	cmp	r3, #1
 8003002:	f040 8095 	bne.w	8003130 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003006:	4b0a      	ldr	r3, [pc, #40]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800300c:	f7fd fe06 	bl	8000c1c <HAL_GetTick>
 8003010:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003012:	e00f      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003014:	f7fd fe02 	bl	8000c1c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d908      	bls.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e085      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	42470068 	.word	0x42470068
 8003030:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003034:	4b41      	ldr	r3, [pc, #260]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800303c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003040:	d0e8      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	2b00      	cmp	r3, #0
 8003054:	d009      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800305e:	2b00      	cmp	r3, #0
 8003060:	d02b      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003066:	2b00      	cmp	r3, #0
 8003068:	d127      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800306a:	4b34      	ldr	r3, [pc, #208]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003070:	0c1b      	lsrs	r3, r3, #16
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	3301      	adds	r3, #1
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699a      	ldr	r2, [r3, #24]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	019b      	lsls	r3, r3, #6
 8003086:	431a      	orrs	r2, r3
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	3b01      	subs	r3, #1
 800308e:	041b      	lsls	r3, r3, #16
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003096:	061b      	lsls	r3, r3, #24
 8003098:	4928      	ldr	r1, [pc, #160]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030a0:	4b26      	ldr	r3, [pc, #152]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030a6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ae:	3b01      	subs	r3, #1
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	4922      	ldr	r1, [pc, #136]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d01d      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030ce:	d118      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030d0:	4b1a      	ldr	r3, [pc, #104]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d6:	0e1b      	lsrs	r3, r3, #24
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	019b      	lsls	r3, r3, #6
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	3b01      	subs	r3, #1
 80030f2:	041b      	lsls	r3, r3, #16
 80030f4:	431a      	orrs	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	061b      	lsls	r3, r3, #24
 80030fa:	4910      	ldr	r1, [pc, #64]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003102:	4b0f      	ldr	r3, [pc, #60]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003108:	f7fd fd88 	bl	8000c1c <HAL_GetTick>
 800310c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003110:	f7fd fd84 	bl	8000c1c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e007      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003122:	4b06      	ldr	r3, [pc, #24]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800312a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800312e:	d1ef      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3730      	adds	r7, #48	@ 0x30
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40023800 	.word	0x40023800
 8003140:	42470070 	.word	0x42470070

08003144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003148:	b0ae      	sub	sp, #184	@ 0xb8
 800314a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800316a:	4bcb      	ldr	r3, [pc, #812]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x354>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	2b0c      	cmp	r3, #12
 8003174:	f200 8206 	bhi.w	8003584 <HAL_RCC_GetSysClockFreq+0x440>
 8003178:	a201      	add	r2, pc, #4	@ (adr r2, 8003180 <HAL_RCC_GetSysClockFreq+0x3c>)
 800317a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317e:	bf00      	nop
 8003180:	080031b5 	.word	0x080031b5
 8003184:	08003585 	.word	0x08003585
 8003188:	08003585 	.word	0x08003585
 800318c:	08003585 	.word	0x08003585
 8003190:	080031bd 	.word	0x080031bd
 8003194:	08003585 	.word	0x08003585
 8003198:	08003585 	.word	0x08003585
 800319c:	08003585 	.word	0x08003585
 80031a0:	080031c5 	.word	0x080031c5
 80031a4:	08003585 	.word	0x08003585
 80031a8:	08003585 	.word	0x08003585
 80031ac:	08003585 	.word	0x08003585
 80031b0:	080033b5 	.word	0x080033b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031b4:	4bb9      	ldr	r3, [pc, #740]	@ (800349c <HAL_RCC_GetSysClockFreq+0x358>)
 80031b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80031ba:	e1e7      	b.n	800358c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031bc:	4bb8      	ldr	r3, [pc, #736]	@ (80034a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80031be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80031c2:	e1e3      	b.n	800358c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031c4:	4bb4      	ldr	r3, [pc, #720]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x354>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031d0:	4bb1      	ldr	r3, [pc, #708]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x354>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d071      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031dc:	4bae      	ldr	r3, [pc, #696]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x354>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	099b      	lsrs	r3, r3, #6
 80031e2:	2200      	movs	r2, #0
 80031e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031e8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80031ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031f8:	2300      	movs	r3, #0
 80031fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003202:	4622      	mov	r2, r4
 8003204:	462b      	mov	r3, r5
 8003206:	f04f 0000 	mov.w	r0, #0
 800320a:	f04f 0100 	mov.w	r1, #0
 800320e:	0159      	lsls	r1, r3, #5
 8003210:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003214:	0150      	lsls	r0, r2, #5
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4621      	mov	r1, r4
 800321c:	1a51      	subs	r1, r2, r1
 800321e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003220:	4629      	mov	r1, r5
 8003222:	eb63 0301 	sbc.w	r3, r3, r1
 8003226:	647b      	str	r3, [r7, #68]	@ 0x44
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003234:	4649      	mov	r1, r9
 8003236:	018b      	lsls	r3, r1, #6
 8003238:	4641      	mov	r1, r8
 800323a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800323e:	4641      	mov	r1, r8
 8003240:	018a      	lsls	r2, r1, #6
 8003242:	4641      	mov	r1, r8
 8003244:	1a51      	subs	r1, r2, r1
 8003246:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003248:	4649      	mov	r1, r9
 800324a:	eb63 0301 	sbc.w	r3, r3, r1
 800324e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800325c:	4649      	mov	r1, r9
 800325e:	00cb      	lsls	r3, r1, #3
 8003260:	4641      	mov	r1, r8
 8003262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003266:	4641      	mov	r1, r8
 8003268:	00ca      	lsls	r2, r1, #3
 800326a:	4610      	mov	r0, r2
 800326c:	4619      	mov	r1, r3
 800326e:	4603      	mov	r3, r0
 8003270:	4622      	mov	r2, r4
 8003272:	189b      	adds	r3, r3, r2
 8003274:	633b      	str	r3, [r7, #48]	@ 0x30
 8003276:	462b      	mov	r3, r5
 8003278:	460a      	mov	r2, r1
 800327a:	eb42 0303 	adc.w	r3, r2, r3
 800327e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800328c:	4629      	mov	r1, r5
 800328e:	024b      	lsls	r3, r1, #9
 8003290:	4621      	mov	r1, r4
 8003292:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003296:	4621      	mov	r1, r4
 8003298:	024a      	lsls	r2, r1, #9
 800329a:	4610      	mov	r0, r2
 800329c:	4619      	mov	r1, r3
 800329e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032a2:	2200      	movs	r2, #0
 80032a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80032ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80032b0:	f7fc ffa8 	bl	8000204 <__aeabi_uldivmod>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4613      	mov	r3, r2
 80032ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032be:	e067      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c0:	4b75      	ldr	r3, [pc, #468]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x354>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	099b      	lsrs	r3, r3, #6
 80032c6:	2200      	movs	r2, #0
 80032c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032cc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80032d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032da:	2300      	movs	r3, #0
 80032dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80032e2:	4622      	mov	r2, r4
 80032e4:	462b      	mov	r3, r5
 80032e6:	f04f 0000 	mov.w	r0, #0
 80032ea:	f04f 0100 	mov.w	r1, #0
 80032ee:	0159      	lsls	r1, r3, #5
 80032f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f4:	0150      	lsls	r0, r2, #5
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4621      	mov	r1, r4
 80032fc:	1a51      	subs	r1, r2, r1
 80032fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003300:	4629      	mov	r1, r5
 8003302:	eb63 0301 	sbc.w	r3, r3, r1
 8003306:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003314:	4649      	mov	r1, r9
 8003316:	018b      	lsls	r3, r1, #6
 8003318:	4641      	mov	r1, r8
 800331a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800331e:	4641      	mov	r1, r8
 8003320:	018a      	lsls	r2, r1, #6
 8003322:	4641      	mov	r1, r8
 8003324:	ebb2 0a01 	subs.w	sl, r2, r1
 8003328:	4649      	mov	r1, r9
 800332a:	eb63 0b01 	sbc.w	fp, r3, r1
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800333a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800333e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003342:	4692      	mov	sl, r2
 8003344:	469b      	mov	fp, r3
 8003346:	4623      	mov	r3, r4
 8003348:	eb1a 0303 	adds.w	r3, sl, r3
 800334c:	623b      	str	r3, [r7, #32]
 800334e:	462b      	mov	r3, r5
 8003350:	eb4b 0303 	adc.w	r3, fp, r3
 8003354:	627b      	str	r3, [r7, #36]	@ 0x24
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003362:	4629      	mov	r1, r5
 8003364:	028b      	lsls	r3, r1, #10
 8003366:	4621      	mov	r1, r4
 8003368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800336c:	4621      	mov	r1, r4
 800336e:	028a      	lsls	r2, r1, #10
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003378:	2200      	movs	r2, #0
 800337a:	673b      	str	r3, [r7, #112]	@ 0x70
 800337c:	677a      	str	r2, [r7, #116]	@ 0x74
 800337e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003382:	f7fc ff3f 	bl	8000204 <__aeabi_uldivmod>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4613      	mov	r3, r2
 800338c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003390:	4b41      	ldr	r3, [pc, #260]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x354>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	0c1b      	lsrs	r3, r3, #16
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	3301      	adds	r3, #1
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80033a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033b2:	e0eb      	b.n	800358c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033b4:	4b38      	ldr	r3, [pc, #224]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x354>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033c0:	4b35      	ldr	r3, [pc, #212]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x354>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d06b      	beq.n	80034a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033cc:	4b32      	ldr	r3, [pc, #200]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x354>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	099b      	lsrs	r3, r3, #6
 80033d2:	2200      	movs	r2, #0
 80033d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033de:	663b      	str	r3, [r7, #96]	@ 0x60
 80033e0:	2300      	movs	r3, #0
 80033e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80033e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80033e8:	4622      	mov	r2, r4
 80033ea:	462b      	mov	r3, r5
 80033ec:	f04f 0000 	mov.w	r0, #0
 80033f0:	f04f 0100 	mov.w	r1, #0
 80033f4:	0159      	lsls	r1, r3, #5
 80033f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033fa:	0150      	lsls	r0, r2, #5
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	4621      	mov	r1, r4
 8003402:	1a51      	subs	r1, r2, r1
 8003404:	61b9      	str	r1, [r7, #24]
 8003406:	4629      	mov	r1, r5
 8003408:	eb63 0301 	sbc.w	r3, r3, r1
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800341a:	4659      	mov	r1, fp
 800341c:	018b      	lsls	r3, r1, #6
 800341e:	4651      	mov	r1, sl
 8003420:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003424:	4651      	mov	r1, sl
 8003426:	018a      	lsls	r2, r1, #6
 8003428:	4651      	mov	r1, sl
 800342a:	ebb2 0801 	subs.w	r8, r2, r1
 800342e:	4659      	mov	r1, fp
 8003430:	eb63 0901 	sbc.w	r9, r3, r1
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003440:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003444:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003448:	4690      	mov	r8, r2
 800344a:	4699      	mov	r9, r3
 800344c:	4623      	mov	r3, r4
 800344e:	eb18 0303 	adds.w	r3, r8, r3
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	462b      	mov	r3, r5
 8003456:	eb49 0303 	adc.w	r3, r9, r3
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003468:	4629      	mov	r1, r5
 800346a:	024b      	lsls	r3, r1, #9
 800346c:	4621      	mov	r1, r4
 800346e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003472:	4621      	mov	r1, r4
 8003474:	024a      	lsls	r2, r1, #9
 8003476:	4610      	mov	r0, r2
 8003478:	4619      	mov	r1, r3
 800347a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800347e:	2200      	movs	r2, #0
 8003480:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003482:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003484:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003488:	f7fc febc 	bl	8000204 <__aeabi_uldivmod>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4613      	mov	r3, r2
 8003492:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003496:	e065      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x420>
 8003498:	40023800 	.word	0x40023800
 800349c:	00f42400 	.word	0x00f42400
 80034a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a4:	4b3d      	ldr	r3, [pc, #244]	@ (800359c <HAL_RCC_GetSysClockFreq+0x458>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	099b      	lsrs	r3, r3, #6
 80034aa:	2200      	movs	r2, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	4611      	mov	r1, r2
 80034b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80034b6:	2300      	movs	r3, #0
 80034b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80034ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80034be:	4642      	mov	r2, r8
 80034c0:	464b      	mov	r3, r9
 80034c2:	f04f 0000 	mov.w	r0, #0
 80034c6:	f04f 0100 	mov.w	r1, #0
 80034ca:	0159      	lsls	r1, r3, #5
 80034cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034d0:	0150      	lsls	r0, r2, #5
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4641      	mov	r1, r8
 80034d8:	1a51      	subs	r1, r2, r1
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	4649      	mov	r1, r9
 80034de:	eb63 0301 	sbc.w	r3, r3, r1
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80034f0:	4659      	mov	r1, fp
 80034f2:	018b      	lsls	r3, r1, #6
 80034f4:	4651      	mov	r1, sl
 80034f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034fa:	4651      	mov	r1, sl
 80034fc:	018a      	lsls	r2, r1, #6
 80034fe:	4651      	mov	r1, sl
 8003500:	1a54      	subs	r4, r2, r1
 8003502:	4659      	mov	r1, fp
 8003504:	eb63 0501 	sbc.w	r5, r3, r1
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	00eb      	lsls	r3, r5, #3
 8003512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003516:	00e2      	lsls	r2, r4, #3
 8003518:	4614      	mov	r4, r2
 800351a:	461d      	mov	r5, r3
 800351c:	4643      	mov	r3, r8
 800351e:	18e3      	adds	r3, r4, r3
 8003520:	603b      	str	r3, [r7, #0]
 8003522:	464b      	mov	r3, r9
 8003524:	eb45 0303 	adc.w	r3, r5, r3
 8003528:	607b      	str	r3, [r7, #4]
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003536:	4629      	mov	r1, r5
 8003538:	028b      	lsls	r3, r1, #10
 800353a:	4621      	mov	r1, r4
 800353c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003540:	4621      	mov	r1, r4
 8003542:	028a      	lsls	r2, r1, #10
 8003544:	4610      	mov	r0, r2
 8003546:	4619      	mov	r1, r3
 8003548:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800354c:	2200      	movs	r2, #0
 800354e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003550:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003552:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003556:	f7fc fe55 	bl	8000204 <__aeabi_uldivmod>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4613      	mov	r3, r2
 8003560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003564:	4b0d      	ldr	r3, [pc, #52]	@ (800359c <HAL_RCC_GetSysClockFreq+0x458>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	0f1b      	lsrs	r3, r3, #28
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003572:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003576:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800357a:	fbb2 f3f3 	udiv	r3, r2, r3
 800357e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003582:	e003      	b.n	800358c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003584:	4b06      	ldr	r3, [pc, #24]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003586:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800358a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800358c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003590:	4618      	mov	r0, r3
 8003592:	37b8      	adds	r7, #184	@ 0xb8
 8003594:	46bd      	mov	sp, r7
 8003596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800
 80035a0:	00f42400 	.word	0x00f42400

080035a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e28d      	b.n	8003ad2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 8083 	beq.w	80036ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80035c4:	4b94      	ldr	r3, [pc, #592]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d019      	beq.n	8003604 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80035d0:	4b91      	ldr	r3, [pc, #580]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 030c 	and.w	r3, r3, #12
        || \
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d106      	bne.n	80035ea <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80035dc:	4b8e      	ldr	r3, [pc, #568]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035e8:	d00c      	beq.n	8003604 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ea:	4b8b      	ldr	r3, [pc, #556]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80035f2:	2b0c      	cmp	r3, #12
 80035f4:	d112      	bne.n	800361c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035f6:	4b88      	ldr	r3, [pc, #544]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003602:	d10b      	bne.n	800361c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003604:	4b84      	ldr	r3, [pc, #528]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d05b      	beq.n	80036c8 <HAL_RCC_OscConfig+0x124>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d157      	bne.n	80036c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e25a      	b.n	8003ad2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003624:	d106      	bne.n	8003634 <HAL_RCC_OscConfig+0x90>
 8003626:	4b7c      	ldr	r3, [pc, #496]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a7b      	ldr	r2, [pc, #492]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 800362c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	e01d      	b.n	8003670 <HAL_RCC_OscConfig+0xcc>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800363c:	d10c      	bne.n	8003658 <HAL_RCC_OscConfig+0xb4>
 800363e:	4b76      	ldr	r3, [pc, #472]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a75      	ldr	r2, [pc, #468]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 8003644:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	4b73      	ldr	r3, [pc, #460]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a72      	ldr	r2, [pc, #456]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 8003650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	e00b      	b.n	8003670 <HAL_RCC_OscConfig+0xcc>
 8003658:	4b6f      	ldr	r3, [pc, #444]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a6e      	ldr	r2, [pc, #440]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 800365e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	4b6c      	ldr	r3, [pc, #432]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a6b      	ldr	r2, [pc, #428]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 800366a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800366e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d013      	beq.n	80036a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fd fad0 	bl	8000c1c <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003680:	f7fd facc 	bl	8000c1c <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b64      	cmp	r3, #100	@ 0x64
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e21f      	b.n	8003ad2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003692:	4b61      	ldr	r3, [pc, #388]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0xdc>
 800369e:	e014      	b.n	80036ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fd fabc 	bl	8000c1c <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a8:	f7fd fab8 	bl	8000c1c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	@ 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e20b      	b.n	8003ad2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ba:	4b57      	ldr	r3, [pc, #348]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x104>
 80036c6:	e000      	b.n	80036ca <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d06f      	beq.n	80037b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80036d6:	4b50      	ldr	r3, [pc, #320]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d017      	beq.n	8003712 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80036e2:	4b4d      	ldr	r3, [pc, #308]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
        || \
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d105      	bne.n	80036fa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80036ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00b      	beq.n	8003712 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036fa:	4b47      	ldr	r3, [pc, #284]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003702:	2b0c      	cmp	r3, #12
 8003704:	d11c      	bne.n	8003740 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003706:	4b44      	ldr	r3, [pc, #272]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d116      	bne.n	8003740 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003712:	4b41      	ldr	r3, [pc, #260]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <HAL_RCC_OscConfig+0x186>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d001      	beq.n	800372a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e1d3      	b.n	8003ad2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372a:	4b3b      	ldr	r3, [pc, #236]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4937      	ldr	r1, [pc, #220]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 800373a:	4313      	orrs	r3, r2
 800373c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373e:	e03a      	b.n	80037b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d020      	beq.n	800378a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003748:	4b34      	ldr	r3, [pc, #208]	@ (800381c <HAL_RCC_OscConfig+0x278>)
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374e:	f7fd fa65 	bl	8000c1c <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003756:	f7fd fa61 	bl	8000c1c <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e1b4      	b.n	8003ad2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003768:	4b2b      	ldr	r3, [pc, #172]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003774:	4b28      	ldr	r3, [pc, #160]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4925      	ldr	r1, [pc, #148]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 8003784:	4313      	orrs	r3, r2
 8003786:	600b      	str	r3, [r1, #0]
 8003788:	e015      	b.n	80037b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800378a:	4b24      	ldr	r3, [pc, #144]	@ (800381c <HAL_RCC_OscConfig+0x278>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fd fa44 	bl	8000c1c <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003798:	f7fd fa40 	bl	8000c1c <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e193      	b.n	8003ad2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d036      	beq.n	8003830 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d016      	beq.n	80037f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ca:	4b15      	ldr	r3, [pc, #84]	@ (8003820 <HAL_RCC_OscConfig+0x27c>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d0:	f7fd fa24 	bl	8000c1c <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d8:	f7fd fa20 	bl	8000c1c <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e173      	b.n	8003ad2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003818 <HAL_RCC_OscConfig+0x274>)
 80037ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0x234>
 80037f6:	e01b      	b.n	8003830 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f8:	4b09      	ldr	r3, [pc, #36]	@ (8003820 <HAL_RCC_OscConfig+0x27c>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fe:	f7fd fa0d 	bl	8000c1c <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003804:	e00e      	b.n	8003824 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003806:	f7fd fa09 	bl	8000c1c <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d907      	bls.n	8003824 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e15c      	b.n	8003ad2 <HAL_RCC_OscConfig+0x52e>
 8003818:	40023800 	.word	0x40023800
 800381c:	42470000 	.word	0x42470000
 8003820:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	4b8a      	ldr	r3, [pc, #552]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 8003826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1ea      	bne.n	8003806 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 8097 	beq.w	800396c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383e:	2300      	movs	r3, #0
 8003840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003842:	4b83      	ldr	r3, [pc, #524]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10f      	bne.n	800386e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	4b7f      	ldr	r3, [pc, #508]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003856:	4a7e      	ldr	r2, [pc, #504]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 8003858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800385c:	6413      	str	r3, [r2, #64]	@ 0x40
 800385e:	4b7c      	ldr	r3, [pc, #496]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800386a:	2301      	movs	r3, #1
 800386c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386e:	4b79      	ldr	r3, [pc, #484]	@ (8003a54 <HAL_RCC_OscConfig+0x4b0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003876:	2b00      	cmp	r3, #0
 8003878:	d118      	bne.n	80038ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800387a:	4b76      	ldr	r3, [pc, #472]	@ (8003a54 <HAL_RCC_OscConfig+0x4b0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a75      	ldr	r2, [pc, #468]	@ (8003a54 <HAL_RCC_OscConfig+0x4b0>)
 8003880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003886:	f7fd f9c9 	bl	8000c1c <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388e:	f7fd f9c5 	bl	8000c1c <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e118      	b.n	8003ad2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003a54 <HAL_RCC_OscConfig+0x4b0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d106      	bne.n	80038c2 <HAL_RCC_OscConfig+0x31e>
 80038b4:	4b66      	ldr	r3, [pc, #408]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 80038b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b8:	4a65      	ldr	r2, [pc, #404]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	6713      	str	r3, [r2, #112]	@ 0x70
 80038c0:	e01c      	b.n	80038fc <HAL_RCC_OscConfig+0x358>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b05      	cmp	r3, #5
 80038c8:	d10c      	bne.n	80038e4 <HAL_RCC_OscConfig+0x340>
 80038ca:	4b61      	ldr	r3, [pc, #388]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ce:	4a60      	ldr	r2, [pc, #384]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 80038d0:	f043 0304 	orr.w	r3, r3, #4
 80038d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80038d6:	4b5e      	ldr	r3, [pc, #376]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038da:	4a5d      	ldr	r2, [pc, #372]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80038e2:	e00b      	b.n	80038fc <HAL_RCC_OscConfig+0x358>
 80038e4:	4b5a      	ldr	r3, [pc, #360]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e8:	4a59      	ldr	r2, [pc, #356]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80038f0:	4b57      	ldr	r3, [pc, #348]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f4:	4a56      	ldr	r2, [pc, #344]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 80038f6:	f023 0304 	bic.w	r3, r3, #4
 80038fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d015      	beq.n	8003930 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003904:	f7fd f98a 	bl	8000c1c <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390a:	e00a      	b.n	8003922 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390c:	f7fd f986 	bl	8000c1c <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e0d7      	b.n	8003ad2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003922:	4b4b      	ldr	r3, [pc, #300]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0ee      	beq.n	800390c <HAL_RCC_OscConfig+0x368>
 800392e:	e014      	b.n	800395a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7fd f974 	bl	8000c1c <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003936:	e00a      	b.n	800394e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003938:	f7fd f970 	bl	8000c1c <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e0c1      	b.n	8003ad2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800394e:	4b40      	ldr	r3, [pc, #256]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1ee      	bne.n	8003938 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800395a:	7dfb      	ldrb	r3, [r7, #23]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d105      	bne.n	800396c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003960:	4b3b      	ldr	r3, [pc, #236]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	4a3a      	ldr	r2, [pc, #232]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 8003966:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800396a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80ad 	beq.w	8003ad0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003976:	4b36      	ldr	r3, [pc, #216]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b08      	cmp	r3, #8
 8003980:	d060      	beq.n	8003a44 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d145      	bne.n	8003a16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398a:	4b33      	ldr	r3, [pc, #204]	@ (8003a58 <HAL_RCC_OscConfig+0x4b4>)
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7fd f944 	bl	8000c1c <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003998:	f7fd f940 	bl	8000c1c <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e093      	b.n	8003ad2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039aa:	4b29      	ldr	r3, [pc, #164]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69da      	ldr	r2, [r3, #28]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c4:	019b      	lsls	r3, r3, #6
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039cc:	085b      	lsrs	r3, r3, #1
 80039ce:	3b01      	subs	r3, #1
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d8:	061b      	lsls	r3, r3, #24
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e0:	071b      	lsls	r3, r3, #28
 80039e2:	491b      	ldr	r1, [pc, #108]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a58 <HAL_RCC_OscConfig+0x4b4>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ee:	f7fd f915 	bl	8000c1c <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f6:	f7fd f911 	bl	8000c1c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e064      	b.n	8003ad2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a08:	4b11      	ldr	r3, [pc, #68]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0f0      	beq.n	80039f6 <HAL_RCC_OscConfig+0x452>
 8003a14:	e05c      	b.n	8003ad0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a16:	4b10      	ldr	r3, [pc, #64]	@ (8003a58 <HAL_RCC_OscConfig+0x4b4>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fd f8fe 	bl	8000c1c <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a24:	f7fd f8fa 	bl	8000c1c <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e04d      	b.n	8003ad2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a36:	4b06      	ldr	r3, [pc, #24]	@ (8003a50 <HAL_RCC_OscConfig+0x4ac>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x480>
 8003a42:	e045      	b.n	8003ad0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d107      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e040      	b.n	8003ad2 <HAL_RCC_OscConfig+0x52e>
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40007000 	.word	0x40007000
 8003a58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003adc <HAL_RCC_OscConfig+0x538>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d030      	beq.n	8003acc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d129      	bne.n	8003acc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d122      	bne.n	8003acc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d119      	bne.n	8003acc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d10f      	bne.n	8003acc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d107      	bne.n	8003acc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40023800 	.word	0x40023800

08003ae0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e042      	b.n	8003b78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fc ff28 	bl	800095c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2224      	movs	r2, #36	@ 0x24
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 fd69 	bl	80045fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08a      	sub	sp, #40	@ 0x28
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d175      	bne.n	8003c8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <HAL_UART_Transmit+0x2c>
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e06e      	b.n	8003c8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2221      	movs	r2, #33	@ 0x21
 8003bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bbe:	f7fd f82d 	bl	8000c1c <HAL_GetTick>
 8003bc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	88fa      	ldrh	r2, [r7, #6]
 8003bc8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	88fa      	ldrh	r2, [r7, #6]
 8003bce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bd8:	d108      	bne.n	8003bec <HAL_UART_Transmit+0x6c>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d104      	bne.n	8003bec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	e003      	b.n	8003bf4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bf4:	e02e      	b.n	8003c54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2180      	movs	r1, #128	@ 0x80
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 fb05 	bl	8004210 <UART_WaitOnFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e03a      	b.n	8003c8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10b      	bne.n	8003c36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	3302      	adds	r3, #2
 8003c32:	61bb      	str	r3, [r7, #24]
 8003c34:	e007      	b.n	8003c46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	781a      	ldrb	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	3301      	adds	r3, #1
 8003c44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1cb      	bne.n	8003bf6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2200      	movs	r2, #0
 8003c66:	2140      	movs	r1, #64	@ 0x40
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 fad1 	bl	8004210 <UART_WaitOnFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e006      	b.n	8003c8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	e000      	b.n	8003c8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c8c:	2302      	movs	r3, #2
  }
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3720      	adds	r7, #32
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b0ba      	sub	sp, #232	@ 0xe8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003cd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10f      	bne.n	8003cfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d009      	beq.n	8003cfe <HAL_UART_IRQHandler+0x66>
 8003cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fbc2 	bl	8004480 <UART_Receive_IT>
      return;
 8003cfc:	e25b      	b.n	80041b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003cfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 80de 	beq.w	8003ec4 <HAL_UART_IRQHandler+0x22c>
 8003d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d18:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80d1 	beq.w	8003ec4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00b      	beq.n	8003d46 <HAL_UART_IRQHandler+0xae>
 8003d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3e:	f043 0201 	orr.w	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <HAL_UART_IRQHandler+0xd2>
 8003d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d62:	f043 0202 	orr.w	r2, r3, #2
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <HAL_UART_IRQHandler+0xf6>
 8003d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d86:	f043 0204 	orr.w	r2, r3, #4
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d011      	beq.n	8003dbe <HAL_UART_IRQHandler+0x126>
 8003d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d105      	bne.n	8003db2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d005      	beq.n	8003dbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db6:	f043 0208 	orr.w	r2, r3, #8
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 81f2 	beq.w	80041ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_UART_IRQHandler+0x14e>
 8003dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fb4d 	bl	8004480 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df0:	2b40      	cmp	r3, #64	@ 0x40
 8003df2:	bf0c      	ite	eq
 8003df4:	2301      	moveq	r3, #1
 8003df6:	2300      	movne	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d103      	bne.n	8003e12 <HAL_UART_IRQHandler+0x17a>
 8003e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d04f      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fa55 	bl	80042c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e22:	2b40      	cmp	r3, #64	@ 0x40
 8003e24:	d141      	bne.n	8003eaa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3314      	adds	r3, #20
 8003e2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3314      	adds	r3, #20
 8003e4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1d9      	bne.n	8003e26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d013      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7e:	4a7e      	ldr	r2, [pc, #504]	@ (8004078 <HAL_UART_IRQHandler+0x3e0>)
 8003e80:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fd f879 	bl	8000f7e <HAL_DMA_Abort_IT>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d016      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea0:	e00e      	b.n	8003ec0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f99e 	bl	80041e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea8:	e00a      	b.n	8003ec0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f99a 	bl	80041e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb0:	e006      	b.n	8003ec0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f996 	bl	80041e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003ebe:	e175      	b.n	80041ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec0:	bf00      	nop
    return;
 8003ec2:	e173      	b.n	80041ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	f040 814f 	bne.w	800416c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 8148 	beq.w	800416c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8141 	beq.w	800416c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eea:	2300      	movs	r3, #0
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0a:	2b40      	cmp	r3, #64	@ 0x40
 8003f0c:	f040 80b6 	bne.w	800407c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8145 	beq.w	80041b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	f080 813e 	bcs.w	80041b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f46:	f000 8088 	beq.w	800405a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	330c      	adds	r3, #12
 8003f50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	330c      	adds	r3, #12
 8003f72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003f76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1d9      	bne.n	8003f4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3314      	adds	r3, #20
 8003f9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fa0:	e853 3f00 	ldrex	r3, [r3]
 8003fa4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003fa6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fa8:	f023 0301 	bic.w	r3, r3, #1
 8003fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3314      	adds	r3, #20
 8003fb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003fbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003fc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003fcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e1      	bne.n	8003f96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3314      	adds	r3, #20
 8003fd8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fdc:	e853 3f00 	ldrex	r3, [r3]
 8003fe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003fe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fe4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3314      	adds	r3, #20
 8003ff2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003ff6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ff8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ffc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ffe:	e841 2300 	strex	r3, r2, [r1]
 8004002:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004004:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1e3      	bne.n	8003fd2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	330c      	adds	r3, #12
 800401e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004028:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800402a:	f023 0310 	bic.w	r3, r3, #16
 800402e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	330c      	adds	r3, #12
 8004038:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800403c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800403e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004042:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800404a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e3      	bne.n	8004018 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004054:	4618      	mov	r0, r3
 8004056:	f7fc ff22 	bl	8000e9e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2202      	movs	r2, #2
 800405e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004068:	b29b      	uxth	r3, r3
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	b29b      	uxth	r3, r3
 800406e:	4619      	mov	r1, r3
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f8c1 	bl	80041f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004076:	e09b      	b.n	80041b0 <HAL_UART_IRQHandler+0x518>
 8004078:	08004389 	.word	0x08004389
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004084:	b29b      	uxth	r3, r3
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 808e 	beq.w	80041b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004098:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 8089 	beq.w	80041b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	330c      	adds	r3, #12
 80040a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	330c      	adds	r3, #12
 80040c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80040c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80040c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e3      	bne.n	80040a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3314      	adds	r3, #20
 80040e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	623b      	str	r3, [r7, #32]
   return(result);
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3314      	adds	r3, #20
 80040fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80040fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8004100:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004102:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800410c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e3      	bne.n	80040da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	330c      	adds	r3, #12
 8004126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0310 	bic.w	r3, r3, #16
 8004136:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	330c      	adds	r3, #12
 8004140:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004144:	61fa      	str	r2, [r7, #28]
 8004146:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004148:	69b9      	ldr	r1, [r7, #24]
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	e841 2300 	strex	r3, r2, [r1]
 8004150:	617b      	str	r3, [r7, #20]
   return(result);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1e3      	bne.n	8004120 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800415e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004162:	4619      	mov	r1, r3
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f847 	bl	80041f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800416a:	e023      	b.n	80041b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800416c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004174:	2b00      	cmp	r3, #0
 8004176:	d009      	beq.n	800418c <HAL_UART_IRQHandler+0x4f4>
 8004178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800417c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f913 	bl	80043b0 <UART_Transmit_IT>
    return;
 800418a:	e014      	b.n	80041b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800418c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00e      	beq.n	80041b6 <HAL_UART_IRQHandler+0x51e>
 8004198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800419c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d008      	beq.n	80041b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f953 	bl	8004450 <UART_EndTransmit_IT>
    return;
 80041aa:	e004      	b.n	80041b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80041ac:	bf00      	nop
 80041ae:	e002      	b.n	80041b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80041b0:	bf00      	nop
 80041b2:	e000      	b.n	80041b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80041b4:	bf00      	nop
  }
}
 80041b6:	37e8      	adds	r7, #232	@ 0xe8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004220:	e03b      	b.n	800429a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d037      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422a:	f7fc fcf7 	bl	8000c1c <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	6a3a      	ldr	r2, [r7, #32]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <UART_WaitOnFlagUntilTimeout+0x30>
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e03a      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d023      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b80      	cmp	r3, #128	@ 0x80
 8004256:	d020      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b40      	cmp	r3, #64	@ 0x40
 800425c:	d01d      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b08      	cmp	r3, #8
 800426a:	d116      	bne.n	800429a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f81d 	bl	80042c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2208      	movs	r2, #8
 800428c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e00f      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4013      	ands	r3, r2
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	bf0c      	ite	eq
 80042aa:	2301      	moveq	r3, #1
 80042ac:	2300      	movne	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	461a      	mov	r2, r3
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d0b4      	beq.n	8004222 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b095      	sub	sp, #84	@ 0x54
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	330c      	adds	r3, #12
 80042d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d4:	e853 3f00 	ldrex	r3, [r3]
 80042d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	330c      	adds	r3, #12
 80042e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80042ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e5      	bne.n	80042ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3314      	adds	r3, #20
 8004304:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	e853 3f00 	ldrex	r3, [r3]
 800430c:	61fb      	str	r3, [r7, #28]
   return(result);
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	f023 0301 	bic.w	r3, r3, #1
 8004314:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3314      	adds	r3, #20
 800431c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800431e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004320:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004324:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004326:	e841 2300 	strex	r3, r2, [r1]
 800432a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e5      	bne.n	80042fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004336:	2b01      	cmp	r3, #1
 8004338:	d119      	bne.n	800436e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	330c      	adds	r3, #12
 8004340:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	e853 3f00 	ldrex	r3, [r3]
 8004348:	60bb      	str	r3, [r7, #8]
   return(result);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f023 0310 	bic.w	r3, r3, #16
 8004350:	647b      	str	r3, [r7, #68]	@ 0x44
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	330c      	adds	r3, #12
 8004358:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800435a:	61ba      	str	r2, [r7, #24]
 800435c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	6979      	ldr	r1, [r7, #20]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	613b      	str	r3, [r7, #16]
   return(result);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e5      	bne.n	800433a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800437c:	bf00      	nop
 800437e:	3754      	adds	r7, #84	@ 0x54
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004394:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7ff ff1e 	bl	80041e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b21      	cmp	r3, #33	@ 0x21
 80043c2:	d13e      	bne.n	8004442 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043cc:	d114      	bne.n	80043f8 <UART_Transmit_IT+0x48>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d110      	bne.n	80043f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	1c9a      	adds	r2, r3, #2
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	621a      	str	r2, [r3, #32]
 80043f6:	e008      	b.n	800440a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	1c59      	adds	r1, r3, #1
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6211      	str	r1, [r2, #32]
 8004402:	781a      	ldrb	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29b      	uxth	r3, r3
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	4619      	mov	r1, r3
 8004418:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10f      	bne.n	800443e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800442c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800443c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	e000      	b.n	8004444 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004442:	2302      	movs	r3, #2
  }
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004466:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff fea3 	bl	80041bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08c      	sub	sp, #48	@ 0x30
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b22      	cmp	r3, #34	@ 0x22
 8004492:	f040 80ae 	bne.w	80045f2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800449e:	d117      	bne.n	80044d0 <UART_Receive_IT+0x50>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d113      	bne.n	80044d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044be:	b29a      	uxth	r2, r3
 80044c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c8:	1c9a      	adds	r2, r3, #2
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80044ce:	e026      	b.n	800451e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044e2:	d007      	beq.n	80044f4 <UART_Receive_IT+0x74>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10a      	bne.n	8004502 <UART_Receive_IT+0x82>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	e008      	b.n	8004514 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800450e:	b2da      	uxtb	r2, r3
 8004510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004512:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29b      	uxth	r3, r3
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	4619      	mov	r1, r3
 800452c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800452e:	2b00      	cmp	r3, #0
 8004530:	d15d      	bne.n	80045ee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0220 	bic.w	r2, r2, #32
 8004540:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004550:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0201 	bic.w	r2, r2, #1
 8004560:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004574:	2b01      	cmp	r3, #1
 8004576:	d135      	bne.n	80045e4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	330c      	adds	r3, #12
 8004584:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	e853 3f00 	ldrex	r3, [r3]
 800458c:	613b      	str	r3, [r7, #16]
   return(result);
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f023 0310 	bic.w	r3, r3, #16
 8004594:	627b      	str	r3, [r7, #36]	@ 0x24
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	330c      	adds	r3, #12
 800459c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800459e:	623a      	str	r2, [r7, #32]
 80045a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	69f9      	ldr	r1, [r7, #28]
 80045a4:	6a3a      	ldr	r2, [r7, #32]
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e5      	bne.n	800457e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	2b10      	cmp	r3, #16
 80045be:	d10a      	bne.n	80045d6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045da:	4619      	mov	r1, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7ff fe0b 	bl	80041f8 <HAL_UARTEx_RxEventCallback>
 80045e2:	e002      	b.n	80045ea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff fdf3 	bl	80041d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	e002      	b.n	80045f4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	e000      	b.n	80045f4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045f2:	2302      	movs	r3, #2
  }
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3730      	adds	r7, #48	@ 0x30
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004600:	b0c0      	sub	sp, #256	@ 0x100
 8004602:	af00      	add	r7, sp, #0
 8004604:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004618:	68d9      	ldr	r1, [r3, #12]
 800461a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	ea40 0301 	orr.w	r3, r0, r1
 8004624:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	431a      	orrs	r2, r3
 8004634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	431a      	orrs	r2, r3
 800463c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004654:	f021 010c 	bic.w	r1, r1, #12
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004662:	430b      	orrs	r3, r1
 8004664:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004676:	6999      	ldr	r1, [r3, #24]
 8004678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	ea40 0301 	orr.w	r3, r0, r1
 8004682:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	4b8f      	ldr	r3, [pc, #572]	@ (80048c8 <UART_SetConfig+0x2cc>)
 800468c:	429a      	cmp	r2, r3
 800468e:	d005      	beq.n	800469c <UART_SetConfig+0xa0>
 8004690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	4b8d      	ldr	r3, [pc, #564]	@ (80048cc <UART_SetConfig+0x2d0>)
 8004698:	429a      	cmp	r2, r3
 800469a:	d104      	bne.n	80046a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800469c:	f7fe fa14 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
 80046a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80046a4:	e003      	b.n	80046ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046a6:	f7fe f9fb 	bl	8002aa0 <HAL_RCC_GetPCLK1Freq>
 80046aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046b8:	f040 810c 	bne.w	80048d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046c0:	2200      	movs	r2, #0
 80046c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80046c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80046ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80046ce:	4622      	mov	r2, r4
 80046d0:	462b      	mov	r3, r5
 80046d2:	1891      	adds	r1, r2, r2
 80046d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80046d6:	415b      	adcs	r3, r3
 80046d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046de:	4621      	mov	r1, r4
 80046e0:	eb12 0801 	adds.w	r8, r2, r1
 80046e4:	4629      	mov	r1, r5
 80046e6:	eb43 0901 	adc.w	r9, r3, r1
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046fe:	4690      	mov	r8, r2
 8004700:	4699      	mov	r9, r3
 8004702:	4623      	mov	r3, r4
 8004704:	eb18 0303 	adds.w	r3, r8, r3
 8004708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800470c:	462b      	mov	r3, r5
 800470e:	eb49 0303 	adc.w	r3, r9, r3
 8004712:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004722:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004726:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800472a:	460b      	mov	r3, r1
 800472c:	18db      	adds	r3, r3, r3
 800472e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004730:	4613      	mov	r3, r2
 8004732:	eb42 0303 	adc.w	r3, r2, r3
 8004736:	657b      	str	r3, [r7, #84]	@ 0x54
 8004738:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800473c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004740:	f7fb fd60 	bl	8000204 <__aeabi_uldivmod>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4b61      	ldr	r3, [pc, #388]	@ (80048d0 <UART_SetConfig+0x2d4>)
 800474a:	fba3 2302 	umull	r2, r3, r3, r2
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	011c      	lsls	r4, r3, #4
 8004752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004756:	2200      	movs	r2, #0
 8004758:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800475c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004760:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004764:	4642      	mov	r2, r8
 8004766:	464b      	mov	r3, r9
 8004768:	1891      	adds	r1, r2, r2
 800476a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800476c:	415b      	adcs	r3, r3
 800476e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004770:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004774:	4641      	mov	r1, r8
 8004776:	eb12 0a01 	adds.w	sl, r2, r1
 800477a:	4649      	mov	r1, r9
 800477c:	eb43 0b01 	adc.w	fp, r3, r1
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800478c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004794:	4692      	mov	sl, r2
 8004796:	469b      	mov	fp, r3
 8004798:	4643      	mov	r3, r8
 800479a:	eb1a 0303 	adds.w	r3, sl, r3
 800479e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047a2:	464b      	mov	r3, r9
 80047a4:	eb4b 0303 	adc.w	r3, fp, r3
 80047a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80047bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80047c0:	460b      	mov	r3, r1
 80047c2:	18db      	adds	r3, r3, r3
 80047c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80047c6:	4613      	mov	r3, r2
 80047c8:	eb42 0303 	adc.w	r3, r2, r3
 80047cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80047ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80047d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80047d6:	f7fb fd15 	bl	8000204 <__aeabi_uldivmod>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4611      	mov	r1, r2
 80047e0:	4b3b      	ldr	r3, [pc, #236]	@ (80048d0 <UART_SetConfig+0x2d4>)
 80047e2:	fba3 2301 	umull	r2, r3, r3, r1
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	2264      	movs	r2, #100	@ 0x64
 80047ea:	fb02 f303 	mul.w	r3, r2, r3
 80047ee:	1acb      	subs	r3, r1, r3
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80047f6:	4b36      	ldr	r3, [pc, #216]	@ (80048d0 <UART_SetConfig+0x2d4>)
 80047f8:	fba3 2302 	umull	r2, r3, r3, r2
 80047fc:	095b      	lsrs	r3, r3, #5
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004804:	441c      	add	r4, r3
 8004806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800480a:	2200      	movs	r2, #0
 800480c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004810:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004814:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004818:	4642      	mov	r2, r8
 800481a:	464b      	mov	r3, r9
 800481c:	1891      	adds	r1, r2, r2
 800481e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004820:	415b      	adcs	r3, r3
 8004822:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004824:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004828:	4641      	mov	r1, r8
 800482a:	1851      	adds	r1, r2, r1
 800482c:	6339      	str	r1, [r7, #48]	@ 0x30
 800482e:	4649      	mov	r1, r9
 8004830:	414b      	adcs	r3, r1
 8004832:	637b      	str	r3, [r7, #52]	@ 0x34
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004840:	4659      	mov	r1, fp
 8004842:	00cb      	lsls	r3, r1, #3
 8004844:	4651      	mov	r1, sl
 8004846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800484a:	4651      	mov	r1, sl
 800484c:	00ca      	lsls	r2, r1, #3
 800484e:	4610      	mov	r0, r2
 8004850:	4619      	mov	r1, r3
 8004852:	4603      	mov	r3, r0
 8004854:	4642      	mov	r2, r8
 8004856:	189b      	adds	r3, r3, r2
 8004858:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800485c:	464b      	mov	r3, r9
 800485e:	460a      	mov	r2, r1
 8004860:	eb42 0303 	adc.w	r3, r2, r3
 8004864:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004874:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004878:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800487c:	460b      	mov	r3, r1
 800487e:	18db      	adds	r3, r3, r3
 8004880:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004882:	4613      	mov	r3, r2
 8004884:	eb42 0303 	adc.w	r3, r2, r3
 8004888:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800488a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800488e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004892:	f7fb fcb7 	bl	8000204 <__aeabi_uldivmod>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4b0d      	ldr	r3, [pc, #52]	@ (80048d0 <UART_SetConfig+0x2d4>)
 800489c:	fba3 1302 	umull	r1, r3, r3, r2
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	2164      	movs	r1, #100	@ 0x64
 80048a4:	fb01 f303 	mul.w	r3, r1, r3
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	3332      	adds	r3, #50	@ 0x32
 80048ae:	4a08      	ldr	r2, [pc, #32]	@ (80048d0 <UART_SetConfig+0x2d4>)
 80048b0:	fba2 2303 	umull	r2, r3, r2, r3
 80048b4:	095b      	lsrs	r3, r3, #5
 80048b6:	f003 0207 	and.w	r2, r3, #7
 80048ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4422      	add	r2, r4
 80048c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048c4:	e106      	b.n	8004ad4 <UART_SetConfig+0x4d8>
 80048c6:	bf00      	nop
 80048c8:	40011000 	.word	0x40011000
 80048cc:	40011400 	.word	0x40011400
 80048d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048d8:	2200      	movs	r2, #0
 80048da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80048e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80048e6:	4642      	mov	r2, r8
 80048e8:	464b      	mov	r3, r9
 80048ea:	1891      	adds	r1, r2, r2
 80048ec:	6239      	str	r1, [r7, #32]
 80048ee:	415b      	adcs	r3, r3
 80048f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048f6:	4641      	mov	r1, r8
 80048f8:	1854      	adds	r4, r2, r1
 80048fa:	4649      	mov	r1, r9
 80048fc:	eb43 0501 	adc.w	r5, r3, r1
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	00eb      	lsls	r3, r5, #3
 800490a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800490e:	00e2      	lsls	r2, r4, #3
 8004910:	4614      	mov	r4, r2
 8004912:	461d      	mov	r5, r3
 8004914:	4643      	mov	r3, r8
 8004916:	18e3      	adds	r3, r4, r3
 8004918:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800491c:	464b      	mov	r3, r9
 800491e:	eb45 0303 	adc.w	r3, r5, r3
 8004922:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004932:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004942:	4629      	mov	r1, r5
 8004944:	008b      	lsls	r3, r1, #2
 8004946:	4621      	mov	r1, r4
 8004948:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800494c:	4621      	mov	r1, r4
 800494e:	008a      	lsls	r2, r1, #2
 8004950:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004954:	f7fb fc56 	bl	8000204 <__aeabi_uldivmod>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	4b60      	ldr	r3, [pc, #384]	@ (8004ae0 <UART_SetConfig+0x4e4>)
 800495e:	fba3 2302 	umull	r2, r3, r3, r2
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	011c      	lsls	r4, r3, #4
 8004966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800496a:	2200      	movs	r2, #0
 800496c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004970:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004974:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004978:	4642      	mov	r2, r8
 800497a:	464b      	mov	r3, r9
 800497c:	1891      	adds	r1, r2, r2
 800497e:	61b9      	str	r1, [r7, #24]
 8004980:	415b      	adcs	r3, r3
 8004982:	61fb      	str	r3, [r7, #28]
 8004984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004988:	4641      	mov	r1, r8
 800498a:	1851      	adds	r1, r2, r1
 800498c:	6139      	str	r1, [r7, #16]
 800498e:	4649      	mov	r1, r9
 8004990:	414b      	adcs	r3, r1
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049a0:	4659      	mov	r1, fp
 80049a2:	00cb      	lsls	r3, r1, #3
 80049a4:	4651      	mov	r1, sl
 80049a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049aa:	4651      	mov	r1, sl
 80049ac:	00ca      	lsls	r2, r1, #3
 80049ae:	4610      	mov	r0, r2
 80049b0:	4619      	mov	r1, r3
 80049b2:	4603      	mov	r3, r0
 80049b4:	4642      	mov	r2, r8
 80049b6:	189b      	adds	r3, r3, r2
 80049b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049bc:	464b      	mov	r3, r9
 80049be:	460a      	mov	r2, r1
 80049c0:	eb42 0303 	adc.w	r3, r2, r3
 80049c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80049e0:	4649      	mov	r1, r9
 80049e2:	008b      	lsls	r3, r1, #2
 80049e4:	4641      	mov	r1, r8
 80049e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ea:	4641      	mov	r1, r8
 80049ec:	008a      	lsls	r2, r1, #2
 80049ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80049f2:	f7fb fc07 	bl	8000204 <__aeabi_uldivmod>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4611      	mov	r1, r2
 80049fc:	4b38      	ldr	r3, [pc, #224]	@ (8004ae0 <UART_SetConfig+0x4e4>)
 80049fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	2264      	movs	r2, #100	@ 0x64
 8004a06:	fb02 f303 	mul.w	r3, r2, r3
 8004a0a:	1acb      	subs	r3, r1, r3
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	3332      	adds	r3, #50	@ 0x32
 8004a10:	4a33      	ldr	r2, [pc, #204]	@ (8004ae0 <UART_SetConfig+0x4e4>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a1c:	441c      	add	r4, r3
 8004a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a22:	2200      	movs	r2, #0
 8004a24:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a26:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004a2c:	4642      	mov	r2, r8
 8004a2e:	464b      	mov	r3, r9
 8004a30:	1891      	adds	r1, r2, r2
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	415b      	adcs	r3, r3
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a3c:	4641      	mov	r1, r8
 8004a3e:	1851      	adds	r1, r2, r1
 8004a40:	6039      	str	r1, [r7, #0]
 8004a42:	4649      	mov	r1, r9
 8004a44:	414b      	adcs	r3, r1
 8004a46:	607b      	str	r3, [r7, #4]
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a54:	4659      	mov	r1, fp
 8004a56:	00cb      	lsls	r3, r1, #3
 8004a58:	4651      	mov	r1, sl
 8004a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a5e:	4651      	mov	r1, sl
 8004a60:	00ca      	lsls	r2, r1, #3
 8004a62:	4610      	mov	r0, r2
 8004a64:	4619      	mov	r1, r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	4642      	mov	r2, r8
 8004a6a:	189b      	adds	r3, r3, r2
 8004a6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a6e:	464b      	mov	r3, r9
 8004a70:	460a      	mov	r2, r1
 8004a72:	eb42 0303 	adc.w	r3, r2, r3
 8004a76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a82:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a90:	4649      	mov	r1, r9
 8004a92:	008b      	lsls	r3, r1, #2
 8004a94:	4641      	mov	r1, r8
 8004a96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a9a:	4641      	mov	r1, r8
 8004a9c:	008a      	lsls	r2, r1, #2
 8004a9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004aa2:	f7fb fbaf 	bl	8000204 <__aeabi_uldivmod>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae0 <UART_SetConfig+0x4e4>)
 8004aac:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab0:	095b      	lsrs	r3, r3, #5
 8004ab2:	2164      	movs	r1, #100	@ 0x64
 8004ab4:	fb01 f303 	mul.w	r3, r1, r3
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	3332      	adds	r3, #50	@ 0x32
 8004abe:	4a08      	ldr	r2, [pc, #32]	@ (8004ae0 <UART_SetConfig+0x4e4>)
 8004ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac4:	095b      	lsrs	r3, r3, #5
 8004ac6:	f003 020f 	and.w	r2, r3, #15
 8004aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4422      	add	r2, r4
 8004ad2:	609a      	str	r2, [r3, #8]
}
 8004ad4:	bf00      	nop
 8004ad6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ada:	46bd      	mov	sp, r7
 8004adc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ae0:	51eb851f 	.word	0x51eb851f

08004ae4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	f107 001c 	add.w	r0, r7, #28
 8004af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004af6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d123      	bne.n	8004b46 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004b12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d105      	bne.n	8004b3a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f001 fae2 	bl	8006104 <USB_CoreReset>
 8004b40:	4603      	mov	r3, r0
 8004b42:	73fb      	strb	r3, [r7, #15]
 8004b44:	e01b      	b.n	8004b7e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f001 fad6 	bl	8006104 <USB_CoreReset>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b5c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d106      	bne.n	8004b72 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b70:	e005      	b.n	8004b7e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b76:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b7e:	7fbb      	ldrb	r3, [r7, #30]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d10b      	bne.n	8004b9c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f043 0206 	orr.w	r2, r3, #6
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f043 0220 	orr.w	r2, r3, #32
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ba8:	b004      	add	sp, #16
 8004baa:	4770      	bx	lr

08004bac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d165      	bne.n	8004c8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4a41      	ldr	r2, [pc, #260]	@ (8004cc8 <USB_SetTurnaroundTime+0x11c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d906      	bls.n	8004bd6 <USB_SetTurnaroundTime+0x2a>
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4a40      	ldr	r2, [pc, #256]	@ (8004ccc <USB_SetTurnaroundTime+0x120>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d202      	bcs.n	8004bd6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004bd0:	230f      	movs	r3, #15
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	e062      	b.n	8004c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	4a3c      	ldr	r2, [pc, #240]	@ (8004ccc <USB_SetTurnaroundTime+0x120>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d306      	bcc.n	8004bec <USB_SetTurnaroundTime+0x40>
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	4a3b      	ldr	r2, [pc, #236]	@ (8004cd0 <USB_SetTurnaroundTime+0x124>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d202      	bcs.n	8004bec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004be6:	230e      	movs	r3, #14
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	e057      	b.n	8004c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4a38      	ldr	r2, [pc, #224]	@ (8004cd0 <USB_SetTurnaroundTime+0x124>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d306      	bcc.n	8004c02 <USB_SetTurnaroundTime+0x56>
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4a37      	ldr	r2, [pc, #220]	@ (8004cd4 <USB_SetTurnaroundTime+0x128>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d202      	bcs.n	8004c02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004bfc:	230d      	movs	r3, #13
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	e04c      	b.n	8004c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	4a33      	ldr	r2, [pc, #204]	@ (8004cd4 <USB_SetTurnaroundTime+0x128>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d306      	bcc.n	8004c18 <USB_SetTurnaroundTime+0x6c>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	4a32      	ldr	r2, [pc, #200]	@ (8004cd8 <USB_SetTurnaroundTime+0x12c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d802      	bhi.n	8004c18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c12:	230c      	movs	r3, #12
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	e041      	b.n	8004c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4a2f      	ldr	r2, [pc, #188]	@ (8004cd8 <USB_SetTurnaroundTime+0x12c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d906      	bls.n	8004c2e <USB_SetTurnaroundTime+0x82>
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4a2e      	ldr	r2, [pc, #184]	@ (8004cdc <USB_SetTurnaroundTime+0x130>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d802      	bhi.n	8004c2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004c28:	230b      	movs	r3, #11
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	e036      	b.n	8004c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	4a2a      	ldr	r2, [pc, #168]	@ (8004cdc <USB_SetTurnaroundTime+0x130>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d906      	bls.n	8004c44 <USB_SetTurnaroundTime+0x98>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	4a29      	ldr	r2, [pc, #164]	@ (8004ce0 <USB_SetTurnaroundTime+0x134>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d802      	bhi.n	8004c44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004c3e:	230a      	movs	r3, #10
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	e02b      	b.n	8004c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4a26      	ldr	r2, [pc, #152]	@ (8004ce0 <USB_SetTurnaroundTime+0x134>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d906      	bls.n	8004c5a <USB_SetTurnaroundTime+0xae>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4a25      	ldr	r2, [pc, #148]	@ (8004ce4 <USB_SetTurnaroundTime+0x138>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d202      	bcs.n	8004c5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004c54:	2309      	movs	r3, #9
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	e020      	b.n	8004c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	4a21      	ldr	r2, [pc, #132]	@ (8004ce4 <USB_SetTurnaroundTime+0x138>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d306      	bcc.n	8004c70 <USB_SetTurnaroundTime+0xc4>
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	4a20      	ldr	r2, [pc, #128]	@ (8004ce8 <USB_SetTurnaroundTime+0x13c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d802      	bhi.n	8004c70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c6a:	2308      	movs	r3, #8
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	e015      	b.n	8004c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4a1d      	ldr	r2, [pc, #116]	@ (8004ce8 <USB_SetTurnaroundTime+0x13c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d906      	bls.n	8004c86 <USB_SetTurnaroundTime+0xda>
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8004cec <USB_SetTurnaroundTime+0x140>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d202      	bcs.n	8004c86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c80:	2307      	movs	r3, #7
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	e00a      	b.n	8004c9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c86:	2306      	movs	r3, #6
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	e007      	b.n	8004c9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004c8c:	79fb      	ldrb	r3, [r7, #7]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d102      	bne.n	8004c98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004c92:	2309      	movs	r3, #9
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	e001      	b.n	8004c9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c98:	2309      	movs	r3, #9
 8004c9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	029b      	lsls	r3, r3, #10
 8004cb0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	371c      	adds	r7, #28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	00d8acbf 	.word	0x00d8acbf
 8004ccc:	00e4e1c0 	.word	0x00e4e1c0
 8004cd0:	00f42400 	.word	0x00f42400
 8004cd4:	01067380 	.word	0x01067380
 8004cd8:	011a499f 	.word	0x011a499f
 8004cdc:	01312cff 	.word	0x01312cff
 8004ce0:	014ca43f 	.word	0x014ca43f
 8004ce4:	016e3600 	.word	0x016e3600
 8004ce8:	01a6ab1f 	.word	0x01a6ab1f
 8004cec:	01e84800 	.word	0x01e84800

08004cf0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f043 0201 	orr.w	r2, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f023 0201 	bic.w	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d115      	bne.n	8004d82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d62:	200a      	movs	r0, #10
 8004d64:	f7fb ff66 	bl	8000c34 <HAL_Delay>
      ms += 10U;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	330a      	adds	r3, #10
 8004d6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f001 f939 	bl	8005fe6 <USB_GetMode>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d01e      	beq.n	8004db8 <USB_SetCurrentMode+0x84>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d7e:	d9f0      	bls.n	8004d62 <USB_SetCurrentMode+0x2e>
 8004d80:	e01a      	b.n	8004db8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d82:	78fb      	ldrb	r3, [r7, #3]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d115      	bne.n	8004db4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d94:	200a      	movs	r0, #10
 8004d96:	f7fb ff4d 	bl	8000c34 <HAL_Delay>
      ms += 10U;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	330a      	adds	r3, #10
 8004d9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f001 f920 	bl	8005fe6 <USB_GetMode>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <USB_SetCurrentMode+0x84>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2bc7      	cmp	r3, #199	@ 0xc7
 8004db0:	d9f0      	bls.n	8004d94 <USB_SetCurrentMode+0x60>
 8004db2:	e001      	b.n	8004db8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e005      	b.n	8004dc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2bc8      	cmp	r3, #200	@ 0xc8
 8004dbc:	d101      	bne.n	8004dc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e000      	b.n	8004dc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dcc:	b084      	sub	sp, #16
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b086      	sub	sp, #24
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004de6:	2300      	movs	r3, #0
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	e009      	b.n	8004e00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	3340      	adds	r3, #64	@ 0x40
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	2200      	movs	r2, #0
 8004df8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	2b0e      	cmp	r3, #14
 8004e04:	d9f2      	bls.n	8004dec <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e06:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d11c      	bne.n	8004e48 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e1c:	f043 0302 	orr.w	r3, r3, #2
 8004e20:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e26:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	e005      	b.n	8004e54 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e60:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d10d      	bne.n	8004e84 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d104      	bne.n	8004e7a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e70:	2100      	movs	r1, #0
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f968 	bl	8005148 <USB_SetDevSpeed>
 8004e78:	e008      	b.n	8004e8c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f963 	bl	8005148 <USB_SetDevSpeed>
 8004e82:	e003      	b.n	8004e8c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e84:	2103      	movs	r1, #3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f95e 	bl	8005148 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e8c:	2110      	movs	r1, #16
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f8fa 	bl	8005088 <USB_FlushTxFifo>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f924 	bl	80050ec <USB_FlushRxFifo>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ecc:	461a      	mov	r2, r3
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	e043      	b.n	8004f60 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004eea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004eee:	d118      	bne.n	8004f22 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f02:	461a      	mov	r2, r3
 8004f04:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	e013      	b.n	8004f34 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f18:	461a      	mov	r2, r3
 8004f1a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	e008      	b.n	8004f34 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f2e:	461a      	mov	r2, r3
 8004f30:	2300      	movs	r3, #0
 8004f32:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f40:	461a      	mov	r2, r3
 8004f42:	2300      	movs	r3, #0
 8004f44:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f52:	461a      	mov	r2, r3
 8004f54:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	613b      	str	r3, [r7, #16]
 8004f60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f64:	461a      	mov	r2, r3
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d3b5      	bcc.n	8004ed8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	e043      	b.n	8004ffa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f88:	d118      	bne.n	8004fbc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10a      	bne.n	8004fa6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	e013      	b.n	8004fce <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	e008      	b.n	8004fce <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fc8:	461a      	mov	r2, r3
 8004fca:	2300      	movs	r3, #0
 8004fcc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fda:	461a      	mov	r2, r3
 8004fdc:	2300      	movs	r3, #0
 8004fde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fec:	461a      	mov	r2, r3
 8004fee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ff2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ffe:	461a      	mov	r2, r3
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	4293      	cmp	r3, r2
 8005004:	d3b5      	bcc.n	8004f72 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005014:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005018:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005026:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005028:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800502c:	2b00      	cmp	r3, #0
 800502e:	d105      	bne.n	800503c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	f043 0210 	orr.w	r2, r3, #16
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699a      	ldr	r2, [r3, #24]
 8005040:	4b10      	ldr	r3, [pc, #64]	@ (8005084 <USB_DevInit+0x2b8>)
 8005042:	4313      	orrs	r3, r2
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005048:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800504c:	2b00      	cmp	r3, #0
 800504e:	d005      	beq.n	800505c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	f043 0208 	orr.w	r2, r3, #8
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800505c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005060:	2b01      	cmp	r3, #1
 8005062:	d107      	bne.n	8005074 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800506c:	f043 0304 	orr.w	r3, r3, #4
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005074:	7dfb      	ldrb	r3, [r7, #23]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005080:	b004      	add	sp, #16
 8005082:	4770      	bx	lr
 8005084:	803c3800 	.word	0x803c3800

08005088 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3301      	adds	r3, #1
 800509a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050a2:	d901      	bls.n	80050a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e01b      	b.n	80050e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	daf2      	bge.n	8005096 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	019b      	lsls	r3, r3, #6
 80050b8:	f043 0220 	orr.w	r2, r3, #32
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3301      	adds	r3, #1
 80050c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050cc:	d901      	bls.n	80050d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e006      	b.n	80050e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b20      	cmp	r3, #32
 80050dc:	d0f0      	beq.n	80050c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3301      	adds	r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005104:	d901      	bls.n	800510a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e018      	b.n	800513c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	daf2      	bge.n	80050f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2210      	movs	r2, #16
 800511a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3301      	adds	r3, #1
 8005120:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005128:	d901      	bls.n	800512e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e006      	b.n	800513c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	2b10      	cmp	r3, #16
 8005138:	d0f0      	beq.n	800511c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	68f9      	ldr	r1, [r7, #12]
 8005164:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005168:	4313      	orrs	r3, r2
 800516a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800517a:	b480      	push	{r7}
 800517c:	b087      	sub	sp, #28
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 0306 	and.w	r3, r3, #6
 8005192:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d102      	bne.n	80051a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800519a:	2300      	movs	r3, #0
 800519c:	75fb      	strb	r3, [r7, #23]
 800519e:	e00a      	b.n	80051b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d002      	beq.n	80051ac <USB_GetDevSpeed+0x32>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b06      	cmp	r3, #6
 80051aa:	d102      	bne.n	80051b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80051ac:	2302      	movs	r3, #2
 80051ae:	75fb      	strb	r3, [r7, #23]
 80051b0:	e001      	b.n	80051b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80051b2:	230f      	movs	r3, #15
 80051b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80051b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	785b      	ldrb	r3, [r3, #1]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d13a      	bne.n	8005256 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	2101      	movs	r1, #1
 80051f2:	fa01 f303 	lsl.w	r3, r1, r3
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	68f9      	ldr	r1, [r7, #12]
 80051fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051fe:	4313      	orrs	r3, r2
 8005200:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d155      	bne.n	80052c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	791b      	ldrb	r3, [r3, #4]
 8005232:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005234:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	059b      	lsls	r3, r3, #22
 800523a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800523c:	4313      	orrs	r3, r2
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	0151      	lsls	r1, r2, #5
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	440a      	add	r2, r1
 8005246:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800524a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800524e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	e036      	b.n	80052c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800525c:	69da      	ldr	r2, [r3, #28]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	2101      	movs	r1, #1
 8005268:	fa01 f303 	lsl.w	r3, r1, r3
 800526c:	041b      	lsls	r3, r3, #16
 800526e:	68f9      	ldr	r1, [r7, #12]
 8005270:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005274:	4313      	orrs	r3, r2
 8005276:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d11a      	bne.n	80052c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	791b      	ldrb	r3, [r3, #4]
 80052a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80052aa:	430b      	orrs	r3, r1
 80052ac:	4313      	orrs	r3, r2
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	0151      	lsls	r1, r2, #5
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	440a      	add	r2, r1
 80052b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
	...

080052d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d161      	bne.n	80053b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005302:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005306:	d11f      	bne.n	8005348 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	0151      	lsls	r1, r2, #5
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	440a      	add	r2, r1
 800531e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005322:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005326:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	0151      	lsls	r1, r2, #5
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	440a      	add	r2, r1
 800533e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005342:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005346:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800534e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	2101      	movs	r1, #1
 800535a:	fa01 f303 	lsl.w	r3, r1, r3
 800535e:	b29b      	uxth	r3, r3
 8005360:	43db      	mvns	r3, r3
 8005362:	68f9      	ldr	r1, [r7, #12]
 8005364:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005368:	4013      	ands	r3, r2
 800536a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	2101      	movs	r1, #1
 800537e:	fa01 f303 	lsl.w	r3, r1, r3
 8005382:	b29b      	uxth	r3, r3
 8005384:	43db      	mvns	r3, r3
 8005386:	68f9      	ldr	r1, [r7, #12]
 8005388:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800538c:	4013      	ands	r3, r2
 800538e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	0159      	lsls	r1, r3, #5
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	440b      	add	r3, r1
 80053a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053aa:	4619      	mov	r1, r3
 80053ac:	4b35      	ldr	r3, [pc, #212]	@ (8005484 <USB_DeactivateEndpoint+0x1b0>)
 80053ae:	4013      	ands	r3, r2
 80053b0:	600b      	str	r3, [r1, #0]
 80053b2:	e060      	b.n	8005476 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053ca:	d11f      	bne.n	800540c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	0151      	lsls	r1, r2, #5
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	440a      	add	r2, r1
 80053e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80053ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	0151      	lsls	r1, r2, #5
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	440a      	add	r2, r1
 8005402:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005406:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800540a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005412:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	f003 030f 	and.w	r3, r3, #15
 800541c:	2101      	movs	r1, #1
 800541e:	fa01 f303 	lsl.w	r3, r1, r3
 8005422:	041b      	lsls	r3, r3, #16
 8005424:	43db      	mvns	r3, r3
 8005426:	68f9      	ldr	r1, [r7, #12]
 8005428:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800542c:	4013      	ands	r3, r2
 800542e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	2101      	movs	r1, #1
 8005442:	fa01 f303 	lsl.w	r3, r1, r3
 8005446:	041b      	lsls	r3, r3, #16
 8005448:	43db      	mvns	r3, r3
 800544a:	68f9      	ldr	r1, [r7, #12]
 800544c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005450:	4013      	ands	r3, r2
 8005452:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	0159      	lsls	r1, r3, #5
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	440b      	add	r3, r1
 800546a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800546e:	4619      	mov	r1, r3
 8005470:	4b05      	ldr	r3, [pc, #20]	@ (8005488 <USB_DeactivateEndpoint+0x1b4>)
 8005472:	4013      	ands	r3, r2
 8005474:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	ec337800 	.word	0xec337800
 8005488:	eff37800 	.word	0xeff37800

0800548c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08a      	sub	sp, #40	@ 0x28
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	4613      	mov	r3, r2
 8005498:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	785b      	ldrb	r3, [r3, #1]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	f040 817f 	bne.w	80057ac <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d132      	bne.n	800551c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	0151      	lsls	r1, r2, #5
 80054c8:	69fa      	ldr	r2, [r7, #28]
 80054ca:	440a      	add	r2, r1
 80054cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054d0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80054d4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80054d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	0151      	lsls	r1, r2, #5
 80054ec:	69fa      	ldr	r2, [r7, #28]
 80054ee:	440a      	add	r2, r1
 80054f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	0151      	lsls	r1, r2, #5
 800550c:	69fa      	ldr	r2, [r7, #28]
 800550e:	440a      	add	r2, r1
 8005510:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005514:	0cdb      	lsrs	r3, r3, #19
 8005516:	04db      	lsls	r3, r3, #19
 8005518:	6113      	str	r3, [r2, #16]
 800551a:	e097      	b.n	800564c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	0151      	lsls	r1, r2, #5
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	440a      	add	r2, r1
 8005532:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005536:	0cdb      	lsrs	r3, r3, #19
 8005538:	04db      	lsls	r3, r3, #19
 800553a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	0151      	lsls	r1, r2, #5
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	440a      	add	r2, r1
 8005552:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005556:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800555a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800555e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d11a      	bne.n	800559c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	429a      	cmp	r2, r3
 8005570:	d903      	bls.n	800557a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	0151      	lsls	r1, r2, #5
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	440a      	add	r2, r1
 8005590:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005594:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005598:	6113      	str	r3, [r2, #16]
 800559a:	e044      	b.n	8005626 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	4413      	add	r3, r2
 80055a6:	1e5a      	subs	r2, r3, #1
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	8afb      	ldrh	r3, [r7, #22]
 80055c2:	04d9      	lsls	r1, r3, #19
 80055c4:	4ba4      	ldr	r3, [pc, #656]	@ (8005858 <USB_EPStartXfer+0x3cc>)
 80055c6:	400b      	ands	r3, r1
 80055c8:	69b9      	ldr	r1, [r7, #24]
 80055ca:	0148      	lsls	r0, r1, #5
 80055cc:	69f9      	ldr	r1, [r7, #28]
 80055ce:	4401      	add	r1, r0
 80055d0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80055d4:	4313      	orrs	r3, r2
 80055d6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	791b      	ldrb	r3, [r3, #4]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d122      	bne.n	8005626 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	0151      	lsls	r1, r2, #5
 80055f2:	69fa      	ldr	r2, [r7, #28]
 80055f4:	440a      	add	r2, r1
 80055f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055fa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80055fe:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800560c:	691a      	ldr	r2, [r3, #16]
 800560e:	8afb      	ldrh	r3, [r7, #22]
 8005610:	075b      	lsls	r3, r3, #29
 8005612:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005616:	69b9      	ldr	r1, [r7, #24]
 8005618:	0148      	lsls	r0, r1, #5
 800561a:	69f9      	ldr	r1, [r7, #28]
 800561c:	4401      	add	r1, r0
 800561e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005622:	4313      	orrs	r3, r2
 8005624:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800563c:	69b9      	ldr	r1, [r7, #24]
 800563e:	0148      	lsls	r0, r1, #5
 8005640:	69f9      	ldr	r1, [r7, #28]
 8005642:	4401      	add	r1, r0
 8005644:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005648:	4313      	orrs	r3, r2
 800564a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800564c:	79fb      	ldrb	r3, [r7, #7]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d14b      	bne.n	80056ea <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d009      	beq.n	800566e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005666:	461a      	mov	r2, r3
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	791b      	ldrb	r3, [r3, #4]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d128      	bne.n	80056c8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005682:	2b00      	cmp	r3, #0
 8005684:	d110      	bne.n	80056a8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	440a      	add	r2, r1
 800569c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	e00f      	b.n	80056c8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	0151      	lsls	r1, r2, #5
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	440a      	add	r2, r1
 80056be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056c6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	0151      	lsls	r1, r2, #5
 80056da:	69fa      	ldr	r2, [r7, #28]
 80056dc:	440a      	add	r2, r1
 80056de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056e2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	e166      	b.n	80059b8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	0151      	lsls	r1, r2, #5
 80056fc:	69fa      	ldr	r2, [r7, #28]
 80056fe:	440a      	add	r2, r1
 8005700:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005704:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005708:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	791b      	ldrb	r3, [r3, #4]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d015      	beq.n	800573e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 814e 	beq.w	80059b8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005722:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	2101      	movs	r1, #1
 800572e:	fa01 f303 	lsl.w	r3, r1, r3
 8005732:	69f9      	ldr	r1, [r7, #28]
 8005734:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005738:	4313      	orrs	r3, r2
 800573a:	634b      	str	r3, [r1, #52]	@ 0x34
 800573c:	e13c      	b.n	80059b8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800574a:	2b00      	cmp	r3, #0
 800574c:	d110      	bne.n	8005770 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	440a      	add	r2, r1
 8005764:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005768:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e00f      	b.n	8005790 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	0151      	lsls	r1, r2, #5
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	440a      	add	r2, r1
 8005786:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800578a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800578e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	68d9      	ldr	r1, [r3, #12]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	781a      	ldrb	r2, [r3, #0]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	b298      	uxth	r0, r3
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	4603      	mov	r3, r0
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f9b9 	bl	8005b1c <USB_WritePacket>
 80057aa:	e105      	b.n	80059b8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057c6:	0cdb      	lsrs	r3, r3, #19
 80057c8:	04db      	lsls	r3, r3, #19
 80057ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057e6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80057ea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80057ee:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d132      	bne.n	800585c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	689a      	ldr	r2, [r3, #8]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800581a:	691a      	ldr	r2, [r3, #16]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005824:	69b9      	ldr	r1, [r7, #24]
 8005826:	0148      	lsls	r0, r1, #5
 8005828:	69f9      	ldr	r1, [r7, #28]
 800582a:	4401      	add	r1, r0
 800582c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005830:	4313      	orrs	r3, r2
 8005832:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	440a      	add	r2, r1
 800584a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800584e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005852:	6113      	str	r3, [r2, #16]
 8005854:	e062      	b.n	800591c <USB_EPStartXfer+0x490>
 8005856:	bf00      	nop
 8005858:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d123      	bne.n	80058ac <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800587a:	69b9      	ldr	r1, [r7, #24]
 800587c:	0148      	lsls	r0, r1, #5
 800587e:	69f9      	ldr	r1, [r7, #28]
 8005880:	4401      	add	r1, r0
 8005882:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005886:	4313      	orrs	r3, r2
 8005888:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	0151      	lsls	r1, r2, #5
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	440a      	add	r2, r1
 80058a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80058a8:	6113      	str	r3, [r2, #16]
 80058aa:	e037      	b.n	800591c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	4413      	add	r3, r2
 80058b6:	1e5a      	subs	r2, r3, #1
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	8afa      	ldrh	r2, [r7, #22]
 80058c8:	fb03 f202 	mul.w	r2, r3, r2
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058dc:	691a      	ldr	r2, [r3, #16]
 80058de:	8afb      	ldrh	r3, [r7, #22]
 80058e0:	04d9      	lsls	r1, r3, #19
 80058e2:	4b38      	ldr	r3, [pc, #224]	@ (80059c4 <USB_EPStartXfer+0x538>)
 80058e4:	400b      	ands	r3, r1
 80058e6:	69b9      	ldr	r1, [r7, #24]
 80058e8:	0148      	lsls	r0, r1, #5
 80058ea:	69f9      	ldr	r1, [r7, #28]
 80058ec:	4401      	add	r1, r0
 80058ee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80058f2:	4313      	orrs	r3, r2
 80058f4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800590c:	69b9      	ldr	r1, [r7, #24]
 800590e:	0148      	lsls	r0, r1, #5
 8005910:	69f9      	ldr	r1, [r7, #28]
 8005912:	4401      	add	r1, r0
 8005914:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005918:	4313      	orrs	r3, r2
 800591a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d10d      	bne.n	800593e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d009      	beq.n	800593e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	68d9      	ldr	r1, [r3, #12]
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800593a:	460a      	mov	r2, r1
 800593c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	791b      	ldrb	r3, [r3, #4]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d128      	bne.n	8005998 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005952:	2b00      	cmp	r3, #0
 8005954:	d110      	bne.n	8005978 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	0151      	lsls	r1, r2, #5
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	440a      	add	r2, r1
 800596c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005970:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	e00f      	b.n	8005998 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	4413      	add	r3, r2
 8005980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	0151      	lsls	r1, r2, #5
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	440a      	add	r2, r1
 800598e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005992:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005996:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	0151      	lsls	r1, r2, #5
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	440a      	add	r2, r1
 80059ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059b2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80059b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3720      	adds	r7, #32
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	1ff80000 	.word	0x1ff80000

080059c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	785b      	ldrb	r3, [r3, #1]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d14a      	bne.n	8005a7c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059fe:	f040 8086 	bne.w	8005b0e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	7812      	ldrb	r2, [r2, #0]
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a20:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a24:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	7812      	ldrb	r2, [r2, #0]
 8005a3a:	0151      	lsls	r1, r2, #5
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	440a      	add	r2, r1
 8005a40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d902      	bls.n	8005a60 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	75fb      	strb	r3, [r7, #23]
          break;
 8005a5e:	e056      	b.n	8005b0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a78:	d0e7      	beq.n	8005a4a <USB_EPStopXfer+0x82>
 8005a7a:	e048      	b.n	8005b0e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a94:	d13b      	bne.n	8005b0e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	7812      	ldrb	r2, [r2, #0]
 8005aaa:	0151      	lsls	r1, r2, #5
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	440a      	add	r2, r1
 8005ab0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ab4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ab8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	7812      	ldrb	r2, [r2, #0]
 8005ace:	0151      	lsls	r1, r2, #5
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	440a      	add	r2, r1
 8005ad4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ad8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005adc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d902      	bls.n	8005af4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	75fb      	strb	r3, [r7, #23]
          break;
 8005af2:	e00c      	b.n	8005b0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b0c:	d0e7      	beq.n	8005ade <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	371c      	adds	r7, #28
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b089      	sub	sp, #36	@ 0x24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4611      	mov	r1, r2
 8005b28:	461a      	mov	r2, r3
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	71fb      	strb	r3, [r7, #7]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d123      	bne.n	8005b8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b42:	88bb      	ldrh	r3, [r7, #4]
 8005b44:	3303      	adds	r3, #3
 8005b46:	089b      	lsrs	r3, r3, #2
 8005b48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	61bb      	str	r3, [r7, #24]
 8005b4e:	e018      	b.n	8005b82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b50:	79fb      	ldrb	r3, [r7, #7]
 8005b52:	031a      	lsls	r2, r3, #12
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	3301      	adds	r3, #1
 8005b68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	3301      	adds	r3, #1
 8005b74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d3e2      	bcc.n	8005b50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3724      	adds	r7, #36	@ 0x24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b08b      	sub	sp, #44	@ 0x2c
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005bae:	88fb      	ldrh	r3, [r7, #6]
 8005bb0:	089b      	lsrs	r3, r3, #2
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	623b      	str	r3, [r7, #32]
 8005bc2:	e014      	b.n	8005bee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bce:	601a      	str	r2, [r3, #0]
    pDest++;
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	3301      	adds	r3, #1
 8005bda:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	3301      	adds	r3, #1
 8005be0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	3301      	adds	r3, #1
 8005be6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	3301      	adds	r3, #1
 8005bec:	623b      	str	r3, [r7, #32]
 8005bee:	6a3a      	ldr	r2, [r7, #32]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d3e6      	bcc.n	8005bc4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005bf6:	8bfb      	ldrh	r3, [r7, #30]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d01e      	beq.n	8005c3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c06:	461a      	mov	r2, r3
 8005c08:	f107 0310 	add.w	r3, r7, #16
 8005c0c:	6812      	ldr	r2, [r2, #0]
 8005c0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	fa22 f303 	lsr.w	r3, r2, r3
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	701a      	strb	r2, [r3, #0]
      i++;
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	3301      	adds	r3, #1
 8005c26:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005c2e:	8bfb      	ldrh	r3, [r7, #30]
 8005c30:	3b01      	subs	r3, #1
 8005c32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c34:	8bfb      	ldrh	r3, [r7, #30]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1ea      	bne.n	8005c10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	372c      	adds	r7, #44	@ 0x2c
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	785b      	ldrb	r3, [r3, #1]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d12c      	bne.n	8005cbe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	db12      	blt.n	8005c9c <USB_EPSetStall+0x54>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00f      	beq.n	8005c9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	0151      	lsls	r1, r2, #5
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	440a      	add	r2, r1
 8005c92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c96:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cb6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	e02b      	b.n	8005d16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	db12      	blt.n	8005cf6 <USB_EPSetStall+0xae>
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00f      	beq.n	8005cf6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cf0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005cf4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	0151      	lsls	r1, r2, #5
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	440a      	add	r2, r1
 8005d0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005d14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3714      	adds	r7, #20
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d128      	bne.n	8005d92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	0151      	lsls	r1, r2, #5
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	440a      	add	r2, r1
 8005d56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	791b      	ldrb	r3, [r3, #4]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d003      	beq.n	8005d70 <USB_EPClearStall+0x4c>
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	791b      	ldrb	r3, [r3, #4]
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d138      	bne.n	8005de2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	0151      	lsls	r1, r2, #5
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	440a      	add	r2, r1
 8005d86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	e027      	b.n	8005de2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005db0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	791b      	ldrb	r3, [r3, #4]
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	d003      	beq.n	8005dc2 <USB_EPClearStall+0x9e>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	791b      	ldrb	r3, [r3, #4]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d10f      	bne.n	8005de2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	0151      	lsls	r1, r2, #5
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005de0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e0e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005e12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005e24:	68f9      	ldr	r1, [r7, #12]
 8005e26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005e56:	f023 0303 	bic.w	r3, r3, #3
 8005e5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e6a:	f023 0302 	bic.w	r3, r3, #2
 8005e6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b085      	sub	sp, #20
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005e98:	f023 0303 	bic.w	r3, r3, #3
 8005e9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005eac:	f043 0302 	orr.w	r3, r3, #2
 8005eb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b085      	sub	sp, #20
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	4013      	ands	r3, r2
 8005f08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	0c1b      	lsrs	r3, r3, #16
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	b29b      	uxth	r3, r3
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	460b      	mov	r3, r1
 8005f58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b087      	sub	sp, #28
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	460b      	mov	r3, r1
 8005f94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005fae:	78fb      	ldrb	r3, [r7, #3]
 8005fb0:	f003 030f 	and.w	r3, r3, #15
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fba:	01db      	lsls	r3, r3, #7
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	371c      	adds	r7, #28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006002:	b480      	push	{r7}
 8006004:	b085      	sub	sp, #20
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800601c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006020:	f023 0307 	bic.w	r3, r3, #7
 8006024:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006038:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	460b      	mov	r3, r1
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	333c      	adds	r3, #60	@ 0x3c
 800605e:	3304      	adds	r3, #4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	4a26      	ldr	r2, [pc, #152]	@ (8006100 <USB_EP0_OutStart+0xb8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d90a      	bls.n	8006082 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006078:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800607c:	d101      	bne.n	8006082 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	e037      	b.n	80060f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006088:	461a      	mov	r2, r3
 800608a:	2300      	movs	r3, #0
 800608c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800609c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060b0:	f043 0318 	orr.w	r3, r3, #24
 80060b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060c4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80060c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80060ca:	7afb      	ldrb	r3, [r7, #11]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d10f      	bne.n	80060f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d6:	461a      	mov	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060ea:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80060ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	4f54300a 	.word	0x4f54300a

08006104 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	3301      	adds	r3, #1
 8006114:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800611c:	d901      	bls.n	8006122 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e01b      	b.n	800615a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	daf2      	bge.n	8006110 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f043 0201 	orr.w	r2, r3, #1
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3301      	adds	r3, #1
 800613e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006146:	d901      	bls.n	800614c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e006      	b.n	800615a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b01      	cmp	r3, #1
 8006156:	d0f0      	beq.n	800613a <USB_CoreReset+0x36>

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
	...

08006168 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006174:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006178:	f002 fd3e 	bl	8008bf8 <USBD_static_malloc>
 800617c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d109      	bne.n	8006198 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	32b0      	adds	r2, #176	@ 0xb0
 800618e:	2100      	movs	r1, #0
 8006190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006194:	2302      	movs	r3, #2
 8006196:	e0d4      	b.n	8006342 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006198:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800619c:	2100      	movs	r1, #0
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f002 fd6e 	bl	8008c80 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	32b0      	adds	r2, #176	@ 0xb0
 80061ae:	68f9      	ldr	r1, [r7, #12]
 80061b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	32b0      	adds	r2, #176	@ 0xb0
 80061be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	7c1b      	ldrb	r3, [r3, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d138      	bne.n	8006242 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80061d0:	4b5e      	ldr	r3, [pc, #376]	@ (800634c <USBD_CDC_Init+0x1e4>)
 80061d2:	7819      	ldrb	r1, [r3, #0]
 80061d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061d8:	2202      	movs	r2, #2
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f002 fb9b 	bl	8008916 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80061e0:	4b5a      	ldr	r3, [pc, #360]	@ (800634c <USBD_CDC_Init+0x1e4>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	f003 020f 	and.w	r2, r3, #15
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	4613      	mov	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	440b      	add	r3, r1
 80061f4:	3324      	adds	r3, #36	@ 0x24
 80061f6:	2201      	movs	r2, #1
 80061f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80061fa:	4b55      	ldr	r3, [pc, #340]	@ (8006350 <USBD_CDC_Init+0x1e8>)
 80061fc:	7819      	ldrb	r1, [r3, #0]
 80061fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006202:	2202      	movs	r2, #2
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f002 fb86 	bl	8008916 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800620a:	4b51      	ldr	r3, [pc, #324]	@ (8006350 <USBD_CDC_Init+0x1e8>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	f003 020f 	and.w	r2, r3, #15
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006222:	2201      	movs	r2, #1
 8006224:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006226:	4b4b      	ldr	r3, [pc, #300]	@ (8006354 <USBD_CDC_Init+0x1ec>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	f003 020f 	and.w	r2, r3, #15
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	440b      	add	r3, r1
 800623a:	3326      	adds	r3, #38	@ 0x26
 800623c:	2210      	movs	r2, #16
 800623e:	801a      	strh	r2, [r3, #0]
 8006240:	e035      	b.n	80062ae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006242:	4b42      	ldr	r3, [pc, #264]	@ (800634c <USBD_CDC_Init+0x1e4>)
 8006244:	7819      	ldrb	r1, [r3, #0]
 8006246:	2340      	movs	r3, #64	@ 0x40
 8006248:	2202      	movs	r2, #2
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f002 fb63 	bl	8008916 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006250:	4b3e      	ldr	r3, [pc, #248]	@ (800634c <USBD_CDC_Init+0x1e4>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	f003 020f 	and.w	r2, r3, #15
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	440b      	add	r3, r1
 8006264:	3324      	adds	r3, #36	@ 0x24
 8006266:	2201      	movs	r2, #1
 8006268:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800626a:	4b39      	ldr	r3, [pc, #228]	@ (8006350 <USBD_CDC_Init+0x1e8>)
 800626c:	7819      	ldrb	r1, [r3, #0]
 800626e:	2340      	movs	r3, #64	@ 0x40
 8006270:	2202      	movs	r2, #2
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f002 fb4f 	bl	8008916 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006278:	4b35      	ldr	r3, [pc, #212]	@ (8006350 <USBD_CDC_Init+0x1e8>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	f003 020f 	and.w	r2, r3, #15
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	4613      	mov	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	440b      	add	r3, r1
 800628c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006290:	2201      	movs	r2, #1
 8006292:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006294:	4b2f      	ldr	r3, [pc, #188]	@ (8006354 <USBD_CDC_Init+0x1ec>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	f003 020f 	and.w	r2, r3, #15
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	4613      	mov	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	440b      	add	r3, r1
 80062a8:	3326      	adds	r3, #38	@ 0x26
 80062aa:	2210      	movs	r2, #16
 80062ac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80062ae:	4b29      	ldr	r3, [pc, #164]	@ (8006354 <USBD_CDC_Init+0x1ec>)
 80062b0:	7819      	ldrb	r1, [r3, #0]
 80062b2:	2308      	movs	r3, #8
 80062b4:	2203      	movs	r2, #3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f002 fb2d 	bl	8008916 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80062bc:	4b25      	ldr	r3, [pc, #148]	@ (8006354 <USBD_CDC_Init+0x1ec>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	f003 020f 	and.w	r2, r3, #15
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	4613      	mov	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	440b      	add	r3, r1
 80062d0:	3324      	adds	r3, #36	@ 0x24
 80062d2:	2201      	movs	r2, #1
 80062d4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	33b0      	adds	r3, #176	@ 0xb0
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800630c:	2302      	movs	r3, #2
 800630e:	e018      	b.n	8006342 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	7c1b      	ldrb	r3, [r3, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10a      	bne.n	800632e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006318:	4b0d      	ldr	r3, [pc, #52]	@ (8006350 <USBD_CDC_Init+0x1e8>)
 800631a:	7819      	ldrb	r1, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006322:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f002 fbe4 	bl	8008af4 <USBD_LL_PrepareReceive>
 800632c:	e008      	b.n	8006340 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800632e:	4b08      	ldr	r3, [pc, #32]	@ (8006350 <USBD_CDC_Init+0x1e8>)
 8006330:	7819      	ldrb	r1, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006338:	2340      	movs	r3, #64	@ 0x40
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f002 fbda 	bl	8008af4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20000093 	.word	0x20000093
 8006350:	20000094 	.word	0x20000094
 8006354:	20000095 	.word	0x20000095

08006358 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006364:	4b3a      	ldr	r3, [pc, #232]	@ (8006450 <USBD_CDC_DeInit+0xf8>)
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f002 faf9 	bl	8008962 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006370:	4b37      	ldr	r3, [pc, #220]	@ (8006450 <USBD_CDC_DeInit+0xf8>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	f003 020f 	and.w	r2, r3, #15
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	440b      	add	r3, r1
 8006384:	3324      	adds	r3, #36	@ 0x24
 8006386:	2200      	movs	r2, #0
 8006388:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800638a:	4b32      	ldr	r3, [pc, #200]	@ (8006454 <USBD_CDC_DeInit+0xfc>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	4619      	mov	r1, r3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f002 fae6 	bl	8008962 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006396:	4b2f      	ldr	r3, [pc, #188]	@ (8006454 <USBD_CDC_DeInit+0xfc>)
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	f003 020f 	and.w	r2, r3, #15
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	4613      	mov	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	440b      	add	r3, r1
 80063aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80063ae:	2200      	movs	r2, #0
 80063b0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80063b2:	4b29      	ldr	r3, [pc, #164]	@ (8006458 <USBD_CDC_DeInit+0x100>)
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	4619      	mov	r1, r3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f002 fad2 	bl	8008962 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80063be:	4b26      	ldr	r3, [pc, #152]	@ (8006458 <USBD_CDC_DeInit+0x100>)
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	f003 020f 	and.w	r2, r3, #15
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	4613      	mov	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	440b      	add	r3, r1
 80063d2:	3324      	adds	r3, #36	@ 0x24
 80063d4:	2200      	movs	r2, #0
 80063d6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80063d8:	4b1f      	ldr	r3, [pc, #124]	@ (8006458 <USBD_CDC_DeInit+0x100>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	f003 020f 	and.w	r2, r3, #15
 80063e0:	6879      	ldr	r1, [r7, #4]
 80063e2:	4613      	mov	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	440b      	add	r3, r1
 80063ec:	3326      	adds	r3, #38	@ 0x26
 80063ee:	2200      	movs	r2, #0
 80063f0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	32b0      	adds	r2, #176	@ 0xb0
 80063fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d01f      	beq.n	8006444 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	33b0      	adds	r3, #176	@ 0xb0
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	32b0      	adds	r2, #176	@ 0xb0
 8006422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006426:	4618      	mov	r0, r3
 8006428:	f002 fbf4 	bl	8008c14 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	32b0      	adds	r2, #176	@ 0xb0
 8006436:	2100      	movs	r1, #0
 8006438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	20000093 	.word	0x20000093
 8006454:	20000094 	.word	0x20000094
 8006458:	20000095 	.word	0x20000095

0800645c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	32b0      	adds	r2, #176	@ 0xb0
 8006470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006474:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006488:	2303      	movs	r3, #3
 800648a:	e0bf      	b.n	800660c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006494:	2b00      	cmp	r3, #0
 8006496:	d050      	beq.n	800653a <USBD_CDC_Setup+0xde>
 8006498:	2b20      	cmp	r3, #32
 800649a:	f040 80af 	bne.w	80065fc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	88db      	ldrh	r3, [r3, #6]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d03a      	beq.n	800651c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	b25b      	sxtb	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	da1b      	bge.n	80064e8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	33b0      	adds	r3, #176	@ 0xb0
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80064c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	88d2      	ldrh	r2, [r2, #6]
 80064cc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	88db      	ldrh	r3, [r3, #6]
 80064d2:	2b07      	cmp	r3, #7
 80064d4:	bf28      	it	cs
 80064d6:	2307      	movcs	r3, #7
 80064d8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	89fa      	ldrh	r2, [r7, #14]
 80064de:	4619      	mov	r1, r3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 fdbd 	bl	8008060 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80064e6:	e090      	b.n	800660a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	785a      	ldrb	r2, [r3, #1]
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	88db      	ldrh	r3, [r3, #6]
 80064f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80064f8:	d803      	bhi.n	8006502 <USBD_CDC_Setup+0xa6>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	88db      	ldrh	r3, [r3, #6]
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	e000      	b.n	8006504 <USBD_CDC_Setup+0xa8>
 8006502:	2240      	movs	r2, #64	@ 0x40
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800650a:	6939      	ldr	r1, [r7, #16]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006512:	461a      	mov	r2, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f001 fdcf 	bl	80080b8 <USBD_CtlPrepareRx>
      break;
 800651a:	e076      	b.n	800660a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	33b0      	adds	r3, #176	@ 0xb0
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	7850      	ldrb	r0, [r2, #1]
 8006532:	2200      	movs	r2, #0
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	4798      	blx	r3
      break;
 8006538:	e067      	b.n	800660a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	785b      	ldrb	r3, [r3, #1]
 800653e:	2b0b      	cmp	r3, #11
 8006540:	d851      	bhi.n	80065e6 <USBD_CDC_Setup+0x18a>
 8006542:	a201      	add	r2, pc, #4	@ (adr r2, 8006548 <USBD_CDC_Setup+0xec>)
 8006544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006548:	08006579 	.word	0x08006579
 800654c:	080065f5 	.word	0x080065f5
 8006550:	080065e7 	.word	0x080065e7
 8006554:	080065e7 	.word	0x080065e7
 8006558:	080065e7 	.word	0x080065e7
 800655c:	080065e7 	.word	0x080065e7
 8006560:	080065e7 	.word	0x080065e7
 8006564:	080065e7 	.word	0x080065e7
 8006568:	080065e7 	.word	0x080065e7
 800656c:	080065e7 	.word	0x080065e7
 8006570:	080065a3 	.word	0x080065a3
 8006574:	080065cd 	.word	0x080065cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b03      	cmp	r3, #3
 8006582:	d107      	bne.n	8006594 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006584:	f107 030a 	add.w	r3, r7, #10
 8006588:	2202      	movs	r2, #2
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 fd67 	bl	8008060 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006592:	e032      	b.n	80065fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006594:	6839      	ldr	r1, [r7, #0]
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f001 fce5 	bl	8007f66 <USBD_CtlError>
            ret = USBD_FAIL;
 800659c:	2303      	movs	r3, #3
 800659e:	75fb      	strb	r3, [r7, #23]
          break;
 80065a0:	e02b      	b.n	80065fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d107      	bne.n	80065be <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80065ae:	f107 030d 	add.w	r3, r7, #13
 80065b2:	2201      	movs	r2, #1
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f001 fd52 	bl	8008060 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065bc:	e01d      	b.n	80065fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80065be:	6839      	ldr	r1, [r7, #0]
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f001 fcd0 	bl	8007f66 <USBD_CtlError>
            ret = USBD_FAIL;
 80065c6:	2303      	movs	r3, #3
 80065c8:	75fb      	strb	r3, [r7, #23]
          break;
 80065ca:	e016      	b.n	80065fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d00f      	beq.n	80065f8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80065d8:	6839      	ldr	r1, [r7, #0]
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f001 fcc3 	bl	8007f66 <USBD_CtlError>
            ret = USBD_FAIL;
 80065e0:	2303      	movs	r3, #3
 80065e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80065e4:	e008      	b.n	80065f8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80065e6:	6839      	ldr	r1, [r7, #0]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f001 fcbc 	bl	8007f66 <USBD_CtlError>
          ret = USBD_FAIL;
 80065ee:	2303      	movs	r3, #3
 80065f0:	75fb      	strb	r3, [r7, #23]
          break;
 80065f2:	e002      	b.n	80065fa <USBD_CDC_Setup+0x19e>
          break;
 80065f4:	bf00      	nop
 80065f6:	e008      	b.n	800660a <USBD_CDC_Setup+0x1ae>
          break;
 80065f8:	bf00      	nop
      }
      break;
 80065fa:	e006      	b.n	800660a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 fcb1 	bl	8007f66 <USBD_CtlError>
      ret = USBD_FAIL;
 8006604:	2303      	movs	r3, #3
 8006606:	75fb      	strb	r3, [r7, #23]
      break;
 8006608:	bf00      	nop
  }

  return (uint8_t)ret;
 800660a:	7dfb      	ldrb	r3, [r7, #23]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006626:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	32b0      	adds	r2, #176	@ 0xb0
 8006632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800663a:	2303      	movs	r3, #3
 800663c:	e065      	b.n	800670a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	32b0      	adds	r2, #176	@ 0xb0
 8006648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	f003 020f 	and.w	r2, r3, #15
 8006654:	6879      	ldr	r1, [r7, #4]
 8006656:	4613      	mov	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	440b      	add	r3, r1
 8006660:	3318      	adds	r3, #24
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d02f      	beq.n	80066c8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	f003 020f 	and.w	r2, r3, #15
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	4613      	mov	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	440b      	add	r3, r1
 800667a:	3318      	adds	r3, #24
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	78fb      	ldrb	r3, [r7, #3]
 8006680:	f003 010f 	and.w	r1, r3, #15
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	460b      	mov	r3, r1
 8006688:	00db      	lsls	r3, r3, #3
 800668a:	440b      	add	r3, r1
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4403      	add	r3, r0
 8006690:	331c      	adds	r3, #28
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	fbb2 f1f3 	udiv	r1, r2, r3
 8006698:	fb01 f303 	mul.w	r3, r1, r3
 800669c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d112      	bne.n	80066c8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80066a2:	78fb      	ldrb	r3, [r7, #3]
 80066a4:	f003 020f 	and.w	r2, r3, #15
 80066a8:	6879      	ldr	r1, [r7, #4]
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	440b      	add	r3, r1
 80066b4:	3318      	adds	r3, #24
 80066b6:	2200      	movs	r2, #0
 80066b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80066ba:	78f9      	ldrb	r1, [r7, #3]
 80066bc:	2300      	movs	r3, #0
 80066be:	2200      	movs	r2, #0
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f002 f9f6 	bl	8008ab2 <USBD_LL_Transmit>
 80066c6:	e01f      	b.n	8006708 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	33b0      	adds	r3, #176	@ 0xb0
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d010      	beq.n	8006708 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	33b0      	adds	r3, #176	@ 0xb0
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006704:	78fa      	ldrb	r2, [r7, #3]
 8006706:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	460b      	mov	r3, r1
 800671c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	32b0      	adds	r2, #176	@ 0xb0
 8006728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	32b0      	adds	r2, #176	@ 0xb0
 8006738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006740:	2303      	movs	r3, #3
 8006742:	e01a      	b.n	800677a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	4619      	mov	r1, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f002 f9f4 	bl	8008b36 <USBD_LL_GetRxDataSize>
 800674e:	4602      	mov	r2, r0
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	33b0      	adds	r3, #176	@ 0xb0
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006774:	4611      	mov	r1, r2
 8006776:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	32b0      	adds	r2, #176	@ 0xb0
 8006794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006798:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e024      	b.n	80067ee <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	33b0      	adds	r3, #176	@ 0xb0
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d019      	beq.n	80067ec <USBD_CDC_EP0_RxReady+0x6a>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80067be:	2bff      	cmp	r3, #255	@ 0xff
 80067c0:	d014      	beq.n	80067ec <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	33b0      	adds	r3, #176	@ 0xb0
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80067da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80067e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	22ff      	movs	r2, #255	@ 0xff
 80067e8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006800:	2182      	movs	r1, #130	@ 0x82
 8006802:	4818      	ldr	r0, [pc, #96]	@ (8006864 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006804:	f000 fd4f 	bl	80072a6 <USBD_GetEpDesc>
 8006808:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800680a:	2101      	movs	r1, #1
 800680c:	4815      	ldr	r0, [pc, #84]	@ (8006864 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800680e:	f000 fd4a 	bl	80072a6 <USBD_GetEpDesc>
 8006812:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006814:	2181      	movs	r1, #129	@ 0x81
 8006816:	4813      	ldr	r0, [pc, #76]	@ (8006864 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006818:	f000 fd45 	bl	80072a6 <USBD_GetEpDesc>
 800681c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	2210      	movs	r2, #16
 8006828:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d006      	beq.n	800683e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	2200      	movs	r2, #0
 8006834:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006838:	711a      	strb	r2, [r3, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d006      	beq.n	8006852 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800684c:	711a      	strb	r2, [r3, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2243      	movs	r2, #67	@ 0x43
 8006856:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006858:	4b02      	ldr	r3, [pc, #8]	@ (8006864 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800685a:	4618      	mov	r0, r3
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	20000050 	.word	0x20000050

08006868 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006870:	2182      	movs	r1, #130	@ 0x82
 8006872:	4818      	ldr	r0, [pc, #96]	@ (80068d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006874:	f000 fd17 	bl	80072a6 <USBD_GetEpDesc>
 8006878:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800687a:	2101      	movs	r1, #1
 800687c:	4815      	ldr	r0, [pc, #84]	@ (80068d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800687e:	f000 fd12 	bl	80072a6 <USBD_GetEpDesc>
 8006882:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006884:	2181      	movs	r1, #129	@ 0x81
 8006886:	4813      	ldr	r0, [pc, #76]	@ (80068d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006888:	f000 fd0d 	bl	80072a6 <USBD_GetEpDesc>
 800688c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	2210      	movs	r2, #16
 8006898:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d006      	beq.n	80068ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	2200      	movs	r2, #0
 80068a4:	711a      	strb	r2, [r3, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f042 0202 	orr.w	r2, r2, #2
 80068ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d006      	beq.n	80068c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	711a      	strb	r2, [r3, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f042 0202 	orr.w	r2, r2, #2
 80068c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2243      	movs	r2, #67	@ 0x43
 80068c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80068c8:	4b02      	ldr	r3, [pc, #8]	@ (80068d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20000050 	.word	0x20000050

080068d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80068e0:	2182      	movs	r1, #130	@ 0x82
 80068e2:	4818      	ldr	r0, [pc, #96]	@ (8006944 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80068e4:	f000 fcdf 	bl	80072a6 <USBD_GetEpDesc>
 80068e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80068ea:	2101      	movs	r1, #1
 80068ec:	4815      	ldr	r0, [pc, #84]	@ (8006944 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80068ee:	f000 fcda 	bl	80072a6 <USBD_GetEpDesc>
 80068f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80068f4:	2181      	movs	r1, #129	@ 0x81
 80068f6:	4813      	ldr	r0, [pc, #76]	@ (8006944 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80068f8:	f000 fcd5 	bl	80072a6 <USBD_GetEpDesc>
 80068fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	2210      	movs	r2, #16
 8006908:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d006      	beq.n	800691e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	2200      	movs	r2, #0
 8006914:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006918:	711a      	strb	r2, [r3, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d006      	beq.n	8006932 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800692c:	711a      	strb	r2, [r3, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2243      	movs	r2, #67	@ 0x43
 8006936:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006938:	4b02      	ldr	r3, [pc, #8]	@ (8006944 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800693a:	4618      	mov	r0, r3
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20000050 	.word	0x20000050

08006948 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	220a      	movs	r2, #10
 8006954:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006956:	4b03      	ldr	r3, [pc, #12]	@ (8006964 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	2000000c 	.word	0x2000000c

08006968 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006978:	2303      	movs	r3, #3
 800697a:	e009      	b.n	8006990 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	33b0      	adds	r3, #176	@ 0xb0
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	32b0      	adds	r2, #176	@ 0xb0
 80069b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80069be:	2303      	movs	r3, #3
 80069c0:	e008      	b.n	80069d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	371c      	adds	r7, #28
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	32b0      	adds	r2, #176	@ 0xb0
 80069f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e004      	b.n	8006a0e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
	...

08006a1c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	32b0      	adds	r2, #176	@ 0xb0
 8006a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a32:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006a34:	2301      	movs	r3, #1
 8006a36:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e025      	b.n	8006a8e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d11f      	bne.n	8006a8c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006a54:	4b10      	ldr	r3, [pc, #64]	@ (8006a98 <USBD_CDC_TransmitPacket+0x7c>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	f003 020f 	and.w	r2, r3, #15
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4403      	add	r3, r0
 8006a6e:	3318      	adds	r3, #24
 8006a70:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006a72:	4b09      	ldr	r3, [pc, #36]	@ (8006a98 <USBD_CDC_TransmitPacket+0x7c>)
 8006a74:	7819      	ldrb	r1, [r3, #0]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f002 f815 	bl	8008ab2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20000093 	.word	0x20000093

08006a9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	32b0      	adds	r2, #176	@ 0xb0
 8006aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	32b0      	adds	r2, #176	@ 0xb0
 8006abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e018      	b.n	8006afc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	7c1b      	ldrb	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10a      	bne.n	8006ae8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8006b04 <USBD_CDC_ReceivePacket+0x68>)
 8006ad4:	7819      	ldrb	r1, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006adc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f002 f807 	bl	8008af4 <USBD_LL_PrepareReceive>
 8006ae6:	e008      	b.n	8006afa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ae8:	4b06      	ldr	r3, [pc, #24]	@ (8006b04 <USBD_CDC_ReceivePacket+0x68>)
 8006aea:	7819      	ldrb	r1, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006af2:	2340      	movs	r3, #64	@ 0x40
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f001 fffd 	bl	8008af4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	20000094 	.word	0x20000094

08006b08 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	4613      	mov	r3, r2
 8006b14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e01f      	b.n	8006b60 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	79fa      	ldrb	r2, [r7, #7]
 8006b52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f001 fe77 	bl	8008848 <USBD_LL_Init>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e025      	b.n	8006bcc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	32ae      	adds	r2, #174	@ 0xae
 8006b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00f      	beq.n	8006bbc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	32ae      	adds	r2, #174	@ 0xae
 8006ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bac:	f107 020e 	add.w	r2, r7, #14
 8006bb0:	4610      	mov	r0, r2
 8006bb2:	4798      	blx	r3
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 fe7f 	bl	80088e0 <USBD_LL_Start>
 8006be2:	4603      	mov	r3, r0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006bf4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d009      	beq.n	8006c30 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	78fa      	ldrb	r2, [r7, #3]
 8006c26:	4611      	mov	r1, r2
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	4798      	blx	r3
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	460b      	mov	r3, r1
 8006c44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	78fa      	ldrb	r2, [r7, #3]
 8006c54:	4611      	mov	r1, r2
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	4798      	blx	r3
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006c60:	2303      	movs	r3, #3
 8006c62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b084      	sub	sp, #16
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f001 f936 	bl	8007ef2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006c94:	461a      	mov	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006ca2:	f003 031f 	and.w	r3, r3, #31
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d01a      	beq.n	8006ce0 <USBD_LL_SetupStage+0x72>
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d822      	bhi.n	8006cf4 <USBD_LL_SetupStage+0x86>
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <USBD_LL_SetupStage+0x4a>
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d00a      	beq.n	8006ccc <USBD_LL_SetupStage+0x5e>
 8006cb6:	e01d      	b.n	8006cf4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fb63 	bl	800738c <USBD_StdDevReq>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8006cca:	e020      	b.n	8006d0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fbcb 	bl	8007470 <USBD_StdItfReq>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	73fb      	strb	r3, [r7, #15]
      break;
 8006cde:	e016      	b.n	8006d0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fc2d 	bl	8007548 <USBD_StdEPReq>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8006cf2:	e00c      	b.n	8006d0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006cfa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f001 fe4c 	bl	80089a0 <USBD_LL_StallEP>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d0c:	bf00      	nop
  }

  return ret;
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	460b      	mov	r3, r1
 8006d22:	607a      	str	r2, [r7, #4]
 8006d24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006d2a:	7afb      	ldrb	r3, [r7, #11]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d16e      	bne.n	8006e0e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006d36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	f040 8098 	bne.w	8006e74 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	689a      	ldr	r2, [r3, #8]
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d913      	bls.n	8006d78 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	1ad2      	subs	r2, r2, r3
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	4293      	cmp	r3, r2
 8006d68:	bf28      	it	cs
 8006d6a:	4613      	movcs	r3, r2
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	6879      	ldr	r1, [r7, #4]
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f001 f9be 	bl	80080f2 <USBD_CtlContinueRx>
 8006d76:	e07d      	b.n	8006e74 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006d7e:	f003 031f 	and.w	r3, r3, #31
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d014      	beq.n	8006db0 <USBD_LL_DataOutStage+0x98>
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d81d      	bhi.n	8006dc6 <USBD_LL_DataOutStage+0xae>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d002      	beq.n	8006d94 <USBD_LL_DataOutStage+0x7c>
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d003      	beq.n	8006d9a <USBD_LL_DataOutStage+0x82>
 8006d92:	e018      	b.n	8006dc6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	75bb      	strb	r3, [r7, #22]
            break;
 8006d98:	e018      	b.n	8006dcc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	4619      	mov	r1, r3
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 fa64 	bl	8007272 <USBD_CoreFindIF>
 8006daa:	4603      	mov	r3, r0
 8006dac:	75bb      	strb	r3, [r7, #22]
            break;
 8006dae:	e00d      	b.n	8006dcc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	4619      	mov	r1, r3
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 fa66 	bl	800728c <USBD_CoreFindEP>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	75bb      	strb	r3, [r7, #22]
            break;
 8006dc4:	e002      	b.n	8006dcc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	75bb      	strb	r3, [r7, #22]
            break;
 8006dca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006dcc:	7dbb      	ldrb	r3, [r7, #22]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d119      	bne.n	8006e06 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d113      	bne.n	8006e06 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006dde:	7dba      	ldrb	r2, [r7, #22]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	32ae      	adds	r2, #174	@ 0xae
 8006de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00b      	beq.n	8006e06 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006dee:	7dba      	ldrb	r2, [r7, #22]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006df6:	7dba      	ldrb	r2, [r7, #22]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	32ae      	adds	r2, #174	@ 0xae
 8006dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f001 f984 	bl	8008114 <USBD_CtlSendStatus>
 8006e0c:	e032      	b.n	8006e74 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006e0e:	7afb      	ldrb	r3, [r7, #11]
 8006e10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	4619      	mov	r1, r3
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 fa37 	bl	800728c <USBD_CoreFindEP>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e22:	7dbb      	ldrb	r3, [r7, #22]
 8006e24:	2bff      	cmp	r3, #255	@ 0xff
 8006e26:	d025      	beq.n	8006e74 <USBD_LL_DataOutStage+0x15c>
 8006e28:	7dbb      	ldrb	r3, [r7, #22]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d122      	bne.n	8006e74 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d117      	bne.n	8006e6a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006e3a:	7dba      	ldrb	r2, [r7, #22]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	32ae      	adds	r2, #174	@ 0xae
 8006e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00f      	beq.n	8006e6a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006e4a:	7dba      	ldrb	r2, [r7, #22]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006e52:	7dba      	ldrb	r2, [r7, #22]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	32ae      	adds	r2, #174	@ 0xae
 8006e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	7afa      	ldrb	r2, [r7, #11]
 8006e60:	4611      	mov	r1, r2
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	4798      	blx	r3
 8006e66:	4603      	mov	r3, r0
 8006e68:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006e6a:	7dfb      	ldrb	r3, [r7, #23]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
 8006e72:	e000      	b.n	8006e76 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b086      	sub	sp, #24
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	460b      	mov	r3, r1
 8006e88:	607a      	str	r2, [r7, #4]
 8006e8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006e8c:	7afb      	ldrb	r3, [r7, #11]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d16f      	bne.n	8006f72 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3314      	adds	r3, #20
 8006e96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d15a      	bne.n	8006f58 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	689a      	ldr	r2, [r3, #8]
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d914      	bls.n	8006ed8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	689a      	ldr	r2, [r3, #8]
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	1ad2      	subs	r2, r2, r3
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	6879      	ldr	r1, [r7, #4]
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f001 f8e6 	bl	8008096 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006eca:	2300      	movs	r3, #0
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2100      	movs	r1, #0
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f001 fe0f 	bl	8008af4 <USBD_LL_PrepareReceive>
 8006ed6:	e03f      	b.n	8006f58 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d11c      	bne.n	8006f1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d316      	bcc.n	8006f1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d20f      	bcs.n	8006f1e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006efe:	2200      	movs	r2, #0
 8006f00:	2100      	movs	r1, #0
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f001 f8c7 	bl	8008096 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f10:	2300      	movs	r3, #0
 8006f12:	2200      	movs	r2, #0
 8006f14:	2100      	movs	r1, #0
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f001 fdec 	bl	8008af4 <USBD_LL_PrepareReceive>
 8006f1c:	e01c      	b.n	8006f58 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d10f      	bne.n	8006f4a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f4a:	2180      	movs	r1, #128	@ 0x80
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f001 fd27 	bl	80089a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f001 f8f1 	bl	800813a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d03a      	beq.n	8006fd8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f7ff fe42 	bl	8006bec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006f70:	e032      	b.n	8006fd8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006f72:	7afb      	ldrb	r3, [r7, #11]
 8006f74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 f985 	bl	800728c <USBD_CoreFindEP>
 8006f82:	4603      	mov	r3, r0
 8006f84:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f86:	7dfb      	ldrb	r3, [r7, #23]
 8006f88:	2bff      	cmp	r3, #255	@ 0xff
 8006f8a:	d025      	beq.n	8006fd8 <USBD_LL_DataInStage+0x15a>
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d122      	bne.n	8006fd8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d11c      	bne.n	8006fd8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006f9e:	7dfa      	ldrb	r2, [r7, #23]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	32ae      	adds	r2, #174	@ 0xae
 8006fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d014      	beq.n	8006fd8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006fae:	7dfa      	ldrb	r2, [r7, #23]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006fb6:	7dfa      	ldrb	r2, [r7, #23]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	32ae      	adds	r2, #174	@ 0xae
 8006fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	7afa      	ldrb	r2, [r7, #11]
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	4798      	blx	r3
 8006fca:	4603      	mov	r3, r0
 8006fcc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006fce:	7dbb      	ldrb	r3, [r7, #22]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006fd4:	7dbb      	ldrb	r3, [r7, #22]
 8006fd6:	e000      	b.n	8006fda <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800701a:	2b00      	cmp	r3, #0
 800701c:	d014      	beq.n	8007048 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00e      	beq.n	8007048 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	6852      	ldr	r2, [r2, #4]
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	4611      	mov	r1, r2
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	4798      	blx	r3
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007044:	2303      	movs	r3, #3
 8007046:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007048:	2340      	movs	r3, #64	@ 0x40
 800704a:	2200      	movs	r2, #0
 800704c:	2100      	movs	r1, #0
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f001 fc61 	bl	8008916 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2240      	movs	r2, #64	@ 0x40
 8007060:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007064:	2340      	movs	r3, #64	@ 0x40
 8007066:	2200      	movs	r2, #0
 8007068:	2180      	movs	r1, #128	@ 0x80
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f001 fc53 	bl	8008916 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2240      	movs	r2, #64	@ 0x40
 800707a:	621a      	str	r2, [r3, #32]

  return ret;
 800707c:	7bfb      	ldrb	r3, [r7, #15]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007086:	b480      	push	{r7}
 8007088:	b083      	sub	sp, #12
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	460b      	mov	r3, r1
 8007090:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	78fa      	ldrb	r2, [r7, #3]
 8007096:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	d006      	beq.n	80070c8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2204      	movs	r2, #4
 80070cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d106      	bne.n	8007100 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b082      	sub	sp, #8
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b03      	cmp	r3, #3
 8007120:	d110      	bne.n	8007144 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00b      	beq.n	8007144 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007132:	69db      	ldr	r3, [r3, #28]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800713e:	69db      	ldr	r3, [r3, #28]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	460b      	mov	r3, r1
 8007158:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	32ae      	adds	r2, #174	@ 0xae
 8007164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800716c:	2303      	movs	r3, #3
 800716e:	e01c      	b.n	80071aa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b03      	cmp	r3, #3
 800717a:	d115      	bne.n	80071a8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	32ae      	adds	r2, #174	@ 0xae
 8007186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00b      	beq.n	80071a8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	32ae      	adds	r2, #174	@ 0xae
 800719a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	78fa      	ldrb	r2, [r7, #3]
 80071a2:	4611      	mov	r1, r2
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	460b      	mov	r3, r1
 80071bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	32ae      	adds	r2, #174	@ 0xae
 80071c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e01c      	b.n	800720e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d115      	bne.n	800720c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	32ae      	adds	r2, #174	@ 0xae
 80071ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00b      	beq.n	800720c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	32ae      	adds	r2, #174	@ 0xae
 80071fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007204:	78fa      	ldrb	r2, [r7, #3]
 8007206:	4611      	mov	r1, r2
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00e      	beq.n	8007268 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	6852      	ldr	r2, [r2, #4]
 8007256:	b2d2      	uxtb	r2, r2
 8007258:	4611      	mov	r1, r2
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	4798      	blx	r3
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d001      	beq.n	8007268 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007264:	2303      	movs	r3, #3
 8007266:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007268:	7bfb      	ldrb	r3, [r7, #15]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007272:	b480      	push	{r7}
 8007274:	b083      	sub	sp, #12
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	460b      	mov	r3, r1
 800727c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800727e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007280:	4618      	mov	r0, r3
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	460b      	mov	r3, r1
 8007296:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007298:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800729a:	4618      	mov	r0, r3
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b086      	sub	sp, #24
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	460b      	mov	r3, r1
 80072b0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	885b      	ldrh	r3, [r3, #2]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	7812      	ldrb	r2, [r2, #0]
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d91f      	bls.n	800730c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80072d2:	e013      	b.n	80072fc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80072d4:	f107 030a 	add.w	r3, r7, #10
 80072d8:	4619      	mov	r1, r3
 80072da:	6978      	ldr	r0, [r7, #20]
 80072dc:	f000 f81b 	bl	8007316 <USBD_GetNextDesc>
 80072e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	785b      	ldrb	r3, [r3, #1]
 80072e6:	2b05      	cmp	r3, #5
 80072e8:	d108      	bne.n	80072fc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	789b      	ldrb	r3, [r3, #2]
 80072f2:	78fa      	ldrb	r2, [r7, #3]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d008      	beq.n	800730a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80072f8:	2300      	movs	r3, #0
 80072fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	885b      	ldrh	r3, [r3, #2]
 8007300:	b29a      	uxth	r2, r3
 8007302:	897b      	ldrh	r3, [r7, #10]
 8007304:	429a      	cmp	r2, r3
 8007306:	d8e5      	bhi.n	80072d4 <USBD_GetEpDesc+0x2e>
 8007308:	e000      	b.n	800730c <USBD_GetEpDesc+0x66>
          break;
 800730a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800730c:	693b      	ldr	r3, [r7, #16]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007316:	b480      	push	{r7}
 8007318:	b085      	sub	sp, #20
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	7812      	ldrb	r2, [r2, #0]
 800732c:	4413      	add	r3, r2
 800732e:	b29a      	uxth	r2, r3
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	461a      	mov	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4413      	add	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007340:	68fb      	ldr	r3, [r7, #12]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800734e:	b480      	push	{r7}
 8007350:	b087      	sub	sp, #28
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	3301      	adds	r3, #1
 8007364:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800736c:	8a3b      	ldrh	r3, [r7, #16]
 800736e:	021b      	lsls	r3, r3, #8
 8007370:	b21a      	sxth	r2, r3
 8007372:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007376:	4313      	orrs	r3, r2
 8007378:	b21b      	sxth	r3, r3
 800737a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800737c:	89fb      	ldrh	r3, [r7, #14]
}
 800737e:	4618      	mov	r0, r3
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
	...

0800738c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073a2:	2b40      	cmp	r3, #64	@ 0x40
 80073a4:	d005      	beq.n	80073b2 <USBD_StdDevReq+0x26>
 80073a6:	2b40      	cmp	r3, #64	@ 0x40
 80073a8:	d857      	bhi.n	800745a <USBD_StdDevReq+0xce>
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00f      	beq.n	80073ce <USBD_StdDevReq+0x42>
 80073ae:	2b20      	cmp	r3, #32
 80073b0:	d153      	bne.n	800745a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	32ae      	adds	r2, #174	@ 0xae
 80073bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	4798      	blx	r3
 80073c8:	4603      	mov	r3, r0
 80073ca:	73fb      	strb	r3, [r7, #15]
      break;
 80073cc:	e04a      	b.n	8007464 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	785b      	ldrb	r3, [r3, #1]
 80073d2:	2b09      	cmp	r3, #9
 80073d4:	d83b      	bhi.n	800744e <USBD_StdDevReq+0xc2>
 80073d6:	a201      	add	r2, pc, #4	@ (adr r2, 80073dc <USBD_StdDevReq+0x50>)
 80073d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073dc:	08007431 	.word	0x08007431
 80073e0:	08007445 	.word	0x08007445
 80073e4:	0800744f 	.word	0x0800744f
 80073e8:	0800743b 	.word	0x0800743b
 80073ec:	0800744f 	.word	0x0800744f
 80073f0:	0800740f 	.word	0x0800740f
 80073f4:	08007405 	.word	0x08007405
 80073f8:	0800744f 	.word	0x0800744f
 80073fc:	08007427 	.word	0x08007427
 8007400:	08007419 	.word	0x08007419
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fa3c 	bl	8007884 <USBD_GetDescriptor>
          break;
 800740c:	e024      	b.n	8007458 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fbcb 	bl	8007bac <USBD_SetAddress>
          break;
 8007416:	e01f      	b.n	8007458 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fc0a 	bl	8007c34 <USBD_SetConfig>
 8007420:	4603      	mov	r3, r0
 8007422:	73fb      	strb	r3, [r7, #15]
          break;
 8007424:	e018      	b.n	8007458 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fcad 	bl	8007d88 <USBD_GetConfig>
          break;
 800742e:	e013      	b.n	8007458 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fcde 	bl	8007df4 <USBD_GetStatus>
          break;
 8007438:	e00e      	b.n	8007458 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fd0d 	bl	8007e5c <USBD_SetFeature>
          break;
 8007442:	e009      	b.n	8007458 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fd31 	bl	8007eae <USBD_ClrFeature>
          break;
 800744c:	e004      	b.n	8007458 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fd88 	bl	8007f66 <USBD_CtlError>
          break;
 8007456:	bf00      	nop
      }
      break;
 8007458:	e004      	b.n	8007464 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fd82 	bl	8007f66 <USBD_CtlError>
      break;
 8007462:	bf00      	nop
  }

  return ret;
 8007464:	7bfb      	ldrb	r3, [r7, #15]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop

08007470 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007486:	2b40      	cmp	r3, #64	@ 0x40
 8007488:	d005      	beq.n	8007496 <USBD_StdItfReq+0x26>
 800748a:	2b40      	cmp	r3, #64	@ 0x40
 800748c:	d852      	bhi.n	8007534 <USBD_StdItfReq+0xc4>
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <USBD_StdItfReq+0x26>
 8007492:	2b20      	cmp	r3, #32
 8007494:	d14e      	bne.n	8007534 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800749c:	b2db      	uxtb	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d840      	bhi.n	8007526 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	889b      	ldrh	r3, [r3, #4]
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d836      	bhi.n	800751c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	889b      	ldrh	r3, [r3, #4]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff fedb 	bl	8007272 <USBD_CoreFindIF>
 80074bc:	4603      	mov	r3, r0
 80074be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
 80074c2:	2bff      	cmp	r3, #255	@ 0xff
 80074c4:	d01d      	beq.n	8007502 <USBD_StdItfReq+0x92>
 80074c6:	7bbb      	ldrb	r3, [r7, #14]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d11a      	bne.n	8007502 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80074cc:	7bba      	ldrb	r2, [r7, #14]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	32ae      	adds	r2, #174	@ 0xae
 80074d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00f      	beq.n	80074fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80074dc:	7bba      	ldrb	r2, [r7, #14]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80074e4:	7bba      	ldrb	r2, [r7, #14]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	32ae      	adds	r2, #174	@ 0xae
 80074ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	4798      	blx	r3
 80074f6:	4603      	mov	r3, r0
 80074f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80074fa:	e004      	b.n	8007506 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80074fc:	2303      	movs	r3, #3
 80074fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007500:	e001      	b.n	8007506 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007502:	2303      	movs	r3, #3
 8007504:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	88db      	ldrh	r3, [r3, #6]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d110      	bne.n	8007530 <USBD_StdItfReq+0xc0>
 800750e:	7bfb      	ldrb	r3, [r7, #15]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10d      	bne.n	8007530 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fdfd 	bl	8008114 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800751a:	e009      	b.n	8007530 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fd21 	bl	8007f66 <USBD_CtlError>
          break;
 8007524:	e004      	b.n	8007530 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fd1c 	bl	8007f66 <USBD_CtlError>
          break;
 800752e:	e000      	b.n	8007532 <USBD_StdItfReq+0xc2>
          break;
 8007530:	bf00      	nop
      }
      break;
 8007532:	e004      	b.n	800753e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fd15 	bl	8007f66 <USBD_CtlError>
      break;
 800753c:	bf00      	nop
  }

  return ret;
 800753e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	889b      	ldrh	r3, [r3, #4]
 800755a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007564:	2b40      	cmp	r3, #64	@ 0x40
 8007566:	d007      	beq.n	8007578 <USBD_StdEPReq+0x30>
 8007568:	2b40      	cmp	r3, #64	@ 0x40
 800756a:	f200 817f 	bhi.w	800786c <USBD_StdEPReq+0x324>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d02a      	beq.n	80075c8 <USBD_StdEPReq+0x80>
 8007572:	2b20      	cmp	r3, #32
 8007574:	f040 817a 	bne.w	800786c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7ff fe85 	bl	800728c <USBD_CoreFindEP>
 8007582:	4603      	mov	r3, r0
 8007584:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007586:	7b7b      	ldrb	r3, [r7, #13]
 8007588:	2bff      	cmp	r3, #255	@ 0xff
 800758a:	f000 8174 	beq.w	8007876 <USBD_StdEPReq+0x32e>
 800758e:	7b7b      	ldrb	r3, [r7, #13]
 8007590:	2b00      	cmp	r3, #0
 8007592:	f040 8170 	bne.w	8007876 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007596:	7b7a      	ldrb	r2, [r7, #13]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800759e:	7b7a      	ldrb	r2, [r7, #13]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	32ae      	adds	r2, #174	@ 0xae
 80075a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 8163 	beq.w	8007876 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80075b0:	7b7a      	ldrb	r2, [r7, #13]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	32ae      	adds	r2, #174	@ 0xae
 80075b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	4798      	blx	r3
 80075c2:	4603      	mov	r3, r0
 80075c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80075c6:	e156      	b.n	8007876 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	785b      	ldrb	r3, [r3, #1]
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d008      	beq.n	80075e2 <USBD_StdEPReq+0x9a>
 80075d0:	2b03      	cmp	r3, #3
 80075d2:	f300 8145 	bgt.w	8007860 <USBD_StdEPReq+0x318>
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 809b 	beq.w	8007712 <USBD_StdEPReq+0x1ca>
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d03c      	beq.n	800765a <USBD_StdEPReq+0x112>
 80075e0:	e13e      	b.n	8007860 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d002      	beq.n	80075f4 <USBD_StdEPReq+0xac>
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	d016      	beq.n	8007620 <USBD_StdEPReq+0xd8>
 80075f2:	e02c      	b.n	800764e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00d      	beq.n	8007616 <USBD_StdEPReq+0xce>
 80075fa:	7bbb      	ldrb	r3, [r7, #14]
 80075fc:	2b80      	cmp	r3, #128	@ 0x80
 80075fe:	d00a      	beq.n	8007616 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007600:	7bbb      	ldrb	r3, [r7, #14]
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f001 f9cb 	bl	80089a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800760a:	2180      	movs	r1, #128	@ 0x80
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f001 f9c7 	bl	80089a0 <USBD_LL_StallEP>
 8007612:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007614:	e020      	b.n	8007658 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007616:	6839      	ldr	r1, [r7, #0]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fca4 	bl	8007f66 <USBD_CtlError>
              break;
 800761e:	e01b      	b.n	8007658 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	885b      	ldrh	r3, [r3, #2]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10e      	bne.n	8007646 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007628:	7bbb      	ldrb	r3, [r7, #14]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00b      	beq.n	8007646 <USBD_StdEPReq+0xfe>
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	2b80      	cmp	r3, #128	@ 0x80
 8007632:	d008      	beq.n	8007646 <USBD_StdEPReq+0xfe>
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	88db      	ldrh	r3, [r3, #6]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d104      	bne.n	8007646 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800763c:	7bbb      	ldrb	r3, [r7, #14]
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 f9ad 	bl	80089a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fd64 	bl	8008114 <USBD_CtlSendStatus>

              break;
 800764c:	e004      	b.n	8007658 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fc88 	bl	8007f66 <USBD_CtlError>
              break;
 8007656:	bf00      	nop
          }
          break;
 8007658:	e107      	b.n	800786a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b02      	cmp	r3, #2
 8007664:	d002      	beq.n	800766c <USBD_StdEPReq+0x124>
 8007666:	2b03      	cmp	r3, #3
 8007668:	d016      	beq.n	8007698 <USBD_StdEPReq+0x150>
 800766a:	e04b      	b.n	8007704 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00d      	beq.n	800768e <USBD_StdEPReq+0x146>
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	2b80      	cmp	r3, #128	@ 0x80
 8007676:	d00a      	beq.n	800768e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007678:	7bbb      	ldrb	r3, [r7, #14]
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f001 f98f 	bl	80089a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007682:	2180      	movs	r1, #128	@ 0x80
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 f98b 	bl	80089a0 <USBD_LL_StallEP>
 800768a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800768c:	e040      	b.n	8007710 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fc68 	bl	8007f66 <USBD_CtlError>
              break;
 8007696:	e03b      	b.n	8007710 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	885b      	ldrh	r3, [r3, #2]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d136      	bne.n	800770e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
 80076a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d004      	beq.n	80076b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80076aa:	7bbb      	ldrb	r3, [r7, #14]
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 f995 	bl	80089de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fd2d 	bl	8008114 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
 80076bc:	4619      	mov	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7ff fde4 	bl	800728c <USBD_CoreFindEP>
 80076c4:	4603      	mov	r3, r0
 80076c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076c8:	7b7b      	ldrb	r3, [r7, #13]
 80076ca:	2bff      	cmp	r3, #255	@ 0xff
 80076cc:	d01f      	beq.n	800770e <USBD_StdEPReq+0x1c6>
 80076ce:	7b7b      	ldrb	r3, [r7, #13]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d11c      	bne.n	800770e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80076d4:	7b7a      	ldrb	r2, [r7, #13]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80076dc:	7b7a      	ldrb	r2, [r7, #13]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	32ae      	adds	r2, #174	@ 0xae
 80076e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d010      	beq.n	800770e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80076ec:	7b7a      	ldrb	r2, [r7, #13]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	32ae      	adds	r2, #174	@ 0xae
 80076f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	4798      	blx	r3
 80076fe:	4603      	mov	r3, r0
 8007700:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007702:	e004      	b.n	800770e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fc2d 	bl	8007f66 <USBD_CtlError>
              break;
 800770c:	e000      	b.n	8007710 <USBD_StdEPReq+0x1c8>
              break;
 800770e:	bf00      	nop
          }
          break;
 8007710:	e0ab      	b.n	800786a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b02      	cmp	r3, #2
 800771c:	d002      	beq.n	8007724 <USBD_StdEPReq+0x1dc>
 800771e:	2b03      	cmp	r3, #3
 8007720:	d032      	beq.n	8007788 <USBD_StdEPReq+0x240>
 8007722:	e097      	b.n	8007854 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d007      	beq.n	800773a <USBD_StdEPReq+0x1f2>
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	2b80      	cmp	r3, #128	@ 0x80
 800772e:	d004      	beq.n	800773a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fc17 	bl	8007f66 <USBD_CtlError>
                break;
 8007738:	e091      	b.n	800785e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800773a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800773e:	2b00      	cmp	r3, #0
 8007740:	da0b      	bge.n	800775a <USBD_StdEPReq+0x212>
 8007742:	7bbb      	ldrb	r3, [r7, #14]
 8007744:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007748:	4613      	mov	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4413      	add	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	3310      	adds	r3, #16
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	4413      	add	r3, r2
 8007756:	3304      	adds	r3, #4
 8007758:	e00b      	b.n	8007772 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007760:	4613      	mov	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	4413      	add	r3, r2
 8007770:	3304      	adds	r3, #4
 8007772:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2202      	movs	r2, #2
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fc6d 	bl	8008060 <USBD_CtlSendData>
              break;
 8007786:	e06a      	b.n	800785e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800778c:	2b00      	cmp	r3, #0
 800778e:	da11      	bge.n	80077b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	f003 020f 	and.w	r2, r3, #15
 8007796:	6879      	ldr	r1, [r7, #4]
 8007798:	4613      	mov	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	440b      	add	r3, r1
 80077a2:	3324      	adds	r3, #36	@ 0x24
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d117      	bne.n	80077da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fbda 	bl	8007f66 <USBD_CtlError>
                  break;
 80077b2:	e054      	b.n	800785e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	f003 020f 	and.w	r2, r3, #15
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	4613      	mov	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	440b      	add	r3, r1
 80077c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d104      	bne.n	80077da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fbc7 	bl	8007f66 <USBD_CtlError>
                  break;
 80077d8:	e041      	b.n	800785e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	da0b      	bge.n	80077fa <USBD_StdEPReq+0x2b2>
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
 80077e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077e8:	4613      	mov	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	3310      	adds	r3, #16
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	4413      	add	r3, r2
 80077f6:	3304      	adds	r3, #4
 80077f8:	e00b      	b.n	8007812 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
 80077fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007800:	4613      	mov	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	4413      	add	r3, r2
 8007810:	3304      	adds	r3, #4
 8007812:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007814:	7bbb      	ldrb	r3, [r7, #14]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <USBD_StdEPReq+0x2d8>
 800781a:	7bbb      	ldrb	r3, [r7, #14]
 800781c:	2b80      	cmp	r3, #128	@ 0x80
 800781e:	d103      	bne.n	8007828 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	e00e      	b.n	8007846 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007828:	7bbb      	ldrb	r3, [r7, #14]
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 f8f5 	bl	8008a1c <USBD_LL_IsStallEP>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2201      	movs	r2, #1
 800783c:	601a      	str	r2, [r3, #0]
 800783e:	e002      	b.n	8007846 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2202      	movs	r2, #2
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fc07 	bl	8008060 <USBD_CtlSendData>
              break;
 8007852:	e004      	b.n	800785e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fb85 	bl	8007f66 <USBD_CtlError>
              break;
 800785c:	bf00      	nop
          }
          break;
 800785e:	e004      	b.n	800786a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fb7f 	bl	8007f66 <USBD_CtlError>
          break;
 8007868:	bf00      	nop
      }
      break;
 800786a:	e005      	b.n	8007878 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800786c:	6839      	ldr	r1, [r7, #0]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fb79 	bl	8007f66 <USBD_CtlError>
      break;
 8007874:	e000      	b.n	8007878 <USBD_StdEPReq+0x330>
      break;
 8007876:	bf00      	nop
  }

  return ret;
 8007878:	7bfb      	ldrb	r3, [r7, #15]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007892:	2300      	movs	r3, #0
 8007894:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007896:	2300      	movs	r3, #0
 8007898:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	885b      	ldrh	r3, [r3, #2]
 800789e:	0a1b      	lsrs	r3, r3, #8
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	3b01      	subs	r3, #1
 80078a4:	2b0e      	cmp	r3, #14
 80078a6:	f200 8152 	bhi.w	8007b4e <USBD_GetDescriptor+0x2ca>
 80078aa:	a201      	add	r2, pc, #4	@ (adr r2, 80078b0 <USBD_GetDescriptor+0x2c>)
 80078ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b0:	08007921 	.word	0x08007921
 80078b4:	08007939 	.word	0x08007939
 80078b8:	08007979 	.word	0x08007979
 80078bc:	08007b4f 	.word	0x08007b4f
 80078c0:	08007b4f 	.word	0x08007b4f
 80078c4:	08007aef 	.word	0x08007aef
 80078c8:	08007b1b 	.word	0x08007b1b
 80078cc:	08007b4f 	.word	0x08007b4f
 80078d0:	08007b4f 	.word	0x08007b4f
 80078d4:	08007b4f 	.word	0x08007b4f
 80078d8:	08007b4f 	.word	0x08007b4f
 80078dc:	08007b4f 	.word	0x08007b4f
 80078e0:	08007b4f 	.word	0x08007b4f
 80078e4:	08007b4f 	.word	0x08007b4f
 80078e8:	080078ed 	.word	0x080078ed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00b      	beq.n	8007910 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	7c12      	ldrb	r2, [r2, #16]
 8007904:	f107 0108 	add.w	r1, r7, #8
 8007908:	4610      	mov	r0, r2
 800790a:	4798      	blx	r3
 800790c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800790e:	e126      	b.n	8007b5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fb27 	bl	8007f66 <USBD_CtlError>
        err++;
 8007918:	7afb      	ldrb	r3, [r7, #11]
 800791a:	3301      	adds	r3, #1
 800791c:	72fb      	strb	r3, [r7, #11]
      break;
 800791e:	e11e      	b.n	8007b5e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	7c12      	ldrb	r2, [r2, #16]
 800792c:	f107 0108 	add.w	r1, r7, #8
 8007930:	4610      	mov	r0, r2
 8007932:	4798      	blx	r3
 8007934:	60f8      	str	r0, [r7, #12]
      break;
 8007936:	e112      	b.n	8007b5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	7c1b      	ldrb	r3, [r3, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10d      	bne.n	800795c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007948:	f107 0208 	add.w	r2, r7, #8
 800794c:	4610      	mov	r0, r2
 800794e:	4798      	blx	r3
 8007950:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	3301      	adds	r3, #1
 8007956:	2202      	movs	r2, #2
 8007958:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800795a:	e100      	b.n	8007b5e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007964:	f107 0208 	add.w	r2, r7, #8
 8007968:	4610      	mov	r0, r2
 800796a:	4798      	blx	r3
 800796c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3301      	adds	r3, #1
 8007972:	2202      	movs	r2, #2
 8007974:	701a      	strb	r2, [r3, #0]
      break;
 8007976:	e0f2      	b.n	8007b5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	885b      	ldrh	r3, [r3, #2]
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b05      	cmp	r3, #5
 8007980:	f200 80ac 	bhi.w	8007adc <USBD_GetDescriptor+0x258>
 8007984:	a201      	add	r2, pc, #4	@ (adr r2, 800798c <USBD_GetDescriptor+0x108>)
 8007986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798a:	bf00      	nop
 800798c:	080079a5 	.word	0x080079a5
 8007990:	080079d9 	.word	0x080079d9
 8007994:	08007a0d 	.word	0x08007a0d
 8007998:	08007a41 	.word	0x08007a41
 800799c:	08007a75 	.word	0x08007a75
 80079a0:	08007aa9 	.word	0x08007aa9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	7c12      	ldrb	r2, [r2, #16]
 80079bc:	f107 0108 	add.w	r1, r7, #8
 80079c0:	4610      	mov	r0, r2
 80079c2:	4798      	blx	r3
 80079c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079c6:	e091      	b.n	8007aec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 facb 	bl	8007f66 <USBD_CtlError>
            err++;
 80079d0:	7afb      	ldrb	r3, [r7, #11]
 80079d2:	3301      	adds	r3, #1
 80079d4:	72fb      	strb	r3, [r7, #11]
          break;
 80079d6:	e089      	b.n	8007aec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	7c12      	ldrb	r2, [r2, #16]
 80079f0:	f107 0108 	add.w	r1, r7, #8
 80079f4:	4610      	mov	r0, r2
 80079f6:	4798      	blx	r3
 80079f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079fa:	e077      	b.n	8007aec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fab1 	bl	8007f66 <USBD_CtlError>
            err++;
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	3301      	adds	r3, #1
 8007a08:	72fb      	strb	r3, [r7, #11]
          break;
 8007a0a:	e06f      	b.n	8007aec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	7c12      	ldrb	r2, [r2, #16]
 8007a24:	f107 0108 	add.w	r1, r7, #8
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4798      	blx	r3
 8007a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a2e:	e05d      	b.n	8007aec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fa97 	bl	8007f66 <USBD_CtlError>
            err++;
 8007a38:	7afb      	ldrb	r3, [r7, #11]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a3e:	e055      	b.n	8007aec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00b      	beq.n	8007a64 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	7c12      	ldrb	r2, [r2, #16]
 8007a58:	f107 0108 	add.w	r1, r7, #8
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	4798      	blx	r3
 8007a60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a62:	e043      	b.n	8007aec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fa7d 	bl	8007f66 <USBD_CtlError>
            err++;
 8007a6c:	7afb      	ldrb	r3, [r7, #11]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	72fb      	strb	r3, [r7, #11]
          break;
 8007a72:	e03b      	b.n	8007aec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00b      	beq.n	8007a98 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a86:	695b      	ldr	r3, [r3, #20]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	7c12      	ldrb	r2, [r2, #16]
 8007a8c:	f107 0108 	add.w	r1, r7, #8
 8007a90:	4610      	mov	r0, r2
 8007a92:	4798      	blx	r3
 8007a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a96:	e029      	b.n	8007aec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fa63 	bl	8007f66 <USBD_CtlError>
            err++;
 8007aa0:	7afb      	ldrb	r3, [r7, #11]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8007aa6:	e021      	b.n	8007aec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00b      	beq.n	8007acc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	7c12      	ldrb	r2, [r2, #16]
 8007ac0:	f107 0108 	add.w	r1, r7, #8
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	4798      	blx	r3
 8007ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aca:	e00f      	b.n	8007aec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fa49 	bl	8007f66 <USBD_CtlError>
            err++;
 8007ad4:	7afb      	ldrb	r3, [r7, #11]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8007ada:	e007      	b.n	8007aec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fa41 	bl	8007f66 <USBD_CtlError>
          err++;
 8007ae4:	7afb      	ldrb	r3, [r7, #11]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007aea:	bf00      	nop
      }
      break;
 8007aec:	e037      	b.n	8007b5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	7c1b      	ldrb	r3, [r3, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d109      	bne.n	8007b0a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007afe:	f107 0208 	add.w	r2, r7, #8
 8007b02:	4610      	mov	r0, r2
 8007b04:	4798      	blx	r3
 8007b06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b08:	e029      	b.n	8007b5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fa2a 	bl	8007f66 <USBD_CtlError>
        err++;
 8007b12:	7afb      	ldrb	r3, [r7, #11]
 8007b14:	3301      	adds	r3, #1
 8007b16:	72fb      	strb	r3, [r7, #11]
      break;
 8007b18:	e021      	b.n	8007b5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	7c1b      	ldrb	r3, [r3, #16]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10d      	bne.n	8007b3e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b2a:	f107 0208 	add.w	r2, r7, #8
 8007b2e:	4610      	mov	r0, r2
 8007b30:	4798      	blx	r3
 8007b32:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3301      	adds	r3, #1
 8007b38:	2207      	movs	r2, #7
 8007b3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b3c:	e00f      	b.n	8007b5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fa10 	bl	8007f66 <USBD_CtlError>
        err++;
 8007b46:	7afb      	ldrb	r3, [r7, #11]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007b4c:	e007      	b.n	8007b5e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fa08 	bl	8007f66 <USBD_CtlError>
      err++;
 8007b56:	7afb      	ldrb	r3, [r7, #11]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	72fb      	strb	r3, [r7, #11]
      break;
 8007b5c:	bf00      	nop
  }

  if (err != 0U)
 8007b5e:	7afb      	ldrb	r3, [r7, #11]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d11e      	bne.n	8007ba2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	88db      	ldrh	r3, [r3, #6]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d016      	beq.n	8007b9a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007b6c:	893b      	ldrh	r3, [r7, #8]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00e      	beq.n	8007b90 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	88da      	ldrh	r2, [r3, #6]
 8007b76:	893b      	ldrh	r3, [r7, #8]
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	bf28      	it	cs
 8007b7c:	4613      	movcs	r3, r2
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b82:	893b      	ldrh	r3, [r7, #8]
 8007b84:	461a      	mov	r2, r3
 8007b86:	68f9      	ldr	r1, [r7, #12]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fa69 	bl	8008060 <USBD_CtlSendData>
 8007b8e:	e009      	b.n	8007ba4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f9e7 	bl	8007f66 <USBD_CtlError>
 8007b98:	e004      	b.n	8007ba4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 faba 	bl	8008114 <USBD_CtlSendStatus>
 8007ba0:	e000      	b.n	8007ba4 <USBD_GetDescriptor+0x320>
    return;
 8007ba2:	bf00      	nop
  }
}
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop

08007bac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	889b      	ldrh	r3, [r3, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d131      	bne.n	8007c22 <USBD_SetAddress+0x76>
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	88db      	ldrh	r3, [r3, #6]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d12d      	bne.n	8007c22 <USBD_SetAddress+0x76>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	885b      	ldrh	r3, [r3, #2]
 8007bca:	2b7f      	cmp	r3, #127	@ 0x7f
 8007bcc:	d829      	bhi.n	8007c22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	885b      	ldrh	r3, [r3, #2]
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	d104      	bne.n	8007bf0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f9bc 	bl	8007f66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bee:	e01d      	b.n	8007c2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	7bfa      	ldrb	r2, [r7, #15]
 8007bf4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 ff39 	bl	8008a74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fa86 	bl	8008114 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d004      	beq.n	8007c18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2202      	movs	r2, #2
 8007c12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c16:	e009      	b.n	8007c2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c20:	e004      	b.n	8007c2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f99e 	bl	8007f66 <USBD_CtlError>
  }
}
 8007c2a:	bf00      	nop
 8007c2c:	bf00      	nop
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	885b      	ldrh	r3, [r3, #2]
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	4b4e      	ldr	r3, [pc, #312]	@ (8007d84 <USBD_SetConfig+0x150>)
 8007c4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c4c:	4b4d      	ldr	r3, [pc, #308]	@ (8007d84 <USBD_SetConfig+0x150>)
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d905      	bls.n	8007c60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f985 	bl	8007f66 <USBD_CtlError>
    return USBD_FAIL;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e08c      	b.n	8007d7a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d002      	beq.n	8007c72 <USBD_SetConfig+0x3e>
 8007c6c:	2b03      	cmp	r3, #3
 8007c6e:	d029      	beq.n	8007cc4 <USBD_SetConfig+0x90>
 8007c70:	e075      	b.n	8007d5e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007c72:	4b44      	ldr	r3, [pc, #272]	@ (8007d84 <USBD_SetConfig+0x150>)
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d020      	beq.n	8007cbc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007c7a:	4b42      	ldr	r3, [pc, #264]	@ (8007d84 <USBD_SetConfig+0x150>)
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c84:	4b3f      	ldr	r3, [pc, #252]	@ (8007d84 <USBD_SetConfig+0x150>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7fe ffb9 	bl	8006c02 <USBD_SetClassConfig>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d008      	beq.n	8007cac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f962 	bl	8007f66 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2202      	movs	r2, #2
 8007ca6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007caa:	e065      	b.n	8007d78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fa31 	bl	8008114 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2203      	movs	r2, #3
 8007cb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007cba:	e05d      	b.n	8007d78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fa29 	bl	8008114 <USBD_CtlSendStatus>
      break;
 8007cc2:	e059      	b.n	8007d78 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8007d84 <USBD_SetConfig+0x150>)
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d112      	bne.n	8007cf2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8007d84 <USBD_SetConfig+0x150>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007cde:	4b29      	ldr	r3, [pc, #164]	@ (8007d84 <USBD_SetConfig+0x150>)
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7fe ffa8 	bl	8006c3a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fa12 	bl	8008114 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007cf0:	e042      	b.n	8007d78 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007cf2:	4b24      	ldr	r3, [pc, #144]	@ (8007d84 <USBD_SetConfig+0x150>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d02a      	beq.n	8007d56 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f7fe ff96 	bl	8006c3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8007d84 <USBD_SetConfig+0x150>)
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d18:	4b1a      	ldr	r3, [pc, #104]	@ (8007d84 <USBD_SetConfig+0x150>)
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7fe ff6f 	bl	8006c02 <USBD_SetClassConfig>
 8007d24:	4603      	mov	r3, r0
 8007d26:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00f      	beq.n	8007d4e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f918 	bl	8007f66 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7fe ff7b 	bl	8006c3a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2202      	movs	r2, #2
 8007d48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007d4c:	e014      	b.n	8007d78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f9e0 	bl	8008114 <USBD_CtlSendStatus>
      break;
 8007d54:	e010      	b.n	8007d78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f9dc 	bl	8008114 <USBD_CtlSendStatus>
      break;
 8007d5c:	e00c      	b.n	8007d78 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f900 	bl	8007f66 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d66:	4b07      	ldr	r3, [pc, #28]	@ (8007d84 <USBD_SetConfig+0x150>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7fe ff64 	bl	8006c3a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007d72:	2303      	movs	r3, #3
 8007d74:	73fb      	strb	r3, [r7, #15]
      break;
 8007d76:	bf00      	nop
  }

  return ret;
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20000174 	.word	0x20000174

08007d88 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	88db      	ldrh	r3, [r3, #6]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d004      	beq.n	8007da4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f8e2 	bl	8007f66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007da2:	e023      	b.n	8007dec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	dc02      	bgt.n	8007db6 <USBD_GetConfig+0x2e>
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	dc03      	bgt.n	8007dbc <USBD_GetConfig+0x34>
 8007db4:	e015      	b.n	8007de2 <USBD_GetConfig+0x5a>
 8007db6:	2b03      	cmp	r3, #3
 8007db8:	d00b      	beq.n	8007dd2 <USBD_GetConfig+0x4a>
 8007dba:	e012      	b.n	8007de2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	3308      	adds	r3, #8
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	4619      	mov	r1, r3
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f948 	bl	8008060 <USBD_CtlSendData>
        break;
 8007dd0:	e00c      	b.n	8007dec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f940 	bl	8008060 <USBD_CtlSendData>
        break;
 8007de0:	e004      	b.n	8007dec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f8be 	bl	8007f66 <USBD_CtlError>
        break;
 8007dea:	bf00      	nop
}
 8007dec:	bf00      	nop
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	3b01      	subs	r3, #1
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d81e      	bhi.n	8007e4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	88db      	ldrh	r3, [r3, #6]
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d004      	beq.n	8007e1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f8a5 	bl	8007f66 <USBD_CtlError>
        break;
 8007e1c:	e01a      	b.n	8007e54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d005      	beq.n	8007e3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f043 0202 	orr.w	r2, r3, #2
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	330c      	adds	r3, #12
 8007e3e:	2202      	movs	r2, #2
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f90c 	bl	8008060 <USBD_CtlSendData>
      break;
 8007e48:	e004      	b.n	8007e54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f88a 	bl	8007f66 <USBD_CtlError>
      break;
 8007e52:	bf00      	nop
  }
}
 8007e54:	bf00      	nop
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	885b      	ldrh	r3, [r3, #2]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d107      	bne.n	8007e7e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f94c 	bl	8008114 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007e7c:	e013      	b.n	8007ea6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	885b      	ldrh	r3, [r3, #2]
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d10b      	bne.n	8007e9e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	889b      	ldrh	r3, [r3, #4]
 8007e8a:	0a1b      	lsrs	r3, r3, #8
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f93c 	bl	8008114 <USBD_CtlSendStatus>
}
 8007e9c:	e003      	b.n	8007ea6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f860 	bl	8007f66 <USBD_CtlError>
}
 8007ea6:	bf00      	nop
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b082      	sub	sp, #8
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d80b      	bhi.n	8007ede <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	885b      	ldrh	r3, [r3, #2]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d10c      	bne.n	8007ee8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f91c 	bl	8008114 <USBD_CtlSendStatus>
      }
      break;
 8007edc:	e004      	b.n	8007ee8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f840 	bl	8007f66 <USBD_CtlError>
      break;
 8007ee6:	e000      	b.n	8007eea <USBD_ClrFeature+0x3c>
      break;
 8007ee8:	bf00      	nop
  }
}
 8007eea:	bf00      	nop
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	781a      	ldrb	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	781a      	ldrb	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f7ff fa16 	bl	800734e <SWAPBYTE>
 8007f22:	4603      	mov	r3, r0
 8007f24:	461a      	mov	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3301      	adds	r3, #1
 8007f34:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f7ff fa09 	bl	800734e <SWAPBYTE>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	461a      	mov	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	3301      	adds	r3, #1
 8007f48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f7ff f9fc 	bl	800734e <SWAPBYTE>
 8007f56:	4603      	mov	r3, r0
 8007f58:	461a      	mov	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	80da      	strh	r2, [r3, #6]
}
 8007f5e:	bf00      	nop
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b082      	sub	sp, #8
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f70:	2180      	movs	r1, #128	@ 0x80
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fd14 	bl	80089a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007f78:	2100      	movs	r1, #0
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fd10 	bl	80089a0 <USBD_LL_StallEP>
}
 8007f80:	bf00      	nop
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f94:	2300      	movs	r3, #0
 8007f96:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d042      	beq.n	8008024 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007fa2:	6938      	ldr	r0, [r7, #16]
 8007fa4:	f000 f842 	bl	800802c <USBD_GetLen>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	3301      	adds	r3, #1
 8007fac:	005b      	lsls	r3, r3, #1
 8007fae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fb2:	d808      	bhi.n	8007fc6 <USBD_GetString+0x3e>
 8007fb4:	6938      	ldr	r0, [r7, #16]
 8007fb6:	f000 f839 	bl	800802c <USBD_GetLen>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	005b      	lsls	r3, r3, #1
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	e001      	b.n	8007fca <USBD_GetString+0x42>
 8007fc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007fce:	7dfb      	ldrb	r3, [r7, #23]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	7812      	ldrb	r2, [r2, #0]
 8007fd8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007fda:	7dfb      	ldrb	r3, [r7, #23]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	2203      	movs	r2, #3
 8007fe8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
 8007fec:	3301      	adds	r3, #1
 8007fee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ff0:	e013      	b.n	800801a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	7812      	ldrb	r2, [r2, #0]
 8007ffc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	3301      	adds	r3, #1
 8008002:	613b      	str	r3, [r7, #16]
    idx++;
 8008004:	7dfb      	ldrb	r3, [r7, #23]
 8008006:	3301      	adds	r3, #1
 8008008:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800800a:	7dfb      	ldrb	r3, [r7, #23]
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	4413      	add	r3, r2
 8008010:	2200      	movs	r2, #0
 8008012:	701a      	strb	r2, [r3, #0]
    idx++;
 8008014:	7dfb      	ldrb	r3, [r7, #23]
 8008016:	3301      	adds	r3, #1
 8008018:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1e7      	bne.n	8007ff2 <USBD_GetString+0x6a>
 8008022:	e000      	b.n	8008026 <USBD_GetString+0x9e>
    return;
 8008024:	bf00      	nop
  }
}
 8008026:	3718      	adds	r7, #24
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008034:	2300      	movs	r3, #0
 8008036:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800803c:	e005      	b.n	800804a <USBD_GetLen+0x1e>
  {
    len++;
 800803e:	7bfb      	ldrb	r3, [r7, #15]
 8008040:	3301      	adds	r3, #1
 8008042:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	3301      	adds	r3, #1
 8008048:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1f5      	bne.n	800803e <USBD_GetLen+0x12>
  }

  return len;
 8008052:	7bfb      	ldrb	r3, [r7, #15]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2202      	movs	r2, #2
 8008070:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	2100      	movs	r1, #0
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f000 fd13 	bl	8008ab2 <USBD_LL_Transmit>

  return USBD_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b084      	sub	sp, #16
 800809a:	af00      	add	r7, sp, #0
 800809c:	60f8      	str	r0, [r7, #12]
 800809e:	60b9      	str	r1, [r7, #8]
 80080a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	2100      	movs	r1, #0
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f000 fd02 	bl	8008ab2 <USBD_LL_Transmit>

  return USBD_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2203      	movs	r2, #3
 80080c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	2100      	movs	r1, #0
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 fd06 	bl	8008af4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	2100      	movs	r1, #0
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f000 fcf5 	bl	8008af4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2204      	movs	r2, #4
 8008120:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008124:	2300      	movs	r3, #0
 8008126:	2200      	movs	r2, #0
 8008128:	2100      	movs	r1, #0
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fcc1 	bl	8008ab2 <USBD_LL_Transmit>

  return USBD_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b082      	sub	sp, #8
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2205      	movs	r2, #5
 8008146:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800814a:	2300      	movs	r3, #0
 800814c:	2200      	movs	r2, #0
 800814e:	2100      	movs	r1, #0
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fccf 	bl	8008af4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008164:	2200      	movs	r2, #0
 8008166:	4912      	ldr	r1, [pc, #72]	@ (80081b0 <MX_USB_DEVICE_Init+0x50>)
 8008168:	4812      	ldr	r0, [pc, #72]	@ (80081b4 <MX_USB_DEVICE_Init+0x54>)
 800816a:	f7fe fccd 	bl	8006b08 <USBD_Init>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d001      	beq.n	8008178 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008174:	f7f8 fbc4 	bl	8000900 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008178:	490f      	ldr	r1, [pc, #60]	@ (80081b8 <MX_USB_DEVICE_Init+0x58>)
 800817a:	480e      	ldr	r0, [pc, #56]	@ (80081b4 <MX_USB_DEVICE_Init+0x54>)
 800817c:	f7fe fcf4 	bl	8006b68 <USBD_RegisterClass>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008186:	f7f8 fbbb 	bl	8000900 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800818a:	490c      	ldr	r1, [pc, #48]	@ (80081bc <MX_USB_DEVICE_Init+0x5c>)
 800818c:	4809      	ldr	r0, [pc, #36]	@ (80081b4 <MX_USB_DEVICE_Init+0x54>)
 800818e:	f7fe fbeb 	bl	8006968 <USBD_CDC_RegisterInterface>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008198:	f7f8 fbb2 	bl	8000900 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800819c:	4805      	ldr	r0, [pc, #20]	@ (80081b4 <MX_USB_DEVICE_Init+0x54>)
 800819e:	f7fe fd19 	bl	8006bd4 <USBD_Start>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80081a8:	f7f8 fbaa 	bl	8000900 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80081ac:	bf00      	nop
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	200000ac 	.word	0x200000ac
 80081b4:	20000178 	.word	0x20000178
 80081b8:	20000018 	.word	0x20000018
 80081bc:	20000098 	.word	0x20000098

080081c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80081c4:	2200      	movs	r2, #0
 80081c6:	4905      	ldr	r1, [pc, #20]	@ (80081dc <CDC_Init_FS+0x1c>)
 80081c8:	4805      	ldr	r0, [pc, #20]	@ (80081e0 <CDC_Init_FS+0x20>)
 80081ca:	f7fe fbe7 	bl	800699c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80081ce:	4905      	ldr	r1, [pc, #20]	@ (80081e4 <CDC_Init_FS+0x24>)
 80081d0:	4803      	ldr	r0, [pc, #12]	@ (80081e0 <CDC_Init_FS+0x20>)
 80081d2:	f7fe fc05 	bl	80069e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80081d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80081d8:	4618      	mov	r0, r3
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	20000c54 	.word	0x20000c54
 80081e0:	20000178 	.word	0x20000178
 80081e4:	20000454 	.word	0x20000454

080081e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80081e8:	b480      	push	{r7}
 80081ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80081ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	6039      	str	r1, [r7, #0]
 8008202:	71fb      	strb	r3, [r7, #7]
 8008204:	4613      	mov	r3, r2
 8008206:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	2b23      	cmp	r3, #35	@ 0x23
 800820c:	d84a      	bhi.n	80082a4 <CDC_Control_FS+0xac>
 800820e:	a201      	add	r2, pc, #4	@ (adr r2, 8008214 <CDC_Control_FS+0x1c>)
 8008210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008214:	080082a5 	.word	0x080082a5
 8008218:	080082a5 	.word	0x080082a5
 800821c:	080082a5 	.word	0x080082a5
 8008220:	080082a5 	.word	0x080082a5
 8008224:	080082a5 	.word	0x080082a5
 8008228:	080082a5 	.word	0x080082a5
 800822c:	080082a5 	.word	0x080082a5
 8008230:	080082a5 	.word	0x080082a5
 8008234:	080082a5 	.word	0x080082a5
 8008238:	080082a5 	.word	0x080082a5
 800823c:	080082a5 	.word	0x080082a5
 8008240:	080082a5 	.word	0x080082a5
 8008244:	080082a5 	.word	0x080082a5
 8008248:	080082a5 	.word	0x080082a5
 800824c:	080082a5 	.word	0x080082a5
 8008250:	080082a5 	.word	0x080082a5
 8008254:	080082a5 	.word	0x080082a5
 8008258:	080082a5 	.word	0x080082a5
 800825c:	080082a5 	.word	0x080082a5
 8008260:	080082a5 	.word	0x080082a5
 8008264:	080082a5 	.word	0x080082a5
 8008268:	080082a5 	.word	0x080082a5
 800826c:	080082a5 	.word	0x080082a5
 8008270:	080082a5 	.word	0x080082a5
 8008274:	080082a5 	.word	0x080082a5
 8008278:	080082a5 	.word	0x080082a5
 800827c:	080082a5 	.word	0x080082a5
 8008280:	080082a5 	.word	0x080082a5
 8008284:	080082a5 	.word	0x080082a5
 8008288:	080082a5 	.word	0x080082a5
 800828c:	080082a5 	.word	0x080082a5
 8008290:	080082a5 	.word	0x080082a5
 8008294:	080082a5 	.word	0x080082a5
 8008298:	080082a5 	.word	0x080082a5
 800829c:	080082a5 	.word	0x080082a5
 80082a0:	080082a5 	.word	0x080082a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80082a4:	bf00      	nop
  }

  return (USBD_OK);
 80082a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80082be:	6879      	ldr	r1, [r7, #4]
 80082c0:	4805      	ldr	r0, [pc, #20]	@ (80082d8 <CDC_Receive_FS+0x24>)
 80082c2:	f7fe fb8d 	bl	80069e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80082c6:	4804      	ldr	r0, [pc, #16]	@ (80082d8 <CDC_Receive_FS+0x24>)
 80082c8:	f7fe fbe8 	bl	8006a9c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80082cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20000178 	.word	0x20000178

080082dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80082ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008324 <CDC_Transmit_FS+0x48>)
 80082ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80082f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80082fe:	2301      	movs	r3, #1
 8008300:	e00b      	b.n	800831a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008302:	887b      	ldrh	r3, [r7, #2]
 8008304:	461a      	mov	r2, r3
 8008306:	6879      	ldr	r1, [r7, #4]
 8008308:	4806      	ldr	r0, [pc, #24]	@ (8008324 <CDC_Transmit_FS+0x48>)
 800830a:	f7fe fb47 	bl	800699c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800830e:	4805      	ldr	r0, [pc, #20]	@ (8008324 <CDC_Transmit_FS+0x48>)
 8008310:	f7fe fb84 	bl	8006a1c <USBD_CDC_TransmitPacket>
 8008314:	4603      	mov	r3, r0
 8008316:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008318:	7bfb      	ldrb	r3, [r7, #15]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	20000178 	.word	0x20000178

08008328 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008328:	b480      	push	{r7}
 800832a:	b087      	sub	sp, #28
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	4613      	mov	r3, r2
 8008334:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800833a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800833e:	4618      	mov	r0, r3
 8008340:	371c      	adds	r7, #28
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
	...

0800834c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	6039      	str	r1, [r7, #0]
 8008356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	2212      	movs	r2, #18
 800835c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800835e:	4b03      	ldr	r3, [pc, #12]	@ (800836c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008360:	4618      	mov	r0, r3
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	200000cc 	.word	0x200000cc

08008370 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	4603      	mov	r3, r0
 8008378:	6039      	str	r1, [r7, #0]
 800837a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	2204      	movs	r2, #4
 8008380:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008382:	4b03      	ldr	r3, [pc, #12]	@ (8008390 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008384:	4618      	mov	r0, r3
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr
 8008390:	200000ec 	.word	0x200000ec

08008394 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	4603      	mov	r3, r0
 800839c:	6039      	str	r1, [r7, #0]
 800839e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083a0:	79fb      	ldrb	r3, [r7, #7]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d105      	bne.n	80083b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	4907      	ldr	r1, [pc, #28]	@ (80083c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80083aa:	4808      	ldr	r0, [pc, #32]	@ (80083cc <USBD_FS_ProductStrDescriptor+0x38>)
 80083ac:	f7ff fdec 	bl	8007f88 <USBD_GetString>
 80083b0:	e004      	b.n	80083bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	4904      	ldr	r1, [pc, #16]	@ (80083c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80083b6:	4805      	ldr	r0, [pc, #20]	@ (80083cc <USBD_FS_ProductStrDescriptor+0x38>)
 80083b8:	f7ff fde6 	bl	8007f88 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083bc:	4b02      	ldr	r3, [pc, #8]	@ (80083c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20001454 	.word	0x20001454
 80083cc:	08008dd0 	.word	0x08008dd0

080083d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	4603      	mov	r3, r0
 80083d8:	6039      	str	r1, [r7, #0]
 80083da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	4904      	ldr	r1, [pc, #16]	@ (80083f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80083e0:	4804      	ldr	r0, [pc, #16]	@ (80083f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80083e2:	f7ff fdd1 	bl	8007f88 <USBD_GetString>
  return USBD_StrDesc;
 80083e6:	4b02      	ldr	r3, [pc, #8]	@ (80083f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20001454 	.word	0x20001454
 80083f4:	08008de8 	.word	0x08008de8

080083f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	4603      	mov	r3, r0
 8008400:	6039      	str	r1, [r7, #0]
 8008402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	221a      	movs	r2, #26
 8008408:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800840a:	f000 f855 	bl	80084b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800840e:	4b02      	ldr	r3, [pc, #8]	@ (8008418 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008410:	4618      	mov	r0, r3
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	200000f0 	.word	0x200000f0

0800841c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	4603      	mov	r3, r0
 8008424:	6039      	str	r1, [r7, #0]
 8008426:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008428:	79fb      	ldrb	r3, [r7, #7]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d105      	bne.n	800843a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800842e:	683a      	ldr	r2, [r7, #0]
 8008430:	4907      	ldr	r1, [pc, #28]	@ (8008450 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008432:	4808      	ldr	r0, [pc, #32]	@ (8008454 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008434:	f7ff fda8 	bl	8007f88 <USBD_GetString>
 8008438:	e004      	b.n	8008444 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800843a:	683a      	ldr	r2, [r7, #0]
 800843c:	4904      	ldr	r1, [pc, #16]	@ (8008450 <USBD_FS_ConfigStrDescriptor+0x34>)
 800843e:	4805      	ldr	r0, [pc, #20]	@ (8008454 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008440:	f7ff fda2 	bl	8007f88 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008444:	4b02      	ldr	r3, [pc, #8]	@ (8008450 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008446:	4618      	mov	r0, r3
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	20001454 	.word	0x20001454
 8008454:	08008dfc 	.word	0x08008dfc

08008458 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	4603      	mov	r3, r0
 8008460:	6039      	str	r1, [r7, #0]
 8008462:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008464:	79fb      	ldrb	r3, [r7, #7]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d105      	bne.n	8008476 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	4907      	ldr	r1, [pc, #28]	@ (800848c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800846e:	4808      	ldr	r0, [pc, #32]	@ (8008490 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008470:	f7ff fd8a 	bl	8007f88 <USBD_GetString>
 8008474:	e004      	b.n	8008480 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	4904      	ldr	r1, [pc, #16]	@ (800848c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800847a:	4805      	ldr	r0, [pc, #20]	@ (8008490 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800847c:	f7ff fd84 	bl	8007f88 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008480:	4b02      	ldr	r3, [pc, #8]	@ (800848c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	20001454 	.word	0x20001454
 8008490:	08008e08 	.word	0x08008e08

08008494 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	4603      	mov	r3, r0
 800849c:	6039      	str	r1, [r7, #0]
 800849e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	220c      	movs	r2, #12
 80084a4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80084a6:	4b03      	ldr	r3, [pc, #12]	@ (80084b4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	200000e0 	.word	0x200000e0

080084b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084be:	4b0f      	ldr	r3, [pc, #60]	@ (80084fc <Get_SerialNum+0x44>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80084c4:	4b0e      	ldr	r3, [pc, #56]	@ (8008500 <Get_SerialNum+0x48>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80084ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008504 <Get_SerialNum+0x4c>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4413      	add	r3, r2
 80084d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d009      	beq.n	80084f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084de:	2208      	movs	r2, #8
 80084e0:	4909      	ldr	r1, [pc, #36]	@ (8008508 <Get_SerialNum+0x50>)
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f000 f814 	bl	8008510 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80084e8:	2204      	movs	r2, #4
 80084ea:	4908      	ldr	r1, [pc, #32]	@ (800850c <Get_SerialNum+0x54>)
 80084ec:	68b8      	ldr	r0, [r7, #8]
 80084ee:	f000 f80f 	bl	8008510 <IntToUnicode>
  }
}
 80084f2:	bf00      	nop
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	1fff7a10 	.word	0x1fff7a10
 8008500:	1fff7a14 	.word	0x1fff7a14
 8008504:	1fff7a18 	.word	0x1fff7a18
 8008508:	200000f2 	.word	0x200000f2
 800850c:	20000102 	.word	0x20000102

08008510 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008510:	b480      	push	{r7}
 8008512:	b087      	sub	sp, #28
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	4613      	mov	r3, r2
 800851c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800851e:	2300      	movs	r3, #0
 8008520:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008522:	2300      	movs	r3, #0
 8008524:	75fb      	strb	r3, [r7, #23]
 8008526:	e027      	b.n	8008578 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	0f1b      	lsrs	r3, r3, #28
 800852c:	2b09      	cmp	r3, #9
 800852e:	d80b      	bhi.n	8008548 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	0f1b      	lsrs	r3, r3, #28
 8008534:	b2da      	uxtb	r2, r3
 8008536:	7dfb      	ldrb	r3, [r7, #23]
 8008538:	005b      	lsls	r3, r3, #1
 800853a:	4619      	mov	r1, r3
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	440b      	add	r3, r1
 8008540:	3230      	adds	r2, #48	@ 0x30
 8008542:	b2d2      	uxtb	r2, r2
 8008544:	701a      	strb	r2, [r3, #0]
 8008546:	e00a      	b.n	800855e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	0f1b      	lsrs	r3, r3, #28
 800854c:	b2da      	uxtb	r2, r3
 800854e:	7dfb      	ldrb	r3, [r7, #23]
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	4619      	mov	r1, r3
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	440b      	add	r3, r1
 8008558:	3237      	adds	r2, #55	@ 0x37
 800855a:	b2d2      	uxtb	r2, r2
 800855c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	011b      	lsls	r3, r3, #4
 8008562:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008564:	7dfb      	ldrb	r3, [r7, #23]
 8008566:	005b      	lsls	r3, r3, #1
 8008568:	3301      	adds	r3, #1
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	4413      	add	r3, r2
 800856e:	2200      	movs	r2, #0
 8008570:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	3301      	adds	r3, #1
 8008576:	75fb      	strb	r3, [r7, #23]
 8008578:	7dfa      	ldrb	r2, [r7, #23]
 800857a:	79fb      	ldrb	r3, [r7, #7]
 800857c:	429a      	cmp	r2, r3
 800857e:	d3d3      	bcc.n	8008528 <IntToUnicode+0x18>
  }
}
 8008580:	bf00      	nop
 8008582:	bf00      	nop
 8008584:	371c      	adds	r7, #28
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
	...

08008590 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b0a0      	sub	sp, #128	@ 0x80
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008598:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800859c:	2200      	movs	r2, #0
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	605a      	str	r2, [r3, #4]
 80085a2:	609a      	str	r2, [r3, #8]
 80085a4:	60da      	str	r2, [r3, #12]
 80085a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80085a8:	f107 0310 	add.w	r3, r7, #16
 80085ac:	225c      	movs	r2, #92	@ 0x5c
 80085ae:	2100      	movs	r1, #0
 80085b0:	4618      	mov	r0, r3
 80085b2:	f000 fb65 	bl	8008c80 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80085be:	d149      	bne.n	8008654 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80085c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80085c6:	2300      	movs	r3, #0
 80085c8:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80085ca:	f107 0310 	add.w	r3, r7, #16
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fa fa8e 	bl	8002af0 <HAL_RCCEx_PeriphCLKConfig>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80085da:	f7f8 f991 	bl	8000900 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085de:	2300      	movs	r3, #0
 80085e0:	60fb      	str	r3, [r7, #12]
 80085e2:	4b1e      	ldr	r3, [pc, #120]	@ (800865c <HAL_PCD_MspInit+0xcc>)
 80085e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085e6:	4a1d      	ldr	r2, [pc, #116]	@ (800865c <HAL_PCD_MspInit+0xcc>)
 80085e8:	f043 0301 	orr.w	r3, r3, #1
 80085ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80085ee:	4b1b      	ldr	r3, [pc, #108]	@ (800865c <HAL_PCD_MspInit+0xcc>)
 80085f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	60fb      	str	r3, [r7, #12]
 80085f8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80085fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80085fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008600:	2302      	movs	r3, #2
 8008602:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008604:	2300      	movs	r3, #0
 8008606:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008608:	2303      	movs	r3, #3
 800860a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800860c:	230a      	movs	r3, #10
 800860e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008610:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008614:	4619      	mov	r1, r3
 8008616:	4812      	ldr	r0, [pc, #72]	@ (8008660 <HAL_PCD_MspInit+0xd0>)
 8008618:	f7f8 fcd4 	bl	8000fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800861c:	4b0f      	ldr	r3, [pc, #60]	@ (800865c <HAL_PCD_MspInit+0xcc>)
 800861e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008620:	4a0e      	ldr	r2, [pc, #56]	@ (800865c <HAL_PCD_MspInit+0xcc>)
 8008622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008626:	6353      	str	r3, [r2, #52]	@ 0x34
 8008628:	2300      	movs	r3, #0
 800862a:	60bb      	str	r3, [r7, #8]
 800862c:	4b0b      	ldr	r3, [pc, #44]	@ (800865c <HAL_PCD_MspInit+0xcc>)
 800862e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008630:	4a0a      	ldr	r2, [pc, #40]	@ (800865c <HAL_PCD_MspInit+0xcc>)
 8008632:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008636:	6453      	str	r3, [r2, #68]	@ 0x44
 8008638:	4b08      	ldr	r3, [pc, #32]	@ (800865c <HAL_PCD_MspInit+0xcc>)
 800863a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800863c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008640:	60bb      	str	r3, [r7, #8]
 8008642:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008644:	2200      	movs	r2, #0
 8008646:	2100      	movs	r1, #0
 8008648:	2043      	movs	r0, #67	@ 0x43
 800864a:	f7f8 fbf2 	bl	8000e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800864e:	2043      	movs	r0, #67	@ 0x43
 8008650:	f7f8 fc0b 	bl	8000e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008654:	bf00      	nop
 8008656:	3780      	adds	r7, #128	@ 0x80
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	40023800 	.word	0x40023800
 8008660:	40020000 	.word	0x40020000

08008664 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008678:	4619      	mov	r1, r3
 800867a:	4610      	mov	r0, r2
 800867c:	f7fe faf7 	bl	8006c6e <USBD_LL_SetupStage>
}
 8008680:	bf00      	nop
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800869a:	78fa      	ldrb	r2, [r7, #3]
 800869c:	6879      	ldr	r1, [r7, #4]
 800869e:	4613      	mov	r3, r2
 80086a0:	00db      	lsls	r3, r3, #3
 80086a2:	4413      	add	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	440b      	add	r3, r1
 80086a8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	78fb      	ldrb	r3, [r7, #3]
 80086b0:	4619      	mov	r1, r3
 80086b2:	f7fe fb31 	bl	8006d18 <USBD_LL_DataOutStage>
}
 80086b6:	bf00      	nop
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b082      	sub	sp, #8
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	460b      	mov	r3, r1
 80086c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80086d0:	78fa      	ldrb	r2, [r7, #3]
 80086d2:	6879      	ldr	r1, [r7, #4]
 80086d4:	4613      	mov	r3, r2
 80086d6:	00db      	lsls	r3, r3, #3
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	440b      	add	r3, r1
 80086de:	3320      	adds	r3, #32
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	78fb      	ldrb	r3, [r7, #3]
 80086e4:	4619      	mov	r1, r3
 80086e6:	f7fe fbca 	bl	8006e7e <USBD_LL_DataInStage>
}
 80086ea:	bf00      	nop
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b082      	sub	sp, #8
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008700:	4618      	mov	r0, r3
 8008702:	f7fe fd04 	bl	800710e <USBD_LL_SOF>
}
 8008706:	bf00      	nop
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008716:	2301      	movs	r3, #1
 8008718:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	79db      	ldrb	r3, [r3, #7]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d102      	bne.n	8008728 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]
 8008726:	e008      	b.n	800873a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	79db      	ldrb	r3, [r3, #7]
 800872c:	2b02      	cmp	r3, #2
 800872e:	d102      	bne.n	8008736 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008730:	2301      	movs	r3, #1
 8008732:	73fb      	strb	r3, [r7, #15]
 8008734:	e001      	b.n	800873a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008736:	f7f8 f8e3 	bl	8000900 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008740:	7bfa      	ldrb	r2, [r7, #15]
 8008742:	4611      	mov	r1, r2
 8008744:	4618      	mov	r0, r3
 8008746:	f7fe fc9e 	bl	8007086 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008750:	4618      	mov	r0, r3
 8008752:	f7fe fc46 	bl	8006fe2 <USBD_LL_Reset>
}
 8008756:	bf00      	nop
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
	...

08008760 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800876e:	4618      	mov	r0, r3
 8008770:	f7fe fc99 	bl	80070a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	6812      	ldr	r2, [r2, #0]
 8008782:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008786:	f043 0301 	orr.w	r3, r3, #1
 800878a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	7adb      	ldrb	r3, [r3, #11]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d005      	beq.n	80087a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008794:	4b04      	ldr	r3, [pc, #16]	@ (80087a8 <HAL_PCD_SuspendCallback+0x48>)
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	4a03      	ldr	r2, [pc, #12]	@ (80087a8 <HAL_PCD_SuspendCallback+0x48>)
 800879a:	f043 0306 	orr.w	r3, r3, #6
 800879e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	e000ed00 	.word	0xe000ed00

080087ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7fe fc8f 	bl	80070de <USBD_LL_Resume>
}
 80087c0:	bf00      	nop
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087da:	78fa      	ldrb	r2, [r7, #3]
 80087dc:	4611      	mov	r1, r2
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fe fce7 	bl	80071b2 <USBD_LL_IsoOUTIncomplete>
}
 80087e4:	bf00      	nop
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087fe:	78fa      	ldrb	r2, [r7, #3]
 8008800:	4611      	mov	r1, r2
 8008802:	4618      	mov	r0, r3
 8008804:	f7fe fca3 	bl	800714e <USBD_LL_IsoINIncomplete>
}
 8008808:	bf00      	nop
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800881e:	4618      	mov	r0, r3
 8008820:	f7fe fcf9 	bl	8007216 <USBD_LL_DevConnected>
}
 8008824:	bf00      	nop
 8008826:	3708      	adds	r7, #8
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800883a:	4618      	mov	r0, r3
 800883c:	f7fe fcf6 	bl	800722c <USBD_LL_DevDisconnected>
}
 8008840:	bf00      	nop
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d13c      	bne.n	80088d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008858:	4a20      	ldr	r2, [pc, #128]	@ (80088dc <USBD_LL_Init+0x94>)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a1e      	ldr	r2, [pc, #120]	@ (80088dc <USBD_LL_Init+0x94>)
 8008864:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008868:	4b1c      	ldr	r3, [pc, #112]	@ (80088dc <USBD_LL_Init+0x94>)
 800886a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800886e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008870:	4b1a      	ldr	r3, [pc, #104]	@ (80088dc <USBD_LL_Init+0x94>)
 8008872:	2206      	movs	r2, #6
 8008874:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008876:	4b19      	ldr	r3, [pc, #100]	@ (80088dc <USBD_LL_Init+0x94>)
 8008878:	2202      	movs	r2, #2
 800887a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800887c:	4b17      	ldr	r3, [pc, #92]	@ (80088dc <USBD_LL_Init+0x94>)
 800887e:	2200      	movs	r2, #0
 8008880:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008882:	4b16      	ldr	r3, [pc, #88]	@ (80088dc <USBD_LL_Init+0x94>)
 8008884:	2202      	movs	r2, #2
 8008886:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008888:	4b14      	ldr	r3, [pc, #80]	@ (80088dc <USBD_LL_Init+0x94>)
 800888a:	2200      	movs	r2, #0
 800888c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800888e:	4b13      	ldr	r3, [pc, #76]	@ (80088dc <USBD_LL_Init+0x94>)
 8008890:	2200      	movs	r2, #0
 8008892:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008894:	4b11      	ldr	r3, [pc, #68]	@ (80088dc <USBD_LL_Init+0x94>)
 8008896:	2200      	movs	r2, #0
 8008898:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800889a:	4b10      	ldr	r3, [pc, #64]	@ (80088dc <USBD_LL_Init+0x94>)
 800889c:	2200      	movs	r2, #0
 800889e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80088a0:	4b0e      	ldr	r3, [pc, #56]	@ (80088dc <USBD_LL_Init+0x94>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80088a6:	480d      	ldr	r0, [pc, #52]	@ (80088dc <USBD_LL_Init+0x94>)
 80088a8:	f7f8 fd6a 	bl	8001380 <HAL_PCD_Init>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d001      	beq.n	80088b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80088b2:	f7f8 f825 	bl	8000900 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80088b6:	2180      	movs	r1, #128	@ 0x80
 80088b8:	4808      	ldr	r0, [pc, #32]	@ (80088dc <USBD_LL_Init+0x94>)
 80088ba:	f7f9 ffca 	bl	8002852 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80088be:	2240      	movs	r2, #64	@ 0x40
 80088c0:	2100      	movs	r1, #0
 80088c2:	4806      	ldr	r0, [pc, #24]	@ (80088dc <USBD_LL_Init+0x94>)
 80088c4:	f7f9 ff7e 	bl	80027c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80088c8:	2280      	movs	r2, #128	@ 0x80
 80088ca:	2101      	movs	r1, #1
 80088cc:	4803      	ldr	r0, [pc, #12]	@ (80088dc <USBD_LL_Init+0x94>)
 80088ce:	f7f9 ff79 	bl	80027c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	20001654 	.word	0x20001654

080088e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7f8 fe58 	bl	80015ac <HAL_PCD_Start>
 80088fc:	4603      	mov	r3, r0
 80088fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 f990 	bl	8008c28 <USBD_Get_USB_Status>
 8008908:	4603      	mov	r3, r0
 800890a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800890c:	7bbb      	ldrb	r3, [r7, #14]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b084      	sub	sp, #16
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	4608      	mov	r0, r1
 8008920:	4611      	mov	r1, r2
 8008922:	461a      	mov	r2, r3
 8008924:	4603      	mov	r3, r0
 8008926:	70fb      	strb	r3, [r7, #3]
 8008928:	460b      	mov	r3, r1
 800892a:	70bb      	strb	r3, [r7, #2]
 800892c:	4613      	mov	r3, r2
 800892e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800893e:	78bb      	ldrb	r3, [r7, #2]
 8008940:	883a      	ldrh	r2, [r7, #0]
 8008942:	78f9      	ldrb	r1, [r7, #3]
 8008944:	f7f9 fb59 	bl	8001ffa <HAL_PCD_EP_Open>
 8008948:	4603      	mov	r3, r0
 800894a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800894c:	7bfb      	ldrb	r3, [r7, #15]
 800894e:	4618      	mov	r0, r3
 8008950:	f000 f96a 	bl	8008c28 <USBD_Get_USB_Status>
 8008954:	4603      	mov	r3, r0
 8008956:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008958:	7bbb      	ldrb	r3, [r7, #14]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	460b      	mov	r3, r1
 800896c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800897c:	78fa      	ldrb	r2, [r7, #3]
 800897e:	4611      	mov	r1, r2
 8008980:	4618      	mov	r0, r3
 8008982:	f7f9 fba4 	bl	80020ce <HAL_PCD_EP_Close>
 8008986:	4603      	mov	r3, r0
 8008988:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800898a:	7bfb      	ldrb	r3, [r7, #15]
 800898c:	4618      	mov	r0, r3
 800898e:	f000 f94b 	bl	8008c28 <USBD_Get_USB_Status>
 8008992:	4603      	mov	r3, r0
 8008994:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008996:	7bbb      	ldrb	r3, [r7, #14]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	460b      	mov	r3, r1
 80089aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80089ba:	78fa      	ldrb	r2, [r7, #3]
 80089bc:	4611      	mov	r1, r2
 80089be:	4618      	mov	r0, r3
 80089c0:	f7f9 fc5c 	bl	800227c <HAL_PCD_EP_SetStall>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 f92c 	bl	8008c28 <USBD_Get_USB_Status>
 80089d0:	4603      	mov	r3, r0
 80089d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	460b      	mov	r3, r1
 80089e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80089f8:	78fa      	ldrb	r2, [r7, #3]
 80089fa:	4611      	mov	r1, r2
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7f9 fca0 	bl	8002342 <HAL_PCD_EP_ClrStall>
 8008a02:	4603      	mov	r3, r0
 8008a04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 f90d 	bl	8008c28 <USBD_Get_USB_Status>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a12:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	da0b      	bge.n	8008a50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a38:	78fb      	ldrb	r3, [r7, #3]
 8008a3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a3e:	68f9      	ldr	r1, [r7, #12]
 8008a40:	4613      	mov	r3, r2
 8008a42:	00db      	lsls	r3, r3, #3
 8008a44:	4413      	add	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	440b      	add	r3, r1
 8008a4a:	3316      	adds	r3, #22
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	e00b      	b.n	8008a68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a50:	78fb      	ldrb	r3, [r7, #3]
 8008a52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a56:	68f9      	ldr	r1, [r7, #12]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	00db      	lsls	r3, r3, #3
 8008a5c:	4413      	add	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	440b      	add	r3, r1
 8008a62:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008a66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a8e:	78fa      	ldrb	r2, [r7, #3]
 8008a90:	4611      	mov	r1, r2
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7f9 fa8d 	bl	8001fb2 <HAL_PCD_SetAddress>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 f8c2 	bl	8008c28 <USBD_Get_USB_Status>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b086      	sub	sp, #24
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	603b      	str	r3, [r7, #0]
 8008abe:	460b      	mov	r3, r1
 8008ac0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008ad0:	7af9      	ldrb	r1, [r7, #11]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	f7f9 fb97 	bl	8002208 <HAL_PCD_EP_Transmit>
 8008ada:	4603      	mov	r3, r0
 8008adc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f000 f8a1 	bl	8008c28 <USBD_Get_USB_Status>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008aea:	7dbb      	ldrb	r3, [r7, #22]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3718      	adds	r7, #24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	607a      	str	r2, [r7, #4]
 8008afe:	603b      	str	r3, [r7, #0]
 8008b00:	460b      	mov	r3, r1
 8008b02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008b12:	7af9      	ldrb	r1, [r7, #11]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	f7f9 fb23 	bl	8002162 <HAL_PCD_EP_Receive>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f000 f880 	bl	8008c28 <USBD_Get_USB_Status>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3718      	adds	r7, #24
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b082      	sub	sp, #8
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	460b      	mov	r3, r1
 8008b40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b48:	78fa      	ldrb	r2, [r7, #3]
 8008b4a:	4611      	mov	r1, r2
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7f9 fb43 	bl	80021d8 <HAL_PCD_EP_GetRxCount>
 8008b52:	4603      	mov	r3, r0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008b68:	78fb      	ldrb	r3, [r7, #3]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d002      	beq.n	8008b74 <HAL_PCDEx_LPM_Callback+0x18>
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d01f      	beq.n	8008bb2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008b72:	e03b      	b.n	8008bec <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	7adb      	ldrb	r3, [r3, #11]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d007      	beq.n	8008b8c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008b7c:	f7f7 fcee 	bl	800055c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b80:	4b1c      	ldr	r3, [pc, #112]	@ (8008bf4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	4a1b      	ldr	r2, [pc, #108]	@ (8008bf4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008b86:	f023 0306 	bic.w	r3, r3, #6
 8008b8a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	6812      	ldr	r2, [r2, #0]
 8008b9a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b9e:	f023 0301 	bic.w	r3, r3, #1
 8008ba2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fe fa97 	bl	80070de <USBD_LL_Resume>
    break;
 8008bb0:	e01c      	b.n	8008bec <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	6812      	ldr	r2, [r2, #0]
 8008bc0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008bc4:	f043 0301 	orr.w	r3, r3, #1
 8008bc8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7fe fa68 	bl	80070a6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	7adb      	ldrb	r3, [r3, #11]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d005      	beq.n	8008bea <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bde:	4b05      	ldr	r3, [pc, #20]	@ (8008bf4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	4a04      	ldr	r2, [pc, #16]	@ (8008bf4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008be4:	f043 0306 	orr.w	r3, r3, #6
 8008be8:	6113      	str	r3, [r2, #16]
    break;
 8008bea:	bf00      	nop
}
 8008bec:	bf00      	nop
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	e000ed00 	.word	0xe000ed00

08008bf8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c00:	4b03      	ldr	r3, [pc, #12]	@ (8008c10 <USBD_static_malloc+0x18>)
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	20001b38 	.word	0x20001b38

08008c14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]

}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	4603      	mov	r3, r0
 8008c30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c36:	79fb      	ldrb	r3, [r7, #7]
 8008c38:	2b03      	cmp	r3, #3
 8008c3a:	d817      	bhi.n	8008c6c <USBD_Get_USB_Status+0x44>
 8008c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c44 <USBD_Get_USB_Status+0x1c>)
 8008c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c42:	bf00      	nop
 8008c44:	08008c55 	.word	0x08008c55
 8008c48:	08008c5b 	.word	0x08008c5b
 8008c4c:	08008c61 	.word	0x08008c61
 8008c50:	08008c67 	.word	0x08008c67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	73fb      	strb	r3, [r7, #15]
    break;
 8008c58:	e00b      	b.n	8008c72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c5e:	e008      	b.n	8008c72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c60:	2301      	movs	r3, #1
 8008c62:	73fb      	strb	r3, [r7, #15]
    break;
 8008c64:	e005      	b.n	8008c72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c66:	2303      	movs	r3, #3
 8008c68:	73fb      	strb	r3, [r7, #15]
    break;
 8008c6a:	e002      	b.n	8008c72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c70:	bf00      	nop
  }
  return usb_status;
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <memset>:
 8008c80:	4402      	add	r2, r0
 8008c82:	4603      	mov	r3, r0
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d100      	bne.n	8008c8a <memset+0xa>
 8008c88:	4770      	bx	lr
 8008c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c8e:	e7f9      	b.n	8008c84 <memset+0x4>

08008c90 <__libc_init_array>:
 8008c90:	b570      	push	{r4, r5, r6, lr}
 8008c92:	4d0d      	ldr	r5, [pc, #52]	@ (8008cc8 <__libc_init_array+0x38>)
 8008c94:	4c0d      	ldr	r4, [pc, #52]	@ (8008ccc <__libc_init_array+0x3c>)
 8008c96:	1b64      	subs	r4, r4, r5
 8008c98:	10a4      	asrs	r4, r4, #2
 8008c9a:	2600      	movs	r6, #0
 8008c9c:	42a6      	cmp	r6, r4
 8008c9e:	d109      	bne.n	8008cb4 <__libc_init_array+0x24>
 8008ca0:	4d0b      	ldr	r5, [pc, #44]	@ (8008cd0 <__libc_init_array+0x40>)
 8008ca2:	4c0c      	ldr	r4, [pc, #48]	@ (8008cd4 <__libc_init_array+0x44>)
 8008ca4:	f000 f818 	bl	8008cd8 <_init>
 8008ca8:	1b64      	subs	r4, r4, r5
 8008caa:	10a4      	asrs	r4, r4, #2
 8008cac:	2600      	movs	r6, #0
 8008cae:	42a6      	cmp	r6, r4
 8008cb0:	d105      	bne.n	8008cbe <__libc_init_array+0x2e>
 8008cb2:	bd70      	pop	{r4, r5, r6, pc}
 8008cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cb8:	4798      	blx	r3
 8008cba:	3601      	adds	r6, #1
 8008cbc:	e7ee      	b.n	8008c9c <__libc_init_array+0xc>
 8008cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cc2:	4798      	blx	r3
 8008cc4:	3601      	adds	r6, #1
 8008cc6:	e7f2      	b.n	8008cae <__libc_init_array+0x1e>
 8008cc8:	08008e38 	.word	0x08008e38
 8008ccc:	08008e38 	.word	0x08008e38
 8008cd0:	08008e38 	.word	0x08008e38
 8008cd4:	08008e3c 	.word	0x08008e3c

08008cd8 <_init>:
 8008cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cda:	bf00      	nop
 8008cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cde:	bc08      	pop	{r3}
 8008ce0:	469e      	mov	lr, r3
 8008ce2:	4770      	bx	lr

08008ce4 <_fini>:
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce6:	bf00      	nop
 8008ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cea:	bc08      	pop	{r3}
 8008cec:	469e      	mov	lr, r3
 8008cee:	4770      	bx	lr
