
CAR_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d798  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  0800d968  0800d968  0000e968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ded8  0800ded8  0000f2d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ded8  0800ded8  0000eed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dee0  0800dee0  0000f2d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dee0  0800dee0  0000eee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dee4  0800dee4  0000eee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  0800dee8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e10  200002d8  0800e1c0  0000f2d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020e8  0800e1c0  000100e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001830f  00000000  00000000  0000f308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aab  00000000  00000000  00027617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  0002b0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001049  00000000  00000000  0002c5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cbe  00000000  00000000  0002d631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af95  00000000  00000000  000532ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d76f8  00000000  00000000  0006e284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014597c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a14  00000000  00000000  001459c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a8  00000000  00000000  0014c3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002d8 	.word	0x200002d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d950 	.word	0x0800d950

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002dc 	.word	0x200002dc
 800020c:	0800d950 	.word	0x0800d950

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <motorStop>:
char usbCdcData[30];
int speed = 80;
int clutch = 0;

void motorStop() // Tested and works
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	CDC_Transmit_FS((uint8_t*)"Motors Stop\r\n", strlen("Motors Stop\r\n"));
 8000efc:	210d      	movs	r1, #13
 8000efe:	481c      	ldr	r0, [pc, #112]	@ (8000f70 <motorStop+0x78>)
 8000f00:	f009 fa0e 	bl	800a320 <CDC_Transmit_FS>

    TIM1->CCR1 = 0;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	@ (8000f74 <motorStop+0x7c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <motorStop+0x7c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM1->CCR3 = 0;
 8000f10:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <motorStop+0x7c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM1->CCR4 = 0;
 8000f16:	4b17      	ldr	r3, [pc, #92]	@ (8000f74 <motorStop+0x7c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	641a      	str	r2, [r3, #64]	@ 0x40
	//Front Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4815      	ldr	r0, [pc, #84]	@ (8000f78 <motorStop+0x80>)
 8000f22:	f001 fc31 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2102      	movs	r1, #2
 8000f2a:	4813      	ldr	r0, [pc, #76]	@ (8000f78 <motorStop+0x80>)
 8000f2c:	f001 fc2c 	bl	8002788 <HAL_GPIO_WritePin>
	//htim3.Instance->CCR1 = 0;

	//Rear Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2104      	movs	r1, #4
 8000f34:	4810      	ldr	r0, [pc, #64]	@ (8000f78 <motorStop+0x80>)
 8000f36:	f001 fc27 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	480e      	ldr	r0, [pc, #56]	@ (8000f78 <motorStop+0x80>)
 8000f40:	f001 fc22 	bl	8002788 <HAL_GPIO_WritePin>
	//htim3.Instance->CCR2 = 0;

	//Front Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2180      	movs	r1, #128	@ 0x80
 8000f48:	480c      	ldr	r0, [pc, #48]	@ (8000f7c <motorStop+0x84>)
 8000f4a:	f001 fc1d 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2140      	movs	r1, #64	@ 0x40
 8000f52:	480a      	ldr	r0, [pc, #40]	@ (8000f7c <motorStop+0x84>)
 8000f54:	f001 fc18 	bl	8002788 <HAL_GPIO_WritePin>
	//htim3.Instance->CCR3 = 0;

	//Rear Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2120      	movs	r1, #32
 8000f5c:	4807      	ldr	r0, [pc, #28]	@ (8000f7c <motorStop+0x84>)
 8000f5e:	f001 fc13 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2110      	movs	r1, #16
 8000f66:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <motorStop+0x84>)
 8000f68:	f001 fc0e 	bl	8002788 <HAL_GPIO_WritePin>
	//htim3.Instance->CCR4 = 0;

	//HAL_Delay(2000);	//Let them run in that direction for 2 seconds
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	0800d968 	.word	0x0800d968
 8000f74:	40010000 	.word	0x40010000
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	40020400 	.word	0x40020400

08000f80 <motorDriveForward>:

void motorDriveForward(uint8_t speed) // Tested and works
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	CDC_Transmit_FS((uint8_t*)"Driving forward\r\n", strlen("Driving forward\r\n"));
 8000f8a:	2111      	movs	r1, #17
 8000f8c:	481f      	ldr	r0, [pc, #124]	@ (800100c <motorDriveForward+0x8c>)
 8000f8e:	f009 f9c7 	bl	800a320 <CDC_Transmit_FS>

	//Front Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2101      	movs	r1, #1
 8000f96:	481e      	ldr	r0, [pc, #120]	@ (8001010 <motorDriveForward+0x90>)
 8000f98:	f001 fbf6 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	481b      	ldr	r0, [pc, #108]	@ (8001010 <motorDriveForward+0x90>)
 8000fa2:	f001 fbf1 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR1 = speed;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <motorDriveForward+0x94>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	635a      	str	r2, [r3, #52]	@ 0x34

	//Rear Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	4817      	ldr	r0, [pc, #92]	@ (8001010 <motorDriveForward+0x90>)
 8000fb4:	f001 fbe8 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2108      	movs	r1, #8
 8000fbc:	4814      	ldr	r0, [pc, #80]	@ (8001010 <motorDriveForward+0x90>)
 8000fbe:	f001 fbe3 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR2 = speed;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <motorDriveForward+0x94>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	79fa      	ldrb	r2, [r7, #7]
 8000fc8:	639a      	str	r2, [r3, #56]	@ 0x38

	//Front Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2180      	movs	r1, #128	@ 0x80
 8000fce:	4812      	ldr	r0, [pc, #72]	@ (8001018 <motorDriveForward+0x98>)
 8000fd0:	f001 fbda 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2140      	movs	r1, #64	@ 0x40
 8000fd8:	480f      	ldr	r0, [pc, #60]	@ (8001018 <motorDriveForward+0x98>)
 8000fda:	f001 fbd5 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR3 = speed;
 8000fde:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <motorDriveForward+0x94>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	79fa      	ldrb	r2, [r7, #7]
 8000fe4:	63da      	str	r2, [r3, #60]	@ 0x3c

	//Rear Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2120      	movs	r1, #32
 8000fea:	480b      	ldr	r0, [pc, #44]	@ (8001018 <motorDriveForward+0x98>)
 8000fec:	f001 fbcc 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	4808      	ldr	r0, [pc, #32]	@ (8001018 <motorDriveForward+0x98>)
 8000ff6:	f001 fbc7 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR4 = speed;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <motorDriveForward+0x94>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	79fa      	ldrb	r2, [r7, #7]
 8001000:	641a      	str	r2, [r3, #64]	@ 0x40

	//HAL_Delay(2000);	//Let them run in that direction for 2 seconds
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	0800d978 	.word	0x0800d978
 8001010:	40020800 	.word	0x40020800
 8001014:	200002f4 	.word	0x200002f4
 8001018:	40020400 	.word	0x40020400

0800101c <motorDriveBackward>:

void motorDriveBackward(uint8_t speed) // Tested and works
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	CDC_Transmit_FS((uint8_t*)"Driving backward\r\n", strlen("Driving backward\r\n"));
 8001026:	2112      	movs	r1, #18
 8001028:	481f      	ldr	r0, [pc, #124]	@ (80010a8 <motorDriveBackward+0x8c>)
 800102a:	f009 f979 	bl	800a320 <CDC_Transmit_FS>

	//Front Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2101      	movs	r1, #1
 8001032:	481e      	ldr	r0, [pc, #120]	@ (80010ac <motorDriveBackward+0x90>)
 8001034:	f001 fba8 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2102      	movs	r1, #2
 800103c:	481b      	ldr	r0, [pc, #108]	@ (80010ac <motorDriveBackward+0x90>)
 800103e:	f001 fba3 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR1 = speed;
 8001042:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <motorDriveBackward+0x94>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	79fa      	ldrb	r2, [r7, #7]
 8001048:	635a      	str	r2, [r3, #52]	@ 0x34

	//Rear Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2104      	movs	r1, #4
 800104e:	4817      	ldr	r0, [pc, #92]	@ (80010ac <motorDriveBackward+0x90>)
 8001050:	f001 fb9a 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2108      	movs	r1, #8
 8001058:	4814      	ldr	r0, [pc, #80]	@ (80010ac <motorDriveBackward+0x90>)
 800105a:	f001 fb95 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR2 = speed;
 800105e:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <motorDriveBackward+0x94>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	79fa      	ldrb	r2, [r7, #7]
 8001064:	639a      	str	r2, [r3, #56]	@ 0x38

	//Front Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	2180      	movs	r1, #128	@ 0x80
 800106a:	4812      	ldr	r0, [pc, #72]	@ (80010b4 <motorDriveBackward+0x98>)
 800106c:	f001 fb8c 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2140      	movs	r1, #64	@ 0x40
 8001074:	480f      	ldr	r0, [pc, #60]	@ (80010b4 <motorDriveBackward+0x98>)
 8001076:	f001 fb87 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR3 = speed;
 800107a:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <motorDriveBackward+0x94>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	79fa      	ldrb	r2, [r7, #7]
 8001080:	63da      	str	r2, [r3, #60]	@ 0x3c

	//Rear Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	2120      	movs	r1, #32
 8001086:	480b      	ldr	r0, [pc, #44]	@ (80010b4 <motorDriveBackward+0x98>)
 8001088:	f001 fb7e 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2110      	movs	r1, #16
 8001090:	4808      	ldr	r0, [pc, #32]	@ (80010b4 <motorDriveBackward+0x98>)
 8001092:	f001 fb79 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR4 = speed;
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <motorDriveBackward+0x94>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	79fa      	ldrb	r2, [r7, #7]
 800109c:	641a      	str	r2, [r3, #64]	@ 0x40

	//HAL_Delay(2000);	//Let them run in that direction for 2 seconds
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	0800d98c 	.word	0x0800d98c
 80010ac:	40020800 	.word	0x40020800
 80010b0:	200002f4 	.word	0x200002f4
 80010b4:	40020400 	.word	0x40020400

080010b8 <motorDriveDForwardRight>:

void motorDriveDForwardRight(uint8_t speed) // Tested and works
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	CDC_Transmit_FS((uint8_t*)"Driving Diagonally Forward Right\r\n", strlen("Driving Diagonally Forward Right\r\n"));
 80010c2:	2122      	movs	r1, #34	@ 0x22
 80010c4:	4821      	ldr	r0, [pc, #132]	@ (800114c <motorDriveDForwardRight+0x94>)
 80010c6:	f009 f92b 	bl	800a320 <CDC_Transmit_FS>

	//Front Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	2101      	movs	r1, #1
 80010ce:	4820      	ldr	r0, [pc, #128]	@ (8001150 <motorDriveDForwardRight+0x98>)
 80010d0:	f001 fb5a 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2102      	movs	r1, #2
 80010d8:	481d      	ldr	r0, [pc, #116]	@ (8001150 <motorDriveDForwardRight+0x98>)
 80010da:	f001 fb55 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR1 = speed;
 80010de:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <motorDriveDForwardRight+0x9c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	79fa      	ldrb	r2, [r7, #7]
 80010e4:	635a      	str	r2, [r3, #52]	@ 0x34

	//Rear Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2104      	movs	r1, #4
 80010ea:	4819      	ldr	r0, [pc, #100]	@ (8001150 <motorDriveDForwardRight+0x98>)
 80010ec:	f001 fb4c 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2108      	movs	r1, #8
 80010f4:	4816      	ldr	r0, [pc, #88]	@ (8001150 <motorDriveDForwardRight+0x98>)
 80010f6:	f001 fb47 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR2 = speed-40;
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <motorDriveDForwardRight+0x9c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	639a      	str	r2, [r3, #56]	@ 0x38

	//Front Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	2180      	movs	r1, #128	@ 0x80
 800110a:	4813      	ldr	r0, [pc, #76]	@ (8001158 <motorDriveDForwardRight+0xa0>)
 800110c:	f001 fb3c 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2140      	movs	r1, #64	@ 0x40
 8001114:	4810      	ldr	r0, [pc, #64]	@ (8001158 <motorDriveDForwardRight+0xa0>)
 8001116:	f001 fb37 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR3 = speed-40;
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <motorDriveDForwardRight+0x9c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	63da      	str	r2, [r3, #60]	@ 0x3c

	//Rear Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2120      	movs	r1, #32
 800112a:	480b      	ldr	r0, [pc, #44]	@ (8001158 <motorDriveDForwardRight+0xa0>)
 800112c:	f001 fb2c 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	2110      	movs	r1, #16
 8001134:	4808      	ldr	r0, [pc, #32]	@ (8001158 <motorDriveDForwardRight+0xa0>)
 8001136:	f001 fb27 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR4 = speed;
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <motorDriveDForwardRight+0x9c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	79fa      	ldrb	r2, [r7, #7]
 8001140:	641a      	str	r2, [r3, #64]	@ 0x40

	//HAL_Delay(2000);	//Let them run in that direction for 2 seconds
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	0800d9a0 	.word	0x0800d9a0
 8001150:	40020800 	.word	0x40020800
 8001154:	200002f4 	.word	0x200002f4
 8001158:	40020400 	.word	0x40020400

0800115c <motorDriveDForwardLeft>:

void motorDriveDForwardLeft(uint8_t speed) // Tested and works
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
	CDC_Transmit_FS((uint8_t*)"Driving Diagonally Forward Left\r\n", strlen("Driving Diagonally Forward Right\r\n"));
 8001166:	2122      	movs	r1, #34	@ 0x22
 8001168:	4821      	ldr	r0, [pc, #132]	@ (80011f0 <motorDriveDForwardLeft+0x94>)
 800116a:	f009 f8d9 	bl	800a320 <CDC_Transmit_FS>

	//Front Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	2101      	movs	r1, #1
 8001172:	4820      	ldr	r0, [pc, #128]	@ (80011f4 <motorDriveDForwardLeft+0x98>)
 8001174:	f001 fb08 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	2102      	movs	r1, #2
 800117c:	481d      	ldr	r0, [pc, #116]	@ (80011f4 <motorDriveDForwardLeft+0x98>)
 800117e:	f001 fb03 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR1 = speed-40;
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8001188:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <motorDriveDForwardLeft+0x9c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	635a      	str	r2, [r3, #52]	@ 0x34

	//Rear Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800118e:	2201      	movs	r2, #1
 8001190:	2104      	movs	r1, #4
 8001192:	4818      	ldr	r0, [pc, #96]	@ (80011f4 <motorDriveDForwardLeft+0x98>)
 8001194:	f001 faf8 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2108      	movs	r1, #8
 800119c:	4815      	ldr	r0, [pc, #84]	@ (80011f4 <motorDriveDForwardLeft+0x98>)
 800119e:	f001 faf3 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR2 = speed;
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <motorDriveDForwardLeft+0x9c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	79fa      	ldrb	r2, [r7, #7]
 80011a8:	639a      	str	r2, [r3, #56]	@ 0x38

	//Front Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	4813      	ldr	r0, [pc, #76]	@ (80011fc <motorDriveDForwardLeft+0xa0>)
 80011b0:	f001 faea 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2140      	movs	r1, #64	@ 0x40
 80011b8:	4810      	ldr	r0, [pc, #64]	@ (80011fc <motorDriveDForwardLeft+0xa0>)
 80011ba:	f001 fae5 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR3 = speed;
 80011be:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <motorDriveDForwardLeft+0x9c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	79fa      	ldrb	r2, [r7, #7]
 80011c4:	63da      	str	r2, [r3, #60]	@ 0x3c

	//Rear Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2120      	movs	r1, #32
 80011ca:	480c      	ldr	r0, [pc, #48]	@ (80011fc <motorDriveDForwardLeft+0xa0>)
 80011cc:	f001 fadc 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2110      	movs	r1, #16
 80011d4:	4809      	ldr	r0, [pc, #36]	@ (80011fc <motorDriveDForwardLeft+0xa0>)
 80011d6:	f001 fad7 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR4 = speed-40;
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 80011e0:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <motorDriveDForwardLeft+0x9c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	641a      	str	r2, [r3, #64]	@ 0x40

	//HAL_Delay(2000);	//Let them run in that direction for 2 seconds
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	0800d9c4 	.word	0x0800d9c4
 80011f4:	40020800 	.word	0x40020800
 80011f8:	200002f4 	.word	0x200002f4
 80011fc:	40020400 	.word	0x40020400

08001200 <motorDriveDBackwardLeft>:

void motorDriveDBackwardLeft(uint8_t speed) // Tested and works
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	CDC_Transmit_FS((uint8_t*)"Driving Diagonally Backward Left\r\n", strlen("Driving Diagonally Backward Left\r\n"));
 800120a:	2122      	movs	r1, #34	@ 0x22
 800120c:	4821      	ldr	r0, [pc, #132]	@ (8001294 <motorDriveDBackwardLeft+0x94>)
 800120e:	f009 f887 	bl	800a320 <CDC_Transmit_FS>

	//Front Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	2101      	movs	r1, #1
 8001216:	4820      	ldr	r0, [pc, #128]	@ (8001298 <motorDriveDBackwardLeft+0x98>)
 8001218:	f001 fab6 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	2102      	movs	r1, #2
 8001220:	481d      	ldr	r0, [pc, #116]	@ (8001298 <motorDriveDBackwardLeft+0x98>)
 8001222:	f001 fab1 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR1 = speed;
 8001226:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <motorDriveDBackwardLeft+0x9c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	79fa      	ldrb	r2, [r7, #7]
 800122c:	635a      	str	r2, [r3, #52]	@ 0x34

	//Rear Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	2104      	movs	r1, #4
 8001232:	4819      	ldr	r0, [pc, #100]	@ (8001298 <motorDriveDBackwardLeft+0x98>)
 8001234:	f001 faa8 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001238:	2201      	movs	r2, #1
 800123a:	2108      	movs	r1, #8
 800123c:	4816      	ldr	r0, [pc, #88]	@ (8001298 <motorDriveDBackwardLeft+0x98>)
 800123e:	f001 faa3 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR2 = speed-40;
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8001248:	4b14      	ldr	r3, [pc, #80]	@ (800129c <motorDriveDBackwardLeft+0x9c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	639a      	str	r2, [r3, #56]	@ 0x38

	//Front Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800124e:	2201      	movs	r2, #1
 8001250:	2180      	movs	r1, #128	@ 0x80
 8001252:	4813      	ldr	r0, [pc, #76]	@ (80012a0 <motorDriveDBackwardLeft+0xa0>)
 8001254:	f001 fa98 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	2140      	movs	r1, #64	@ 0x40
 800125c:	4810      	ldr	r0, [pc, #64]	@ (80012a0 <motorDriveDBackwardLeft+0xa0>)
 800125e:	f001 fa93 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR3 = speed-40;
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <motorDriveDBackwardLeft+0x9c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	63da      	str	r2, [r3, #60]	@ 0x3c

	//Rear Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	2120      	movs	r1, #32
 8001272:	480b      	ldr	r0, [pc, #44]	@ (80012a0 <motorDriveDBackwardLeft+0xa0>)
 8001274:	f001 fa88 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2110      	movs	r1, #16
 800127c:	4808      	ldr	r0, [pc, #32]	@ (80012a0 <motorDriveDBackwardLeft+0xa0>)
 800127e:	f001 fa83 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR4 = speed;
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <motorDriveDBackwardLeft+0x9c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	79fa      	ldrb	r2, [r7, #7]
 8001288:	641a      	str	r2, [r3, #64]	@ 0x40

	//HAL_Delay(2000);	//Let them run in that direction for 2 seconds
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	0800d9e8 	.word	0x0800d9e8
 8001298:	40020800 	.word	0x40020800
 800129c:	200002f4 	.word	0x200002f4
 80012a0:	40020400 	.word	0x40020400

080012a4 <motorDriveDBackwardRight>:

void motorDriveDBackwardRight(uint8_t speed) // Tested and works
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
	CDC_Transmit_FS((uint8_t*)"Driving Diagonally Backward Right\r\n", strlen("Driving Diagonally Backward Right\r\n"));
 80012ae:	2123      	movs	r1, #35	@ 0x23
 80012b0:	4821      	ldr	r0, [pc, #132]	@ (8001338 <motorDriveDBackwardRight+0x94>)
 80012b2:	f009 f835 	bl	800a320 <CDC_Transmit_FS>

	//Front Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2101      	movs	r1, #1
 80012ba:	4820      	ldr	r0, [pc, #128]	@ (800133c <motorDriveDBackwardRight+0x98>)
 80012bc:	f001 fa64 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2102      	movs	r1, #2
 80012c4:	481d      	ldr	r0, [pc, #116]	@ (800133c <motorDriveDBackwardRight+0x98>)
 80012c6:	f001 fa5f 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR1 = speed-40;
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 80012d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <motorDriveDBackwardRight+0x9c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	635a      	str	r2, [r3, #52]	@ 0x34

	//Rear Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2104      	movs	r1, #4
 80012da:	4818      	ldr	r0, [pc, #96]	@ (800133c <motorDriveDBackwardRight+0x98>)
 80012dc:	f001 fa54 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80012e0:	2201      	movs	r2, #1
 80012e2:	2108      	movs	r1, #8
 80012e4:	4815      	ldr	r0, [pc, #84]	@ (800133c <motorDriveDBackwardRight+0x98>)
 80012e6:	f001 fa4f 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR2 = speed;
 80012ea:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <motorDriveDBackwardRight+0x9c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	79fa      	ldrb	r2, [r7, #7]
 80012f0:	639a      	str	r2, [r3, #56]	@ 0x38

	//Front Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80012f2:	2201      	movs	r2, #1
 80012f4:	2180      	movs	r1, #128	@ 0x80
 80012f6:	4813      	ldr	r0, [pc, #76]	@ (8001344 <motorDriveDBackwardRight+0xa0>)
 80012f8:	f001 fa46 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2140      	movs	r1, #64	@ 0x40
 8001300:	4810      	ldr	r0, [pc, #64]	@ (8001344 <motorDriveDBackwardRight+0xa0>)
 8001302:	f001 fa41 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR3 = speed;
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <motorDriveDBackwardRight+0x9c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	79fa      	ldrb	r2, [r7, #7]
 800130c:	63da      	str	r2, [r3, #60]	@ 0x3c

	//Rear Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	2120      	movs	r1, #32
 8001312:	480c      	ldr	r0, [pc, #48]	@ (8001344 <motorDriveDBackwardRight+0xa0>)
 8001314:	f001 fa38 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	2110      	movs	r1, #16
 800131c:	4809      	ldr	r0, [pc, #36]	@ (8001344 <motorDriveDBackwardRight+0xa0>)
 800131e:	f001 fa33 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR4 = speed-40;
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8001328:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <motorDriveDBackwardRight+0x9c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	641a      	str	r2, [r3, #64]	@ 0x40

	//HAL_Delay(2000);	//Let them run in that direction for 2 seconds
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	0800da0c 	.word	0x0800da0c
 800133c:	40020800 	.word	0x40020800
 8001340:	200002f4 	.word	0x200002f4
 8001344:	40020400 	.word	0x40020400

08001348 <motorDriveSpinRight>:

void motorDriveSpinRight(uint8_t speed) // Tested and works
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
	CDC_Transmit_FS((uint8_t*)"Car spin to the right (Clockwise)\r\n", strlen("Car spin to the right (Clockwise)\r\n"));
 8001352:	2123      	movs	r1, #35	@ 0x23
 8001354:	481f      	ldr	r0, [pc, #124]	@ (80013d4 <motorDriveSpinRight+0x8c>)
 8001356:	f008 ffe3 	bl	800a320 <CDC_Transmit_FS>

	//Front Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800135a:	2201      	movs	r2, #1
 800135c:	2101      	movs	r1, #1
 800135e:	481e      	ldr	r0, [pc, #120]	@ (80013d8 <motorDriveSpinRight+0x90>)
 8001360:	f001 fa12 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	2102      	movs	r1, #2
 8001368:	481b      	ldr	r0, [pc, #108]	@ (80013d8 <motorDriveSpinRight+0x90>)
 800136a:	f001 fa0d 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR1 = speed;
 800136e:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <motorDriveSpinRight+0x94>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	79fa      	ldrb	r2, [r7, #7]
 8001374:	635a      	str	r2, [r3, #52]	@ 0x34

	//Rear Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001376:	2201      	movs	r2, #1
 8001378:	2104      	movs	r1, #4
 800137a:	4817      	ldr	r0, [pc, #92]	@ (80013d8 <motorDriveSpinRight+0x90>)
 800137c:	f001 fa04 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2108      	movs	r1, #8
 8001384:	4814      	ldr	r0, [pc, #80]	@ (80013d8 <motorDriveSpinRight+0x90>)
 8001386:	f001 f9ff 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR2 = speed;
 800138a:	4b14      	ldr	r3, [pc, #80]	@ (80013dc <motorDriveSpinRight+0x94>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	79fa      	ldrb	r2, [r7, #7]
 8001390:	639a      	str	r2, [r3, #56]	@ 0x38

	//Front Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001392:	2201      	movs	r2, #1
 8001394:	2180      	movs	r1, #128	@ 0x80
 8001396:	4812      	ldr	r0, [pc, #72]	@ (80013e0 <motorDriveSpinRight+0x98>)
 8001398:	f001 f9f6 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2140      	movs	r1, #64	@ 0x40
 80013a0:	480f      	ldr	r0, [pc, #60]	@ (80013e0 <motorDriveSpinRight+0x98>)
 80013a2:	f001 f9f1 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR3 = speed;
 80013a6:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <motorDriveSpinRight+0x94>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	79fa      	ldrb	r2, [r7, #7]
 80013ac:	63da      	str	r2, [r3, #60]	@ 0x3c

	//Rear Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	2120      	movs	r1, #32
 80013b2:	480b      	ldr	r0, [pc, #44]	@ (80013e0 <motorDriveSpinRight+0x98>)
 80013b4:	f001 f9e8 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2110      	movs	r1, #16
 80013bc:	4808      	ldr	r0, [pc, #32]	@ (80013e0 <motorDriveSpinRight+0x98>)
 80013be:	f001 f9e3 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR4 = speed;
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <motorDriveSpinRight+0x94>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	79fa      	ldrb	r2, [r7, #7]
 80013c8:	641a      	str	r2, [r3, #64]	@ 0x40

	//HAL_Delay(2000);	//Let them run in that direction for 2 seconds
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	0800da30 	.word	0x0800da30
 80013d8:	40020800 	.word	0x40020800
 80013dc:	200002f4 	.word	0x200002f4
 80013e0:	40020400 	.word	0x40020400

080013e4 <motorDriveSpinLeft>:

void motorDriveSpinLeft(uint8_t speed) // Tested and works
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	CDC_Transmit_FS((uint8_t*)"Car spin to the left (CounterClockwise)\r\n", strlen("Car spin to the light (CounterClockwise)\r\n"));
 80013ee:	212a      	movs	r1, #42	@ 0x2a
 80013f0:	481f      	ldr	r0, [pc, #124]	@ (8001470 <motorDriveSpinLeft+0x8c>)
 80013f2:	f008 ff95 	bl	800a320 <CDC_Transmit_FS>

	//Front Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2101      	movs	r1, #1
 80013fa:	481e      	ldr	r0, [pc, #120]	@ (8001474 <motorDriveSpinLeft+0x90>)
 80013fc:	f001 f9c4 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2102      	movs	r1, #2
 8001404:	481b      	ldr	r0, [pc, #108]	@ (8001474 <motorDriveSpinLeft+0x90>)
 8001406:	f001 f9bf 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR1 = speed;
 800140a:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <motorDriveSpinLeft+0x94>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	79fa      	ldrb	r2, [r7, #7]
 8001410:	635a      	str	r2, [r3, #52]	@ 0x34

	//Rear Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2104      	movs	r1, #4
 8001416:	4817      	ldr	r0, [pc, #92]	@ (8001474 <motorDriveSpinLeft+0x90>)
 8001418:	f001 f9b6 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2108      	movs	r1, #8
 8001420:	4814      	ldr	r0, [pc, #80]	@ (8001474 <motorDriveSpinLeft+0x90>)
 8001422:	f001 f9b1 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR2 = speed;
 8001426:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <motorDriveSpinLeft+0x94>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	79fa      	ldrb	r2, [r7, #7]
 800142c:	639a      	str	r2, [r3, #56]	@ 0x38

	//Front Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2180      	movs	r1, #128	@ 0x80
 8001432:	4812      	ldr	r0, [pc, #72]	@ (800147c <motorDriveSpinLeft+0x98>)
 8001434:	f001 f9a8 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2140      	movs	r1, #64	@ 0x40
 800143c:	480f      	ldr	r0, [pc, #60]	@ (800147c <motorDriveSpinLeft+0x98>)
 800143e:	f001 f9a3 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR3 = speed;
 8001442:	4b0d      	ldr	r3, [pc, #52]	@ (8001478 <motorDriveSpinLeft+0x94>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	79fa      	ldrb	r2, [r7, #7]
 8001448:	63da      	str	r2, [r3, #60]	@ 0x3c

	//Rear Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	2120      	movs	r1, #32
 800144e:	480b      	ldr	r0, [pc, #44]	@ (800147c <motorDriveSpinLeft+0x98>)
 8001450:	f001 f99a 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	2110      	movs	r1, #16
 8001458:	4808      	ldr	r0, [pc, #32]	@ (800147c <motorDriveSpinLeft+0x98>)
 800145a:	f001 f995 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR4 = speed;
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <motorDriveSpinLeft+0x94>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	79fa      	ldrb	r2, [r7, #7]
 8001464:	641a      	str	r2, [r3, #64]	@ 0x40

	//HAL_Delay(2000);	//Let them run in that direction for 2 seconds
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	0800da54 	.word	0x0800da54
 8001474:	40020800 	.word	0x40020800
 8001478:	200002f4 	.word	0x200002f4
 800147c:	40020400 	.word	0x40020400

08001480 <motorDriveSideLeft>:

void motorDriveSideLeft(uint8_t speed) // Tested and works
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
	CDC_Transmit_FS((uint8_t*)"Driving Sideways to the left\r\n", strlen("Driving Sideways to the left\r\n"));
 800148a:	211e      	movs	r1, #30
 800148c:	481f      	ldr	r0, [pc, #124]	@ (800150c <motorDriveSideLeft+0x8c>)
 800148e:	f008 ff47 	bl	800a320 <CDC_Transmit_FS>

	//Front Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2101      	movs	r1, #1
 8001496:	481e      	ldr	r0, [pc, #120]	@ (8001510 <motorDriveSideLeft+0x90>)
 8001498:	f001 f976 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800149c:	2201      	movs	r2, #1
 800149e:	2102      	movs	r1, #2
 80014a0:	481b      	ldr	r0, [pc, #108]	@ (8001510 <motorDriveSideLeft+0x90>)
 80014a2:	f001 f971 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR1 = speed;
 80014a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <motorDriveSideLeft+0x94>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	79fa      	ldrb	r2, [r7, #7]
 80014ac:	635a      	str	r2, [r3, #52]	@ 0x34

	//Rear Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80014ae:	2201      	movs	r2, #1
 80014b0:	2104      	movs	r1, #4
 80014b2:	4817      	ldr	r0, [pc, #92]	@ (8001510 <motorDriveSideLeft+0x90>)
 80014b4:	f001 f968 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2108      	movs	r1, #8
 80014bc:	4814      	ldr	r0, [pc, #80]	@ (8001510 <motorDriveSideLeft+0x90>)
 80014be:	f001 f963 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR2 = speed;
 80014c2:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <motorDriveSideLeft+0x94>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	79fa      	ldrb	r2, [r7, #7]
 80014c8:	639a      	str	r2, [r3, #56]	@ 0x38

	//Front Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	2180      	movs	r1, #128	@ 0x80
 80014ce:	4812      	ldr	r0, [pc, #72]	@ (8001518 <motorDriveSideLeft+0x98>)
 80014d0:	f001 f95a 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2140      	movs	r1, #64	@ 0x40
 80014d8:	480f      	ldr	r0, [pc, #60]	@ (8001518 <motorDriveSideLeft+0x98>)
 80014da:	f001 f955 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR3 = speed;
 80014de:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <motorDriveSideLeft+0x94>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	63da      	str	r2, [r3, #60]	@ 0x3c

	//Rear Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2120      	movs	r1, #32
 80014ea:	480b      	ldr	r0, [pc, #44]	@ (8001518 <motorDriveSideLeft+0x98>)
 80014ec:	f001 f94c 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	2110      	movs	r1, #16
 80014f4:	4808      	ldr	r0, [pc, #32]	@ (8001518 <motorDriveSideLeft+0x98>)
 80014f6:	f001 f947 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR4 = speed;
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <motorDriveSideLeft+0x94>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	79fa      	ldrb	r2, [r7, #7]
 8001500:	641a      	str	r2, [r3, #64]	@ 0x40

	//HAL_Delay(2000);	//Let them run in that direction for 2 seconds
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	0800da80 	.word	0x0800da80
 8001510:	40020800 	.word	0x40020800
 8001514:	200002f4 	.word	0x200002f4
 8001518:	40020400 	.word	0x40020400

0800151c <motorDriveSideRight>:

void motorDriveSideRight(uint8_t speed) // Tested and works
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
	CDC_Transmit_FS((uint8_t*)"Driving Sideways to the right\r\n", strlen("Driving Sideways to the right\r\n"));
 8001526:	211f      	movs	r1, #31
 8001528:	481f      	ldr	r0, [pc, #124]	@ (80015a8 <motorDriveSideRight+0x8c>)
 800152a:	f008 fef9 	bl	800a320 <CDC_Transmit_FS>

	//Front Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800152e:	2201      	movs	r2, #1
 8001530:	2101      	movs	r1, #1
 8001532:	481e      	ldr	r0, [pc, #120]	@ (80015ac <motorDriveSideRight+0x90>)
 8001534:	f001 f928 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2102      	movs	r1, #2
 800153c:	481b      	ldr	r0, [pc, #108]	@ (80015ac <motorDriveSideRight+0x90>)
 800153e:	f001 f923 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR1 = speed;
 8001542:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <motorDriveSideRight+0x94>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	79fa      	ldrb	r2, [r7, #7]
 8001548:	635a      	str	r2, [r3, #52]	@ 0x34

	//Rear Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2104      	movs	r1, #4
 800154e:	4817      	ldr	r0, [pc, #92]	@ (80015ac <motorDriveSideRight+0x90>)
 8001550:	f001 f91a 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001554:	2201      	movs	r2, #1
 8001556:	2108      	movs	r1, #8
 8001558:	4814      	ldr	r0, [pc, #80]	@ (80015ac <motorDriveSideRight+0x90>)
 800155a:	f001 f915 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR2 = speed;
 800155e:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <motorDriveSideRight+0x94>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	79fa      	ldrb	r2, [r7, #7]
 8001564:	639a      	str	r2, [r3, #56]	@ 0x38

	//Front Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2180      	movs	r1, #128	@ 0x80
 800156a:	4812      	ldr	r0, [pc, #72]	@ (80015b4 <motorDriveSideRight+0x98>)
 800156c:	f001 f90c 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001570:	2201      	movs	r2, #1
 8001572:	2140      	movs	r1, #64	@ 0x40
 8001574:	480f      	ldr	r0, [pc, #60]	@ (80015b4 <motorDriveSideRight+0x98>)
 8001576:	f001 f907 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR3 = speed;
 800157a:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <motorDriveSideRight+0x94>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	79fa      	ldrb	r2, [r7, #7]
 8001580:	63da      	str	r2, [r3, #60]	@ 0x3c

	//Rear Left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001582:	2201      	movs	r2, #1
 8001584:	2120      	movs	r1, #32
 8001586:	480b      	ldr	r0, [pc, #44]	@ (80015b4 <motorDriveSideRight+0x98>)
 8001588:	f001 f8fe 	bl	8002788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	2110      	movs	r1, #16
 8001590:	4808      	ldr	r0, [pc, #32]	@ (80015b4 <motorDriveSideRight+0x98>)
 8001592:	f001 f8f9 	bl	8002788 <HAL_GPIO_WritePin>
	htim3.Instance->CCR4 = speed;
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <motorDriveSideRight+0x94>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	79fa      	ldrb	r2, [r7, #7]
 800159c:	641a      	str	r2, [r3, #64]	@ 0x40

	//HAL_Delay(2000);	//Let them run in that direction for 2 seconds
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	0800daa0 	.word	0x0800daa0
 80015ac:	40020800 	.word	0x40020800
 80015b0:	200002f4 	.word	0x200002f4
 80015b4:	40020400 	.word	0x40020400

080015b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015bc:	f000 fd16 	bl	8001fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c0:	f000 f836 	bl	8001630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c4:	f000 f960 	bl	8001888 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80015c8:	f008 fdec 	bl	800a1a4 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80015cc:	f000 f89c 	bl	8001708 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80015d0:	f000 f930 	bl	8001834 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80015d4:	2100      	movs	r1, #0
 80015d6:	4813      	ldr	r0, [pc, #76]	@ (8001624 <main+0x6c>)
 80015d8:	f003 fd48 	bl	800506c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80015dc:	2104      	movs	r1, #4
 80015de:	4811      	ldr	r0, [pc, #68]	@ (8001624 <main+0x6c>)
 80015e0:	f003 fd44 	bl	800506c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80015e4:	2108      	movs	r1, #8
 80015e6:	480f      	ldr	r0, [pc, #60]	@ (8001624 <main+0x6c>)
 80015e8:	f003 fd40 	bl	800506c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80015ec:	210c      	movs	r1, #12
 80015ee:	480d      	ldr	r0, [pc, #52]	@ (8001624 <main+0x6c>)
 80015f0:	f003 fd3c 	bl	800506c <HAL_TIM_PWM_Start>

  // Start the first UART receive interrupt
  HAL_UART_Receive_IT(&huart1, RxBuff, 7);
 80015f4:	2207      	movs	r2, #7
 80015f6:	490c      	ldr	r1, [pc, #48]	@ (8001628 <main+0x70>)
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <main+0x74>)
 80015fa:	f004 fb71 	bl	8005ce0 <HAL_UART_Receive_IT>


//  Duty cycle
  htim3.Instance->CCR1 = 50;
 80015fe:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <main+0x6c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2232      	movs	r2, #50	@ 0x32
 8001604:	635a      	str	r2, [r3, #52]	@ 0x34
  htim3.Instance->CCR2 = 50;
 8001606:	4b07      	ldr	r3, [pc, #28]	@ (8001624 <main+0x6c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2232      	movs	r2, #50	@ 0x32
 800160c:	639a      	str	r2, [r3, #56]	@ 0x38
  htim3.Instance->CCR3 = 50;
 800160e:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <main+0x6c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2232      	movs	r2, #50	@ 0x32
 8001614:	63da      	str	r2, [r3, #60]	@ 0x3c
  htim3.Instance->CCR4 = 50;
 8001616:	4b03      	ldr	r3, [pc, #12]	@ (8001624 <main+0x6c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2232      	movs	r2, #50	@ 0x32
 800161c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (TRUE)
 800161e:	bf00      	nop
 8001620:	e7fd      	b.n	800161e <main+0x66>
 8001622:	bf00      	nop
 8001624:	200002f4 	.word	0x200002f4
 8001628:	20000384 	.word	0x20000384
 800162c:	2000033c 	.word	0x2000033c

08001630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b094      	sub	sp, #80	@ 0x50
 8001634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	2234      	movs	r2, #52	@ 0x34
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f00a f8bd 	bl	800b7be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001654:	2300      	movs	r3, #0
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	4b29      	ldr	r3, [pc, #164]	@ (8001700 <SystemClock_Config+0xd0>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	4a28      	ldr	r2, [pc, #160]	@ (8001700 <SystemClock_Config+0xd0>)
 800165e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001662:	6413      	str	r3, [r2, #64]	@ 0x40
 8001664:	4b26      	ldr	r3, [pc, #152]	@ (8001700 <SystemClock_Config+0xd0>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001670:	2300      	movs	r3, #0
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	4b23      	ldr	r3, [pc, #140]	@ (8001704 <SystemClock_Config+0xd4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a22      	ldr	r2, [pc, #136]	@ (8001704 <SystemClock_Config+0xd4>)
 800167a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <SystemClock_Config+0xd4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800168c:	2301      	movs	r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001690:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001694:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001696:	2302      	movs	r3, #2
 8001698:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800169a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800169e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016a0:	2304      	movs	r3, #4
 80016a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016a4:	23a8      	movs	r3, #168	@ 0xa8
 80016a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016a8:	2302      	movs	r3, #2
 80016aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016ac:	2307      	movs	r3, #7
 80016ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016b0:	2302      	movs	r3, #2
 80016b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4618      	mov	r0, r3
 80016ba:	f003 f991 	bl	80049e0 <HAL_RCC_OscConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016c4:	f000 fa52 	bl	8001b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c8:	230f      	movs	r3, #15
 80016ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016cc:	2302      	movs	r3, #2
 80016ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	2105      	movs	r1, #5
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 fb06 	bl	8003cf8 <HAL_RCC_ClockConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80016f2:	f000 fa3b 	bl	8001b6c <Error_Handler>
  }
}
 80016f6:	bf00      	nop
 80016f8:	3750      	adds	r7, #80	@ 0x50
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40007000 	.word	0x40007000

08001708 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08e      	sub	sp, #56	@ 0x38
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171c:	f107 0320 	add.w	r3, r7, #32
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
 8001734:	615a      	str	r2, [r3, #20]
 8001736:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001738:	4b3c      	ldr	r3, [pc, #240]	@ (800182c <MX_TIM3_Init+0x124>)
 800173a:	4a3d      	ldr	r2, [pc, #244]	@ (8001830 <MX_TIM3_Init+0x128>)
 800173c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35-1;
 800173e:	4b3b      	ldr	r3, [pc, #236]	@ (800182c <MX_TIM3_Init+0x124>)
 8001740:	2222      	movs	r2, #34	@ 0x22
 8001742:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001744:	4b39      	ldr	r3, [pc, #228]	@ (800182c <MX_TIM3_Init+0x124>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800174a:	4b38      	ldr	r3, [pc, #224]	@ (800182c <MX_TIM3_Init+0x124>)
 800174c:	2264      	movs	r2, #100	@ 0x64
 800174e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001750:	4b36      	ldr	r3, [pc, #216]	@ (800182c <MX_TIM3_Init+0x124>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001756:	4b35      	ldr	r3, [pc, #212]	@ (800182c <MX_TIM3_Init+0x124>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800175c:	4833      	ldr	r0, [pc, #204]	@ (800182c <MX_TIM3_Init+0x124>)
 800175e:	f003 fbdd 	bl	8004f1c <HAL_TIM_Base_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001768:	f000 fa00 	bl	8001b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001770:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001772:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001776:	4619      	mov	r1, r3
 8001778:	482c      	ldr	r0, [pc, #176]	@ (800182c <MX_TIM3_Init+0x124>)
 800177a:	f003 fe01 	bl	8005380 <HAL_TIM_ConfigClockSource>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001784:	f000 f9f2 	bl	8001b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001788:	4828      	ldr	r0, [pc, #160]	@ (800182c <MX_TIM3_Init+0x124>)
 800178a:	f003 fc16 	bl	8004fba <HAL_TIM_PWM_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001794:	f000 f9ea 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017a0:	f107 0320 	add.w	r3, r7, #32
 80017a4:	4619      	mov	r1, r3
 80017a6:	4821      	ldr	r0, [pc, #132]	@ (800182c <MX_TIM3_Init+0x124>)
 80017a8:	f004 f9ce 	bl	8005b48 <HAL_TIMEx_MasterConfigSynchronization>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80017b2:	f000 f9db 	bl	8001b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b6:	2360      	movs	r3, #96	@ 0x60
 80017b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2200      	movs	r2, #0
 80017ca:	4619      	mov	r1, r3
 80017cc:	4817      	ldr	r0, [pc, #92]	@ (800182c <MX_TIM3_Init+0x124>)
 80017ce:	f003 fd15 	bl	80051fc <HAL_TIM_PWM_ConfigChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80017d8:	f000 f9c8 	bl	8001b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2204      	movs	r2, #4
 80017e0:	4619      	mov	r1, r3
 80017e2:	4812      	ldr	r0, [pc, #72]	@ (800182c <MX_TIM3_Init+0x124>)
 80017e4:	f003 fd0a 	bl	80051fc <HAL_TIM_PWM_ConfigChannel>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 80017ee:	f000 f9bd 	bl	8001b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2208      	movs	r2, #8
 80017f6:	4619      	mov	r1, r3
 80017f8:	480c      	ldr	r0, [pc, #48]	@ (800182c <MX_TIM3_Init+0x124>)
 80017fa:	f003 fcff 	bl	80051fc <HAL_TIM_PWM_ConfigChannel>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8001804:	f000 f9b2 	bl	8001b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	220c      	movs	r2, #12
 800180c:	4619      	mov	r1, r3
 800180e:	4807      	ldr	r0, [pc, #28]	@ (800182c <MX_TIM3_Init+0x124>)
 8001810:	f003 fcf4 	bl	80051fc <HAL_TIM_PWM_ConfigChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 800181a:	f000 f9a7 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800181e:	4803      	ldr	r0, [pc, #12]	@ (800182c <MX_TIM3_Init+0x124>)
 8001820:	f000 f9f4 	bl	8001c0c <HAL_TIM_MspPostInit>

}
 8001824:	bf00      	nop
 8001826:	3738      	adds	r7, #56	@ 0x38
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200002f4 	.word	0x200002f4
 8001830:	40000400 	.word	0x40000400

08001834 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001838:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 800183a:	4a12      	ldr	r2, [pc, #72]	@ (8001884 <MX_USART1_UART_Init+0x50>)
 800183c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800183e:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 8001840:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001846:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001852:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001858:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 800185a:	220c      	movs	r2, #12
 800185c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185e:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001864:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 800186c:	f004 f9e8 	bl	8005c40 <HAL_UART_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001876:	f000 f979 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	2000033c 	.word	0x2000033c
 8001884:	40011000 	.word	0x40011000

08001888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	@ 0x28
 800188c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b30      	ldr	r3, [pc, #192]	@ (8001964 <MX_GPIO_Init+0xdc>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001964 <MX_GPIO_Init+0xdc>)
 80018a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001964 <MX_GPIO_Init+0xdc>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b29      	ldr	r3, [pc, #164]	@ (8001964 <MX_GPIO_Init+0xdc>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a28      	ldr	r2, [pc, #160]	@ (8001964 <MX_GPIO_Init+0xdc>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b26      	ldr	r3, [pc, #152]	@ (8001964 <MX_GPIO_Init+0xdc>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	4b22      	ldr	r3, [pc, #136]	@ (8001964 <MX_GPIO_Init+0xdc>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	4a21      	ldr	r2, [pc, #132]	@ (8001964 <MX_GPIO_Init+0xdc>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001964 <MX_GPIO_Init+0xdc>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <MX_GPIO_Init+0xdc>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001964 <MX_GPIO_Init+0xdc>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6313      	str	r3, [r2, #48]	@ 0x30
 8001902:	4b18      	ldr	r3, [pc, #96]	@ (8001964 <MX_GPIO_Init+0xdc>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	210f      	movs	r1, #15
 8001912:	4815      	ldr	r0, [pc, #84]	@ (8001968 <MX_GPIO_Init+0xe0>)
 8001914:	f000 ff38 	bl	8002788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	21f0      	movs	r1, #240	@ 0xf0
 800191c:	4813      	ldr	r0, [pc, #76]	@ (800196c <MX_GPIO_Init+0xe4>)
 800191e:	f000 ff33 	bl	8002788 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001922:	230f      	movs	r3, #15
 8001924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001926:	2301      	movs	r3, #1
 8001928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192e:	2300      	movs	r3, #0
 8001930:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	480b      	ldr	r0, [pc, #44]	@ (8001968 <MX_GPIO_Init+0xe0>)
 800193a:	f000 fd91 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800193e:	23f0      	movs	r3, #240	@ 0xf0
 8001940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	@ (800196c <MX_GPIO_Init+0xe4>)
 8001956:	f000 fd83 	bl	8002460 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800195a:	bf00      	nop
 800195c:	3728      	adds	r7, #40	@ 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	40020800 	.word	0x40020800
 800196c:	40020400 	.word	0x40020400

08001970 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	sprintf(usbCdcData,"Received: %s\r\n",RxBuff);
 8001978:	4a6e      	ldr	r2, [pc, #440]	@ (8001b34 <HAL_UART_RxCpltCallback+0x1c4>)
 800197a:	496f      	ldr	r1, [pc, #444]	@ (8001b38 <HAL_UART_RxCpltCallback+0x1c8>)
 800197c:	486f      	ldr	r0, [pc, #444]	@ (8001b3c <HAL_UART_RxCpltCallback+0x1cc>)
 800197e:	f009 febb 	bl	800b6f8 <siprintf>
	CDC_Transmit_FS((uint8_t*)usbCdcData,sizeof(usbCdcData));
 8001982:	211e      	movs	r1, #30
 8001984:	486d      	ldr	r0, [pc, #436]	@ (8001b3c <HAL_UART_RxCpltCallback+0x1cc>)
 8001986:	f008 fccb 	bl	800a320 <CDC_Transmit_FS>

	if (huart->Instance == USART1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a6c      	ldr	r2, [pc, #432]	@ (8001b40 <HAL_UART_RxCpltCallback+0x1d0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	f040 80c1 	bne.w	8001b18 <HAL_UART_RxCpltCallback+0x1a8>
	{
		if(!strcmp(RxBuff, "TOGGLED"))
 8001996:	496b      	ldr	r1, [pc, #428]	@ (8001b44 <HAL_UART_RxCpltCallback+0x1d4>)
 8001998:	4866      	ldr	r0, [pc, #408]	@ (8001b34 <HAL_UART_RxCpltCallback+0x1c4>)
 800199a:	f7fe fc39 	bl	8000210 <strcmp>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d112      	bne.n	80019ca <HAL_UART_RxCpltCallback+0x5a>
		{
			if(clutch == 0)
 80019a4:	4b68      	ldr	r3, [pc, #416]	@ (8001b48 <HAL_UART_RxCpltCallback+0x1d8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d105      	bne.n	80019b8 <HAL_UART_RxCpltCallback+0x48>
			{
				clutch++;
 80019ac:	4b66      	ldr	r3, [pc, #408]	@ (8001b48 <HAL_UART_RxCpltCallback+0x1d8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	3301      	adds	r3, #1
 80019b2:	4a65      	ldr	r2, [pc, #404]	@ (8001b48 <HAL_UART_RxCpltCallback+0x1d8>)
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e008      	b.n	80019ca <HAL_UART_RxCpltCallback+0x5a>
			}
			else if(clutch == 1)
 80019b8:	4b63      	ldr	r3, [pc, #396]	@ (8001b48 <HAL_UART_RxCpltCallback+0x1d8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d104      	bne.n	80019ca <HAL_UART_RxCpltCallback+0x5a>
			{
				clutch--;
 80019c0:	4b61      	ldr	r3, [pc, #388]	@ (8001b48 <HAL_UART_RxCpltCallback+0x1d8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	4a60      	ldr	r2, [pc, #384]	@ (8001b48 <HAL_UART_RxCpltCallback+0x1d8>)
 80019c8:	6013      	str	r3, [r2, #0]
			}
		}
		if(clutch == 0)
 80019ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001b48 <HAL_UART_RxCpltCallback+0x1d8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d14f      	bne.n	8001a72 <HAL_UART_RxCpltCallback+0x102>
		{
			if(!strcmp(RxBuff,"MOVE_F0"))
 80019d2:	495e      	ldr	r1, [pc, #376]	@ (8001b4c <HAL_UART_RxCpltCallback+0x1dc>)
 80019d4:	4857      	ldr	r0, [pc, #348]	@ (8001b34 <HAL_UART_RxCpltCallback+0x1c4>)
 80019d6:	f7fe fc1b 	bl	8000210 <strcmp>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d106      	bne.n	80019ee <HAL_UART_RxCpltCallback+0x7e>
			{
				motorDriveForward(speed);
 80019e0:	4b5b      	ldr	r3, [pc, #364]	@ (8001b50 <HAL_UART_RxCpltCallback+0x1e0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff faca 	bl	8000f80 <motorDriveForward>
 80019ec:	e094      	b.n	8001b18 <HAL_UART_RxCpltCallback+0x1a8>
			}
			else if(!strcmp(RxBuff,"MOVE_F1"))
 80019ee:	4959      	ldr	r1, [pc, #356]	@ (8001b54 <HAL_UART_RxCpltCallback+0x1e4>)
 80019f0:	4850      	ldr	r0, [pc, #320]	@ (8001b34 <HAL_UART_RxCpltCallback+0x1c4>)
 80019f2:	f7fe fc0d 	bl	8000210 <strcmp>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d106      	bne.n	8001a0a <HAL_UART_RxCpltCallback+0x9a>
			{
				motorDriveBackward(speed);
 80019fc:	4b54      	ldr	r3, [pc, #336]	@ (8001b50 <HAL_UART_RxCpltCallback+0x1e0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fb0a 	bl	800101c <motorDriveBackward>
 8001a08:	e086      	b.n	8001b18 <HAL_UART_RxCpltCallback+0x1a8>
			}
			else if(!strcmp(RxBuff,"MOVE_F2"))
 8001a0a:	4953      	ldr	r1, [pc, #332]	@ (8001b58 <HAL_UART_RxCpltCallback+0x1e8>)
 8001a0c:	4849      	ldr	r0, [pc, #292]	@ (8001b34 <HAL_UART_RxCpltCallback+0x1c4>)
 8001a0e:	f7fe fbff 	bl	8000210 <strcmp>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d106      	bne.n	8001a26 <HAL_UART_RxCpltCallback+0xb6>
			{
				motorDriveDForwardLeft(speed);
 8001a18:	4b4d      	ldr	r3, [pc, #308]	@ (8001b50 <HAL_UART_RxCpltCallback+0x1e0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fb9c 	bl	800115c <motorDriveDForwardLeft>
 8001a24:	e078      	b.n	8001b18 <HAL_UART_RxCpltCallback+0x1a8>
			}
			else if(!strcmp(RxBuff,"MOVE_F3"))
 8001a26:	494d      	ldr	r1, [pc, #308]	@ (8001b5c <HAL_UART_RxCpltCallback+0x1ec>)
 8001a28:	4842      	ldr	r0, [pc, #264]	@ (8001b34 <HAL_UART_RxCpltCallback+0x1c4>)
 8001a2a:	f7fe fbf1 	bl	8000210 <strcmp>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d106      	bne.n	8001a42 <HAL_UART_RxCpltCallback+0xd2>
			{
				motorDriveDForwardRight(speed);
 8001a34:	4b46      	ldr	r3, [pc, #280]	@ (8001b50 <HAL_UART_RxCpltCallback+0x1e0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fb3c 	bl	80010b8 <motorDriveDForwardRight>
 8001a40:	e06a      	b.n	8001b18 <HAL_UART_RxCpltCallback+0x1a8>
			}
			else if(!strcmp(RxBuff,"MOVE_F4"))
 8001a42:	4947      	ldr	r1, [pc, #284]	@ (8001b60 <HAL_UART_RxCpltCallback+0x1f0>)
 8001a44:	483b      	ldr	r0, [pc, #236]	@ (8001b34 <HAL_UART_RxCpltCallback+0x1c4>)
 8001a46:	f7fe fbe3 	bl	8000210 <strcmp>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d106      	bne.n	8001a5e <HAL_UART_RxCpltCallback+0xee>
			{
				motorDriveDBackwardLeft(speed);
 8001a50:	4b3f      	ldr	r3, [pc, #252]	@ (8001b50 <HAL_UART_RxCpltCallback+0x1e0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fbd2 	bl	8001200 <motorDriveDBackwardLeft>
 8001a5c:	e05c      	b.n	8001b18 <HAL_UART_RxCpltCallback+0x1a8>
			}
			else if(!strcmp(RxBuff, "MOVE_F5"))
 8001a5e:	4941      	ldr	r1, [pc, #260]	@ (8001b64 <HAL_UART_RxCpltCallback+0x1f4>)
 8001a60:	4834      	ldr	r0, [pc, #208]	@ (8001b34 <HAL_UART_RxCpltCallback+0x1c4>)
 8001a62:	f7fe fbd5 	bl	8000210 <strcmp>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d155      	bne.n	8001b18 <HAL_UART_RxCpltCallback+0x1a8>
			{
				motorStop();
 8001a6c:	f7ff fa44 	bl	8000ef8 <motorStop>
 8001a70:	e052      	b.n	8001b18 <HAL_UART_RxCpltCallback+0x1a8>
			}
		}
		else if(clutch == 1)
 8001a72:	4b35      	ldr	r3, [pc, #212]	@ (8001b48 <HAL_UART_RxCpltCallback+0x1d8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d14e      	bne.n	8001b18 <HAL_UART_RxCpltCallback+0x1a8>
		{
			if(!strcmp(RxBuff,"MOVE_F0"))
 8001a7a:	4934      	ldr	r1, [pc, #208]	@ (8001b4c <HAL_UART_RxCpltCallback+0x1dc>)
 8001a7c:	482d      	ldr	r0, [pc, #180]	@ (8001b34 <HAL_UART_RxCpltCallback+0x1c4>)
 8001a7e:	f7fe fbc7 	bl	8000210 <strcmp>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d106      	bne.n	8001a96 <HAL_UART_RxCpltCallback+0x126>
			{
				motorDriveDBackwardRight(speed);
 8001a88:	4b31      	ldr	r3, [pc, #196]	@ (8001b50 <HAL_UART_RxCpltCallback+0x1e0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fc08 	bl	80012a4 <motorDriveDBackwardRight>
 8001a94:	e040      	b.n	8001b18 <HAL_UART_RxCpltCallback+0x1a8>
			}
			else if(!strcmp(RxBuff,"MOVE_F1"))
 8001a96:	492f      	ldr	r1, [pc, #188]	@ (8001b54 <HAL_UART_RxCpltCallback+0x1e4>)
 8001a98:	4826      	ldr	r0, [pc, #152]	@ (8001b34 <HAL_UART_RxCpltCallback+0x1c4>)
 8001a9a:	f7fe fbb9 	bl	8000210 <strcmp>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d106      	bne.n	8001ab2 <HAL_UART_RxCpltCallback+0x142>
			{
				motorDriveSpinRight(speed);
 8001aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b50 <HAL_UART_RxCpltCallback+0x1e0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fc4c 	bl	8001348 <motorDriveSpinRight>
 8001ab0:	e032      	b.n	8001b18 <HAL_UART_RxCpltCallback+0x1a8>
			}
			else if(!strcmp(RxBuff,"MOVE_F2"))
 8001ab2:	4929      	ldr	r1, [pc, #164]	@ (8001b58 <HAL_UART_RxCpltCallback+0x1e8>)
 8001ab4:	481f      	ldr	r0, [pc, #124]	@ (8001b34 <HAL_UART_RxCpltCallback+0x1c4>)
 8001ab6:	f7fe fbab 	bl	8000210 <strcmp>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d106      	bne.n	8001ace <HAL_UART_RxCpltCallback+0x15e>
			{
				motorDriveSpinLeft(speed);
 8001ac0:	4b23      	ldr	r3, [pc, #140]	@ (8001b50 <HAL_UART_RxCpltCallback+0x1e0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fc8c 	bl	80013e4 <motorDriveSpinLeft>
 8001acc:	e024      	b.n	8001b18 <HAL_UART_RxCpltCallback+0x1a8>
			}
			else if(!strcmp(RxBuff,"MOVE_F3"))
 8001ace:	4923      	ldr	r1, [pc, #140]	@ (8001b5c <HAL_UART_RxCpltCallback+0x1ec>)
 8001ad0:	4818      	ldr	r0, [pc, #96]	@ (8001b34 <HAL_UART_RxCpltCallback+0x1c4>)
 8001ad2:	f7fe fb9d 	bl	8000210 <strcmp>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d106      	bne.n	8001aea <HAL_UART_RxCpltCallback+0x17a>
			{
				motorDriveSideRight(speed);
 8001adc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b50 <HAL_UART_RxCpltCallback+0x1e0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fd1a 	bl	800151c <motorDriveSideRight>
 8001ae8:	e016      	b.n	8001b18 <HAL_UART_RxCpltCallback+0x1a8>
			}
			else if(!strcmp(RxBuff,"MOVE_F4"))
 8001aea:	491d      	ldr	r1, [pc, #116]	@ (8001b60 <HAL_UART_RxCpltCallback+0x1f0>)
 8001aec:	4811      	ldr	r0, [pc, #68]	@ (8001b34 <HAL_UART_RxCpltCallback+0x1c4>)
 8001aee:	f7fe fb8f 	bl	8000210 <strcmp>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d106      	bne.n	8001b06 <HAL_UART_RxCpltCallback+0x196>
			{
				motorDriveSideLeft(speed);
 8001af8:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <HAL_UART_RxCpltCallback+0x1e0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fcbe 	bl	8001480 <motorDriveSideLeft>
 8001b04:	e008      	b.n	8001b18 <HAL_UART_RxCpltCallback+0x1a8>
			}
			else if(!strcmp(RxBuff, "MOVE_F5"))
 8001b06:	4917      	ldr	r1, [pc, #92]	@ (8001b64 <HAL_UART_RxCpltCallback+0x1f4>)
 8001b08:	480a      	ldr	r0, [pc, #40]	@ (8001b34 <HAL_UART_RxCpltCallback+0x1c4>)
 8001b0a:	f7fe fb81 	bl	8000210 <strcmp>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_UART_RxCpltCallback+0x1a8>
			{
				motorStop();
 8001b14:	f7ff f9f0 	bl	8000ef8 <motorStop>
			}
		}
	}
	memset(RxBuff,'\0',sizeof(RxBuff)); //Clear the string
 8001b18:	2207      	movs	r2, #7
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4805      	ldr	r0, [pc, #20]	@ (8001b34 <HAL_UART_RxCpltCallback+0x1c4>)
 8001b1e:	f009 fe4e 	bl	800b7be <memset>
	HAL_UART_Receive_IT(&huart1, RxBuff, 7); //Restart UART in Rx mode with interrupt
 8001b22:	2207      	movs	r2, #7
 8001b24:	4903      	ldr	r1, [pc, #12]	@ (8001b34 <HAL_UART_RxCpltCallback+0x1c4>)
 8001b26:	4810      	ldr	r0, [pc, #64]	@ (8001b68 <HAL_UART_RxCpltCallback+0x1f8>)
 8001b28:	f004 f8da 	bl	8005ce0 <HAL_UART_Receive_IT>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000384 	.word	0x20000384
 8001b38:	0800dac0 	.word	0x0800dac0
 8001b3c:	2000038c 	.word	0x2000038c
 8001b40:	40011000 	.word	0x40011000
 8001b44:	0800dad0 	.word	0x0800dad0
 8001b48:	200003ac 	.word	0x200003ac
 8001b4c:	0800dad8 	.word	0x0800dad8
 8001b50:	20000000 	.word	0x20000000
 8001b54:	0800dae0 	.word	0x0800dae0
 8001b58:	0800dae8 	.word	0x0800dae8
 8001b5c:	0800daf0 	.word	0x0800daf0
 8001b60:	0800daf8 	.word	0x0800daf8
 8001b64:	0800db00 	.word	0x0800db00
 8001b68:	2000033c 	.word	0x2000033c

08001b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b70:	b672      	cpsid	i
}
 8001b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <Error_Handler+0x8>

08001b78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <HAL_MspInit+0x4c>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b86:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc4 <HAL_MspInit+0x4c>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <HAL_MspInit+0x4c>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	603b      	str	r3, [r7, #0]
 8001b9e:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <HAL_MspInit+0x4c>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	4a08      	ldr	r2, [pc, #32]	@ (8001bc4 <HAL_MspInit+0x4c>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <HAL_MspInit+0x4c>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800

08001bc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001c04 <HAL_TIM_Base_MspInit+0x3c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d10d      	bne.n	8001bf6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <HAL_TIM_Base_MspInit+0x40>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	4a09      	ldr	r2, [pc, #36]	@ (8001c08 <HAL_TIM_Base_MspInit+0x40>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bea:	4b07      	ldr	r3, [pc, #28]	@ (8001c08 <HAL_TIM_Base_MspInit+0x40>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001bf6:	bf00      	nop
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40000400 	.word	0x40000400
 8001c08:	40023800 	.word	0x40023800

08001c0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	@ 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a21      	ldr	r2, [pc, #132]	@ (8001cb0 <HAL_TIM_MspPostInit+0xa4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d13b      	bne.n	8001ca6 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	4b20      	ldr	r3, [pc, #128]	@ (8001cb4 <HAL_TIM_MspPostInit+0xa8>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	4a1f      	ldr	r2, [pc, #124]	@ (8001cb4 <HAL_TIM_MspPostInit+0xa8>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <HAL_TIM_MspPostInit+0xa8>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4b19      	ldr	r3, [pc, #100]	@ (8001cb4 <HAL_TIM_MspPostInit+0xa8>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	4a18      	ldr	r2, [pc, #96]	@ (8001cb4 <HAL_TIM_MspPostInit+0xa8>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5a:	4b16      	ldr	r3, [pc, #88]	@ (8001cb4 <HAL_TIM_MspPostInit+0xa8>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c66:	2303      	movs	r3, #3
 8001c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c76:	2302      	movs	r3, #2
 8001c78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	480d      	ldr	r0, [pc, #52]	@ (8001cb8 <HAL_TIM_MspPostInit+0xac>)
 8001c82:	f000 fbed 	bl	8002460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c86:	23c0      	movs	r3, #192	@ 0xc0
 8001c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c96:	2302      	movs	r3, #2
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4806      	ldr	r0, [pc, #24]	@ (8001cbc <HAL_TIM_MspPostInit+0xb0>)
 8001ca2:	f000 fbdd 	bl	8002460 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ca6:	bf00      	nop
 8001ca8:	3728      	adds	r7, #40	@ 0x28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020400 	.word	0x40020400
 8001cbc:	40020800 	.word	0x40020800

08001cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	@ 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8001d54 <HAL_UART_MspInit+0x94>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d134      	bne.n	8001d4c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d58 <HAL_UART_MspInit+0x98>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	4a1b      	ldr	r2, [pc, #108]	@ (8001d58 <HAL_UART_MspInit+0x98>)
 8001cec:	f043 0310 	orr.w	r3, r3, #16
 8001cf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cf2:	4b19      	ldr	r3, [pc, #100]	@ (8001d58 <HAL_UART_MspInit+0x98>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <HAL_UART_MspInit+0x98>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	4a14      	ldr	r2, [pc, #80]	@ (8001d58 <HAL_UART_MspInit+0x98>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0e:	4b12      	ldr	r3, [pc, #72]	@ (8001d58 <HAL_UART_MspInit+0x98>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d1a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d2c:	2307      	movs	r3, #7
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	4809      	ldr	r0, [pc, #36]	@ (8001d5c <HAL_UART_MspInit+0x9c>)
 8001d38:	f000 fb92 	bl	8002460 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2100      	movs	r1, #0
 8001d40:	2025      	movs	r0, #37	@ 0x25
 8001d42:	f000 fac4 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d46:	2025      	movs	r0, #37	@ 0x25
 8001d48:	f000 fadd 	bl	8002306 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d4c:	bf00      	nop
 8001d4e:	3728      	adds	r7, #40	@ 0x28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40011000 	.word	0x40011000
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020000 	.word	0x40020000

08001d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <NMI_Handler+0x4>

08001d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <HardFault_Handler+0x4>

08001d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <MemManage_Handler+0x4>

08001d78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <BusFault_Handler+0x4>

08001d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <UsageFault_Handler+0x4>

08001d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db6:	f000 f96b 	bl	8002090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dc4:	4802      	ldr	r0, [pc, #8]	@ (8001dd0 <USART1_IRQHandler+0x10>)
 8001dc6:	f003 ffb1 	bl	8005d2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2000033c 	.word	0x2000033c

08001dd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001dd8:	4802      	ldr	r0, [pc, #8]	@ (8001de4 <OTG_FS_IRQHandler+0x10>)
 8001dda:	f000 fe39 	bl	8002a50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20001898 	.word	0x20001898

08001de8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return 1;
 8001dec:	2301      	movs	r3, #1
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <_kill>:

int _kill(int pid, int sig)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e02:	f009 fd2f 	bl	800b864 <__errno>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2216      	movs	r2, #22
 8001e0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_exit>:

void _exit (int status)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ffe7 	bl	8001df8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e2a:	bf00      	nop
 8001e2c:	e7fd      	b.n	8001e2a <_exit+0x12>

08001e2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	e00a      	b.n	8001e56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e40:	f3af 8000 	nop.w
 8001e44:	4601      	mov	r1, r0
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	60ba      	str	r2, [r7, #8]
 8001e4c:	b2ca      	uxtb	r2, r1
 8001e4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3301      	adds	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	dbf0      	blt.n	8001e40 <_read+0x12>
  }

  return len;
 8001e5e:	687b      	ldr	r3, [r7, #4]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	e009      	b.n	8001e8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	60ba      	str	r2, [r7, #8]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	dbf1      	blt.n	8001e7a <_write+0x12>
  }
  return len;
 8001e96:	687b      	ldr	r3, [r7, #4]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_close>:

int _close(int file)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ec8:	605a      	str	r2, [r3, #4]
  return 0;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <_isatty>:

int _isatty(int file)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ee0:	2301      	movs	r3, #1
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b085      	sub	sp, #20
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f10:	4a14      	ldr	r2, [pc, #80]	@ (8001f64 <_sbrk+0x5c>)
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <_sbrk+0x60>)
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f1c:	4b13      	ldr	r3, [pc, #76]	@ (8001f6c <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f24:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <_sbrk+0x64>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	@ (8001f70 <_sbrk+0x68>)
 8001f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d207      	bcs.n	8001f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f38:	f009 fc94 	bl	800b864 <__errno>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	220c      	movs	r2, #12
 8001f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
 8001f46:	e009      	b.n	8001f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f48:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <_sbrk+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4e:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	4a05      	ldr	r2, [pc, #20]	@ (8001f6c <_sbrk+0x64>)
 8001f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20020000 	.word	0x20020000
 8001f68:	00000400 	.word	0x00000400
 8001f6c:	200003b0 	.word	0x200003b0
 8001f70:	200020e8 	.word	0x200020e8

08001f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f78:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <SystemInit+0x20>)
 8001f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f7e:	4a05      	ldr	r2, [pc, #20]	@ (8001f94 <SystemInit+0x20>)
 8001f80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f9c:	f7ff ffea 	bl	8001f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fa0:	480c      	ldr	r0, [pc, #48]	@ (8001fd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fa2:	490d      	ldr	r1, [pc, #52]	@ (8001fd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8001fdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa8:	e002      	b.n	8001fb0 <LoopCopyDataInit>

08001faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fae:	3304      	adds	r3, #4

08001fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb4:	d3f9      	bcc.n	8001faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fb8:	4c0a      	ldr	r4, [pc, #40]	@ (8001fe4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fbc:	e001      	b.n	8001fc2 <LoopFillZerobss>

08001fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc0:	3204      	adds	r2, #4

08001fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc4:	d3fb      	bcc.n	8001fbe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001fc6:	f009 fc53 	bl	800b870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fca:	f7ff faf5 	bl	80015b8 <main>
  bx  lr    
 8001fce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd8:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8001fdc:	0800dee8 	.word	0x0800dee8
  ldr r2, =_sbss
 8001fe0:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8001fe4:	200020e8 	.word	0x200020e8

08001fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe8:	e7fe      	b.n	8001fe8 <ADC_IRQHandler>
	...

08001fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <HAL_Init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800202c <HAL_Init+0x40>)
 8001ff6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ffa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <HAL_Init+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0a      	ldr	r2, [pc, #40]	@ (800202c <HAL_Init+0x40>)
 8002002:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002006:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002008:	4b08      	ldr	r3, [pc, #32]	@ (800202c <HAL_Init+0x40>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a07      	ldr	r2, [pc, #28]	@ (800202c <HAL_Init+0x40>)
 800200e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002012:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002014:	2003      	movs	r0, #3
 8002016:	f000 f94f 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800201a:	200f      	movs	r0, #15
 800201c:	f000 f808 	bl	8002030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002020:	f7ff fdaa 	bl	8001b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023c00 	.word	0x40023c00

08002030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002038:	4b12      	ldr	r3, [pc, #72]	@ (8002084 <HAL_InitTick+0x54>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b12      	ldr	r3, [pc, #72]	@ (8002088 <HAL_InitTick+0x58>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002046:	fbb3 f3f1 	udiv	r3, r3, r1
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f967 	bl	8002322 <HAL_SYSTICK_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e00e      	b.n	800207c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b0f      	cmp	r3, #15
 8002062:	d80a      	bhi.n	800207a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002064:	2200      	movs	r2, #0
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f000 f92f 	bl	80022ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002070:	4a06      	ldr	r2, [pc, #24]	@ (800208c <HAL_InitTick+0x5c>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e000      	b.n	800207c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000004 	.word	0x20000004
 8002088:	2000000c 	.word	0x2000000c
 800208c:	20000008 	.word	0x20000008

08002090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <HAL_IncTick+0x20>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <HAL_IncTick+0x24>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	4a04      	ldr	r2, [pc, #16]	@ (80020b4 <HAL_IncTick+0x24>)
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	2000000c 	.word	0x2000000c
 80020b4:	200003b4 	.word	0x200003b4

080020b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return uwTick;
 80020bc:	4b03      	ldr	r3, [pc, #12]	@ (80020cc <HAL_GetTick+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	200003b4 	.word	0x200003b4

080020d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d8:	f7ff ffee 	bl	80020b8 <HAL_GetTick>
 80020dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d005      	beq.n	80020f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <HAL_Delay+0x44>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020f6:	bf00      	nop
 80020f8:	f7ff ffde 	bl	80020b8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	429a      	cmp	r2, r3
 8002106:	d8f7      	bhi.n	80020f8 <HAL_Delay+0x28>
  {
  }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	2000000c 	.word	0x2000000c

08002118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002128:	4b0c      	ldr	r3, [pc, #48]	@ (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002134:	4013      	ands	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002140:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214a:	4a04      	ldr	r2, [pc, #16]	@ (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	60d3      	str	r3, [r2, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002164:	4b04      	ldr	r3, [pc, #16]	@ (8002178 <__NVIC_GetPriorityGrouping+0x18>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	f003 0307 	and.w	r3, r3, #7
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db0b      	blt.n	80021a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4907      	ldr	r1, [pc, #28]	@ (80021b4 <__NVIC_EnableIRQ+0x38>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2001      	movs	r0, #1
 800219e:	fa00 f202 	lsl.w	r2, r0, r2
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db0a      	blt.n	80021e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	490c      	ldr	r1, [pc, #48]	@ (8002204 <__NVIC_SetPriority+0x4c>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	440b      	add	r3, r1
 80021dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e0:	e00a      	b.n	80021f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4908      	ldr	r1, [pc, #32]	@ (8002208 <__NVIC_SetPriority+0x50>)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3b04      	subs	r3, #4
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	440b      	add	r3, r1
 80021f6:	761a      	strb	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000e100 	.word	0xe000e100
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	@ 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f1c3 0307 	rsb	r3, r3, #7
 8002226:	2b04      	cmp	r3, #4
 8002228:	bf28      	it	cs
 800222a:	2304      	movcs	r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3304      	adds	r3, #4
 8002232:	2b06      	cmp	r3, #6
 8002234:	d902      	bls.n	800223c <NVIC_EncodePriority+0x30>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3b03      	subs	r3, #3
 800223a:	e000      	b.n	800223e <NVIC_EncodePriority+0x32>
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	f04f 32ff 	mov.w	r2, #4294967295
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43d9      	mvns	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	4313      	orrs	r3, r2
         );
}
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	@ 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002284:	d301      	bcc.n	800228a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002286:	2301      	movs	r3, #1
 8002288:	e00f      	b.n	80022aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228a:	4a0a      	ldr	r2, [pc, #40]	@ (80022b4 <SysTick_Config+0x40>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002292:	210f      	movs	r1, #15
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	f7ff ff8e 	bl	80021b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	4b05      	ldr	r3, [pc, #20]	@ (80022b4 <SysTick_Config+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a2:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <SysTick_Config+0x40>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000e010 	.word	0xe000e010

080022b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff29 	bl	8002118 <__NVIC_SetPriorityGrouping>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e0:	f7ff ff3e 	bl	8002160 <__NVIC_GetPriorityGrouping>
 80022e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	6978      	ldr	r0, [r7, #20]
 80022ec:	f7ff ff8e 	bl	800220c <NVIC_EncodePriority>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff5d 	bl	80021b8 <__NVIC_SetPriority>
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff31 	bl	800217c <__NVIC_EnableIRQ>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ffa2 	bl	8002274 <SysTick_Config>
 8002330:	4603      	mov	r3, r0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002346:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff feb6 	bl	80020b8 <HAL_GetTick>
 800234c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d008      	beq.n	800236c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2280      	movs	r2, #128	@ 0x80
 800235e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e052      	b.n	8002412 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0216 	bic.w	r2, r2, #22
 800237a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695a      	ldr	r2, [r3, #20]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800238a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002390:	2b00      	cmp	r3, #0
 8002392:	d103      	bne.n	800239c <HAL_DMA_Abort+0x62>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002398:	2b00      	cmp	r3, #0
 800239a:	d007      	beq.n	80023ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0208 	bic.w	r2, r2, #8
 80023aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0201 	bic.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023bc:	e013      	b.n	80023e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023be:	f7ff fe7b 	bl	80020b8 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d90c      	bls.n	80023e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2220      	movs	r2, #32
 80023d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2203      	movs	r2, #3
 80023d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e015      	b.n	8002412 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1e4      	bne.n	80023be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f8:	223f      	movs	r2, #63	@ 0x3f
 80023fa:	409a      	lsls	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d004      	beq.n	8002438 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2280      	movs	r2, #128	@ 0x80
 8002432:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e00c      	b.n	8002452 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2205      	movs	r2, #5
 800243c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0201 	bic.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	@ 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	e165      	b.n	8002748 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800247c:	2201      	movs	r2, #1
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	429a      	cmp	r2, r3
 8002496:	f040 8154 	bne.w	8002742 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d005      	beq.n	80024b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d130      	bne.n	8002514 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	2203      	movs	r2, #3
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e8:	2201      	movs	r2, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 0201 	and.w	r2, r3, #1
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b03      	cmp	r3, #3
 800251e:	d017      	beq.n	8002550 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	2203      	movs	r2, #3
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d123      	bne.n	80025a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	08da      	lsrs	r2, r3, #3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3208      	adds	r2, #8
 8002564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	220f      	movs	r2, #15
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	08da      	lsrs	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3208      	adds	r2, #8
 800259e:	69b9      	ldr	r1, [r7, #24]
 80025a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	2203      	movs	r2, #3
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0203 	and.w	r2, r3, #3
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80ae 	beq.w	8002742 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002760 <HAL_GPIO_Init+0x300>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	4a5c      	ldr	r2, [pc, #368]	@ (8002760 <HAL_GPIO_Init+0x300>)
 80025f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025f6:	4b5a      	ldr	r3, [pc, #360]	@ (8002760 <HAL_GPIO_Init+0x300>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002602:	4a58      	ldr	r2, [pc, #352]	@ (8002764 <HAL_GPIO_Init+0x304>)
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	3302      	adds	r3, #2
 800260a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	220f      	movs	r2, #15
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4f      	ldr	r2, [pc, #316]	@ (8002768 <HAL_GPIO_Init+0x308>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d025      	beq.n	800267a <HAL_GPIO_Init+0x21a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4e      	ldr	r2, [pc, #312]	@ (800276c <HAL_GPIO_Init+0x30c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01f      	beq.n	8002676 <HAL_GPIO_Init+0x216>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a4d      	ldr	r2, [pc, #308]	@ (8002770 <HAL_GPIO_Init+0x310>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d019      	beq.n	8002672 <HAL_GPIO_Init+0x212>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a4c      	ldr	r2, [pc, #304]	@ (8002774 <HAL_GPIO_Init+0x314>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <HAL_GPIO_Init+0x20e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a4b      	ldr	r2, [pc, #300]	@ (8002778 <HAL_GPIO_Init+0x318>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00d      	beq.n	800266a <HAL_GPIO_Init+0x20a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a4a      	ldr	r2, [pc, #296]	@ (800277c <HAL_GPIO_Init+0x31c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d007      	beq.n	8002666 <HAL_GPIO_Init+0x206>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a49      	ldr	r2, [pc, #292]	@ (8002780 <HAL_GPIO_Init+0x320>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d101      	bne.n	8002662 <HAL_GPIO_Init+0x202>
 800265e:	2306      	movs	r3, #6
 8002660:	e00c      	b.n	800267c <HAL_GPIO_Init+0x21c>
 8002662:	2307      	movs	r3, #7
 8002664:	e00a      	b.n	800267c <HAL_GPIO_Init+0x21c>
 8002666:	2305      	movs	r3, #5
 8002668:	e008      	b.n	800267c <HAL_GPIO_Init+0x21c>
 800266a:	2304      	movs	r3, #4
 800266c:	e006      	b.n	800267c <HAL_GPIO_Init+0x21c>
 800266e:	2303      	movs	r3, #3
 8002670:	e004      	b.n	800267c <HAL_GPIO_Init+0x21c>
 8002672:	2302      	movs	r3, #2
 8002674:	e002      	b.n	800267c <HAL_GPIO_Init+0x21c>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <HAL_GPIO_Init+0x21c>
 800267a:	2300      	movs	r3, #0
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	f002 0203 	and.w	r2, r2, #3
 8002682:	0092      	lsls	r2, r2, #2
 8002684:	4093      	lsls	r3, r2
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800268c:	4935      	ldr	r1, [pc, #212]	@ (8002764 <HAL_GPIO_Init+0x304>)
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	089b      	lsrs	r3, r3, #2
 8002692:	3302      	adds	r3, #2
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800269a:	4b3a      	ldr	r3, [pc, #232]	@ (8002784 <HAL_GPIO_Init+0x324>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026be:	4a31      	ldr	r2, [pc, #196]	@ (8002784 <HAL_GPIO_Init+0x324>)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002784 <HAL_GPIO_Init+0x324>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026e8:	4a26      	ldr	r2, [pc, #152]	@ (8002784 <HAL_GPIO_Init+0x324>)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ee:	4b25      	ldr	r3, [pc, #148]	@ (8002784 <HAL_GPIO_Init+0x324>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002712:	4a1c      	ldr	r2, [pc, #112]	@ (8002784 <HAL_GPIO_Init+0x324>)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002718:	4b1a      	ldr	r3, [pc, #104]	@ (8002784 <HAL_GPIO_Init+0x324>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800273c:	4a11      	ldr	r2, [pc, #68]	@ (8002784 <HAL_GPIO_Init+0x324>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3301      	adds	r3, #1
 8002746:	61fb      	str	r3, [r7, #28]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	2b0f      	cmp	r3, #15
 800274c:	f67f ae96 	bls.w	800247c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	3724      	adds	r7, #36	@ 0x24
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	40013800 	.word	0x40013800
 8002768:	40020000 	.word	0x40020000
 800276c:	40020400 	.word	0x40020400
 8002770:	40020800 	.word	0x40020800
 8002774:	40020c00 	.word	0x40020c00
 8002778:	40021000 	.word	0x40021000
 800277c:	40021400 	.word	0x40021400
 8002780:	40021800 	.word	0x40021800
 8002784:	40013c00 	.word	0x40013c00

08002788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	807b      	strh	r3, [r7, #2]
 8002794:	4613      	mov	r3, r2
 8002796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002798:	787b      	ldrb	r3, [r7, #1]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800279e:	887a      	ldrh	r2, [r7, #2]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027a4:	e003      	b.n	80027ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027a6:	887b      	ldrh	r3, [r7, #2]
 80027a8:	041a      	lsls	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	619a      	str	r2, [r3, #24]
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af02      	add	r7, sp, #8
 80027c0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e108      	b.n	80029de <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f007 fef4 	bl	800a5d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2203      	movs	r2, #3
 80027f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027fa:	d102      	bne.n	8002802 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f004 faa5 	bl	8006d56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7c1a      	ldrb	r2, [r3, #16]
 8002814:	f88d 2000 	strb.w	r2, [sp]
 8002818:	3304      	adds	r3, #4
 800281a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800281c:	f004 f984 	bl	8006b28 <USB_CoreInit>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2202      	movs	r2, #2
 800282a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e0d5      	b.n	80029de <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f004 fa9d 	bl	8006d78 <USB_SetCurrentMode>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0c6      	b.n	80029de <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002850:	2300      	movs	r3, #0
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	e04a      	b.n	80028ec <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002856:	7bfa      	ldrb	r2, [r7, #15]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	3315      	adds	r3, #21
 8002866:	2201      	movs	r2, #1
 8002868:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	3314      	adds	r3, #20
 800287a:	7bfa      	ldrb	r2, [r7, #15]
 800287c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800287e:	7bfa      	ldrb	r2, [r7, #15]
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	b298      	uxth	r0, r3
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	332e      	adds	r3, #46	@ 0x2e
 8002892:	4602      	mov	r2, r0
 8002894:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002896:	7bfa      	ldrb	r2, [r7, #15]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	3318      	adds	r3, #24
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	331c      	adds	r3, #28
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028be:	7bfa      	ldrb	r2, [r7, #15]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	3320      	adds	r3, #32
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	3324      	adds	r3, #36	@ 0x24
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	3301      	adds	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	791b      	ldrb	r3, [r3, #4]
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d3af      	bcc.n	8002856 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
 80028fa:	e044      	b.n	8002986 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002912:	7bfa      	ldrb	r2, [r7, #15]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002928:	7bfa      	ldrb	r2, [r7, #15]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800293e:	7bfa      	ldrb	r2, [r7, #15]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	3301      	adds	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	791b      	ldrb	r3, [r3, #4]
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	429a      	cmp	r2, r3
 800298e:	d3b5      	bcc.n	80028fc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	7c1a      	ldrb	r2, [r3, #16]
 8002998:	f88d 2000 	strb.w	r2, [sp]
 800299c:	3304      	adds	r3, #4
 800299e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029a0:	f004 fa36 	bl	8006e10 <USB_DevInit>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d005      	beq.n	80029b6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2202      	movs	r2, #2
 80029ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e013      	b.n	80029de <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	7b1b      	ldrb	r3, [r3, #12]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d102      	bne.n	80029d2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f001 f96f 	bl	8003cb0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f005 fa73 	bl	8007ec2 <USB_DevDisconnect>

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_PCD_Start+0x1c>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e022      	b.n	8002a48 <HAL_PCD_Start+0x62>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d105      	bne.n	8002a2a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a22:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f004 f980 	bl	8006d34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f005 fa21 	bl	8007e80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b08d      	sub	sp, #52	@ 0x34
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f005 fadf 	bl	800802a <USB_GetMode>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f040 84b9 	bne.w	80033e6 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f005 fa43 	bl	8007f04 <USB_ReadInterrupts>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 84af 	beq.w	80033e4 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f005 fa30 	bl	8007f04 <USB_ReadInterrupts>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d107      	bne.n	8002abe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f002 0202 	and.w	r2, r2, #2
 8002abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f005 fa1e 	bl	8007f04 <USB_ReadInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b10      	cmp	r3, #16
 8002ad0:	d161      	bne.n	8002b96 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699a      	ldr	r2, [r3, #24]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0210 	bic.w	r2, r2, #16
 8002ae0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f003 020f 	and.w	r2, r3, #15
 8002aee:	4613      	mov	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	4413      	add	r3, r2
 8002afe:	3304      	adds	r3, #4
 8002b00:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	0c5b      	lsrs	r3, r3, #17
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d124      	bne.n	8002b58 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d035      	beq.n	8002b86 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	6a38      	ldr	r0, [r7, #32]
 8002b2e:	f005 f855 	bl	8007bdc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b3e:	441a      	add	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b50:	441a      	add	r2, r3
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	615a      	str	r2, [r3, #20]
 8002b56:	e016      	b.n	8002b86 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	0c5b      	lsrs	r3, r3, #17
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	2b06      	cmp	r3, #6
 8002b62:	d110      	bne.n	8002b86 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	6a38      	ldr	r0, [r7, #32]
 8002b70:	f005 f834 	bl	8007bdc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b80:	441a      	add	r2, r3
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 0210 	orr.w	r2, r2, #16
 8002b94:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f005 f9b2 	bl	8007f04 <USB_ReadInterrupts>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ba6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002baa:	f040 80a7 	bne.w	8002cfc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f005 f9b7 	bl	8007f2a <USB_ReadDevAllOutEpInterrupt>
 8002bbc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002bbe:	e099      	b.n	8002cf4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 808e 	beq.w	8002ce8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f005 f9db 	bl	8007f92 <USB_ReadDevOutEPInterrupt>
 8002bdc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00c      	beq.n	8002c02 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002bfa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fed1 	bl	80039a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00c      	beq.n	8002c26 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c18:	461a      	mov	r2, r3
 8002c1a:	2308      	movs	r3, #8
 8002c1c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 ffa7 	bl	8003b74 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	2310      	movs	r3, #16
 8002c40:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d030      	beq.n	8002cae <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c54:	2b80      	cmp	r3, #128	@ 0x80
 8002c56:	d109      	bne.n	8002c6c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c6a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3304      	adds	r3, #4
 8002c80:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	78db      	ldrb	r3, [r3, #3]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d108      	bne.n	8002c9c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	4619      	mov	r1, r3
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f007 fdb8 	bl	800a80c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2302      	movs	r3, #2
 8002cac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d009      	beq.n	8002ce8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ce6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	3301      	adds	r3, #1
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf0:	085b      	lsrs	r3, r3, #1
 8002cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f47f af62 	bne.w	8002bc0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f005 f8ff 	bl	8007f04 <USB_ReadInterrupts>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d10:	f040 80db 	bne.w	8002eca <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f005 f920 	bl	8007f5e <USB_ReadDevAllInEpInterrupt>
 8002d1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002d24:	e0cd      	b.n	8002ec2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80c2 	beq.w	8002eb6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f005 f946 	bl	8007fce <USB_ReadDevInEPInterrupt>
 8002d42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d057      	beq.n	8002dfe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	2201      	movs	r2, #1
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69f9      	ldr	r1, [r7, #28]
 8002d6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d6e:	4013      	ands	r3, r2
 8002d70:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d7e:	461a      	mov	r2, r3
 8002d80:	2301      	movs	r3, #1
 8002d82:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	799b      	ldrb	r3, [r3, #6]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d132      	bne.n	8002df2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3320      	adds	r3, #32
 8002d9c:	6819      	ldr	r1, [r3, #0]
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da2:	4613      	mov	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4413      	add	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4403      	add	r3, r0
 8002dac:	331c      	adds	r3, #28
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4419      	add	r1, r3
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002db6:	4613      	mov	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4403      	add	r3, r0
 8002dc0:	3320      	adds	r3, #32
 8002dc2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d113      	bne.n	8002df2 <HAL_PCD_IRQHandler+0x3a2>
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	3324      	adds	r3, #36	@ 0x24
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d108      	bne.n	8002df2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002dea:	461a      	mov	r2, r3
 8002dec:	2101      	movs	r1, #1
 8002dee:	f005 f94d 	bl	800808c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	4619      	mov	r1, r3
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f007 fc82 	bl	800a702 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e14:	461a      	mov	r2, r3
 8002e16:	2308      	movs	r3, #8
 8002e18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e30:	461a      	mov	r2, r3
 8002e32:	2310      	movs	r3, #16
 8002e34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2340      	movs	r3, #64	@ 0x40
 8002e50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d023      	beq.n	8002ea4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e5e:	6a38      	ldr	r0, [r7, #32]
 8002e60:	f004 f934 	bl	80070cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e66:	4613      	mov	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	3310      	adds	r3, #16
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	3304      	adds	r3, #4
 8002e76:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	78db      	ldrb	r3, [r3, #3]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d108      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2200      	movs	r2, #0
 8002e84:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f007 fccf 	bl	800a830 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002eae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fcea 	bl	800388a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	3301      	adds	r3, #1
 8002eba:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ebe:	085b      	lsrs	r3, r3, #1
 8002ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f47f af2e 	bne.w	8002d26 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f005 f818 	bl	8007f04 <USB_ReadInterrupts>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002eda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ede:	d122      	bne.n	8002f26 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eee:	f023 0301 	bic.w	r3, r3, #1
 8002ef2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d108      	bne.n	8002f10 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f06:	2100      	movs	r1, #0
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f007 fe49 	bl	800aba0 <HAL_PCDEx_LPM_Callback>
 8002f0e:	e002      	b.n	8002f16 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f007 fc6d 	bl	800a7f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f004 ffea 	bl	8007f04 <USB_ReadInterrupts>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f3a:	d112      	bne.n	8002f62 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d102      	bne.n	8002f52 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f007 fc29 	bl	800a7a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695a      	ldr	r2, [r3, #20]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002f60:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f004 ffcc 	bl	8007f04 <USB_ReadInterrupts>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f76:	d121      	bne.n	8002fbc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002f86:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d111      	bne.n	8002fb6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa0:	089b      	lsrs	r3, r3, #2
 8002fa2:	f003 020f 	and.w	r2, r3, #15
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002fac:	2101      	movs	r1, #1
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f007 fdf6 	bl	800aba0 <HAL_PCDEx_LPM_Callback>
 8002fb4:	e002      	b.n	8002fbc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f007 fbf4 	bl	800a7a4 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f004 ff9f 	bl	8007f04 <USB_ReadInterrupts>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd0:	f040 80b7 	bne.w	8003142 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2110      	movs	r1, #16
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f004 f86c 	bl	80070cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ff8:	e046      	b.n	8003088 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	4413      	add	r3, r2
 8003002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003006:	461a      	mov	r2, r3
 8003008:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800300c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800300e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	4413      	add	r3, r2
 8003016:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800301e:	0151      	lsls	r1, r2, #5
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	440a      	add	r2, r1
 8003024:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003028:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800302c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800302e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	4413      	add	r3, r2
 8003036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800303a:	461a      	mov	r2, r3
 800303c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003040:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	4413      	add	r3, r2
 800304a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003052:	0151      	lsls	r1, r2, #5
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	440a      	add	r2, r1
 8003058:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800305c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003060:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003072:	0151      	lsls	r1, r2, #5
 8003074:	69fa      	ldr	r2, [r7, #28]
 8003076:	440a      	add	r2, r1
 8003078:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800307c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003080:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003084:	3301      	adds	r3, #1
 8003086:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	791b      	ldrb	r3, [r3, #4]
 800308c:	461a      	mov	r2, r3
 800308e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003090:	4293      	cmp	r3, r2
 8003092:	d3b2      	bcc.n	8002ffa <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	69fa      	ldr	r2, [r7, #28]
 800309e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030a2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80030a6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7bdb      	ldrb	r3, [r3, #15]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d016      	beq.n	80030de <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030c0:	f043 030b 	orr.w	r3, r3, #11
 80030c4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030d6:	f043 030b 	orr.w	r3, r3, #11
 80030da:	6453      	str	r3, [r2, #68]	@ 0x44
 80030dc:	e015      	b.n	800310a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	69fa      	ldr	r2, [r7, #28]
 80030e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80030f0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80030f4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003104:	f043 030b 	orr.w	r3, r3, #11
 8003108:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003118:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800311c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800312c:	461a      	mov	r2, r3
 800312e:	f004 ffad 	bl	800808c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003140:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f004 fedc 	bl	8007f04 <USB_ReadInterrupts>
 800314c:	4603      	mov	r3, r0
 800314e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003152:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003156:	d123      	bne.n	80031a0 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f004 ff72 	bl	8008046 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f004 f829 	bl	80071be <USB_GetDevSpeed>
 800316c:	4603      	mov	r3, r0
 800316e:	461a      	mov	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681c      	ldr	r4, [r3, #0]
 8003178:	f000 fea4 	bl	8003ec4 <HAL_RCC_GetHCLKFreq>
 800317c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003182:	461a      	mov	r2, r3
 8003184:	4620      	mov	r0, r4
 8003186:	f003 fd33 	bl	8006bf0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f007 fae1 	bl	800a752 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800319e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f004 fead 	bl	8007f04 <USB_ReadInterrupts>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d10a      	bne.n	80031ca <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f007 fabe 	bl	800a736 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695a      	ldr	r2, [r3, #20]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f002 0208 	and.w	r2, r2, #8
 80031c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f004 fe98 	bl	8007f04 <USB_ReadInterrupts>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031da:	2b80      	cmp	r3, #128	@ 0x80
 80031dc:	d123      	bne.n	8003226 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031ea:	2301      	movs	r3, #1
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ee:	e014      	b.n	800321a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d105      	bne.n	8003214 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320a:	b2db      	uxtb	r3, r3
 800320c:	4619      	mov	r1, r3
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fb0a 	bl	8003828 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003216:	3301      	adds	r3, #1
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	791b      	ldrb	r3, [r3, #4]
 800321e:	461a      	mov	r2, r3
 8003220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003222:	4293      	cmp	r3, r2
 8003224:	d3e4      	bcc.n	80031f0 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f004 fe6a 	bl	8007f04 <USB_ReadInterrupts>
 8003230:	4603      	mov	r3, r0
 8003232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003236:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800323a:	d13c      	bne.n	80032b6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800323c:	2301      	movs	r3, #1
 800323e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003240:	e02b      	b.n	800329a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	4413      	add	r3, r2
 800324a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	3318      	adds	r3, #24
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d115      	bne.n	8003294 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003268:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800326a:	2b00      	cmp	r3, #0
 800326c:	da12      	bge.n	8003294 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	3317      	adds	r3, #23
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800328a:	b2db      	uxtb	r3, r3
 800328c:	4619      	mov	r1, r3
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 faca 	bl	8003828 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003296:	3301      	adds	r3, #1
 8003298:	627b      	str	r3, [r7, #36]	@ 0x24
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	791b      	ldrb	r3, [r3, #4]
 800329e:	461a      	mov	r2, r3
 80032a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d3cd      	bcc.n	8003242 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695a      	ldr	r2, [r3, #20]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80032b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f004 fe22 	bl	8007f04 <USB_ReadInterrupts>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032ca:	d156      	bne.n	800337a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032cc:	2301      	movs	r3, #1
 80032ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80032d0:	e045      	b.n	800335e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80032d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d12e      	bne.n	8003358 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032fa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	da2b      	bge.n	8003358 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800330c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003310:	429a      	cmp	r2, r3
 8003312:	d121      	bne.n	8003358 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10a      	bne.n	8003358 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	69fa      	ldr	r2, [r7, #28]
 800334c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003350:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003354:	6053      	str	r3, [r2, #4]
            break;
 8003356:	e008      	b.n	800336a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	3301      	adds	r3, #1
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	791b      	ldrb	r3, [r3, #4]
 8003362:	461a      	mov	r2, r3
 8003364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003366:	4293      	cmp	r3, r2
 8003368:	d3b3      	bcc.n	80032d2 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695a      	ldr	r2, [r3, #20]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003378:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f004 fdc0 	bl	8007f04 <USB_ReadInterrupts>
 8003384:	4603      	mov	r3, r0
 8003386:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800338a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800338e:	d10a      	bne.n	80033a6 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f007 fa5f 	bl	800a854 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80033a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f004 fdaa 	bl	8007f04 <USB_ReadInterrupts>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d115      	bne.n	80033e6 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f007 fa4f 	bl	800a870 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	e000      	b.n	80033e6 <HAL_PCD_IRQHandler+0x996>
      return;
 80033e4:	bf00      	nop
    }
  }
}
 80033e6:	3734      	adds	r7, #52	@ 0x34
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd90      	pop	{r4, r7, pc}

080033ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_PCD_SetAddress+0x1a>
 8003402:	2302      	movs	r3, #2
 8003404:	e012      	b.n	800342c <HAL_PCD_SetAddress+0x40>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f004 fd09 	bl	8007e34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	4608      	mov	r0, r1
 800343e:	4611      	mov	r1, r2
 8003440:	461a      	mov	r2, r3
 8003442:	4603      	mov	r3, r0
 8003444:	70fb      	strb	r3, [r7, #3]
 8003446:	460b      	mov	r3, r1
 8003448:	803b      	strh	r3, [r7, #0]
 800344a:	4613      	mov	r3, r2
 800344c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003452:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003456:	2b00      	cmp	r3, #0
 8003458:	da0f      	bge.n	800347a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	f003 020f 	and.w	r2, r3, #15
 8003460:	4613      	mov	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	3310      	adds	r3, #16
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	3304      	adds	r3, #4
 8003470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	705a      	strb	r2, [r3, #1]
 8003478:	e00f      	b.n	800349a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	f003 020f 	and.w	r2, r3, #15
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	4413      	add	r3, r2
 8003490:	3304      	adds	r3, #4
 8003492:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80034a6:	883b      	ldrh	r3, [r7, #0]
 80034a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	78ba      	ldrb	r2, [r7, #2]
 80034b4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	785b      	ldrb	r3, [r3, #1]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d004      	beq.n	80034c8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034c8:	78bb      	ldrb	r3, [r7, #2]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d102      	bne.n	80034d4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_PCD_EP_Open+0xae>
 80034de:	2302      	movs	r3, #2
 80034e0:	e00e      	b.n	8003500 <HAL_PCD_EP_Open+0xcc>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68f9      	ldr	r1, [r7, #12]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f003 fe89 	bl	8007208 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80034fe:	7afb      	ldrb	r3, [r7, #11]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003518:	2b00      	cmp	r3, #0
 800351a:	da0f      	bge.n	800353c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	f003 020f 	and.w	r2, r3, #15
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	3310      	adds	r3, #16
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	4413      	add	r3, r2
 8003530:	3304      	adds	r3, #4
 8003532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2201      	movs	r2, #1
 8003538:	705a      	strb	r2, [r3, #1]
 800353a:	e00f      	b.n	800355c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	f003 020f 	and.w	r2, r3, #15
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	3304      	adds	r3, #4
 8003554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	b2da      	uxtb	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_PCD_EP_Close+0x6e>
 8003572:	2302      	movs	r3, #2
 8003574:	e00e      	b.n	8003594 <HAL_PCD_EP_Close+0x8c>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68f9      	ldr	r1, [r7, #12]
 8003584:	4618      	mov	r0, r3
 8003586:	f003 fec7 	bl	8007318 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	460b      	mov	r3, r1
 80035aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ac:	7afb      	ldrb	r3, [r7, #11]
 80035ae:	f003 020f 	and.w	r2, r3, #15
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4413      	add	r3, r2
 80035c2:	3304      	adds	r3, #4
 80035c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2200      	movs	r2, #0
 80035d6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2200      	movs	r2, #0
 80035dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035de:	7afb      	ldrb	r3, [r7, #11]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	799b      	ldrb	r3, [r3, #6]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d102      	bne.n	80035f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	799b      	ldrb	r3, [r3, #6]
 8003600:	461a      	mov	r2, r3
 8003602:	6979      	ldr	r1, [r7, #20]
 8003604:	f003 ff64 	bl	80074d0 <USB_EPStartXfer>

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	460b      	mov	r3, r1
 800361c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	f003 020f 	and.w	r2, r3, #15
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003634:	681b      	ldr	r3, [r3, #0]
}
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b086      	sub	sp, #24
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
 800364e:	460b      	mov	r3, r1
 8003650:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003652:	7afb      	ldrb	r3, [r7, #11]
 8003654:	f003 020f 	and.w	r2, r3, #15
 8003658:	4613      	mov	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	3310      	adds	r3, #16
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4413      	add	r3, r2
 8003666:	3304      	adds	r3, #4
 8003668:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2200      	movs	r2, #0
 800367a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2201      	movs	r2, #1
 8003680:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003682:	7afb      	ldrb	r3, [r7, #11]
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	b2da      	uxtb	r2, r3
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	799b      	ldrb	r3, [r3, #6]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d102      	bne.n	800369c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	799b      	ldrb	r3, [r3, #6]
 80036a4:	461a      	mov	r2, r3
 80036a6:	6979      	ldr	r1, [r7, #20]
 80036a8:	f003 ff12 	bl	80074d0 <USB_EPStartXfer>

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	460b      	mov	r3, r1
 80036c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	7912      	ldrb	r2, [r2, #4]
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d901      	bls.n	80036d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e04f      	b.n	8003774 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	da0f      	bge.n	80036fc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	f003 020f 	and.w	r2, r3, #15
 80036e2:	4613      	mov	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	3310      	adds	r3, #16
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	4413      	add	r3, r2
 80036f0:	3304      	adds	r3, #4
 80036f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2201      	movs	r2, #1
 80036f8:	705a      	strb	r2, [r3, #1]
 80036fa:	e00d      	b.n	8003718 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036fc:	78fa      	ldrb	r2, [r7, #3]
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	3304      	adds	r3, #4
 8003710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800371e:	78fb      	ldrb	r3, [r7, #3]
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	b2da      	uxtb	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <HAL_PCD_EP_SetStall+0x82>
 8003734:	2302      	movs	r3, #2
 8003736:	e01d      	b.n	8003774 <HAL_PCD_EP_SetStall+0xbe>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68f9      	ldr	r1, [r7, #12]
 8003746:	4618      	mov	r0, r3
 8003748:	f004 faa0 	bl	8007c8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	2b00      	cmp	r3, #0
 8003754:	d109      	bne.n	800376a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6818      	ldr	r0, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	7999      	ldrb	r1, [r3, #6]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003764:	461a      	mov	r2, r3
 8003766:	f004 fc91 	bl	800808c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	7912      	ldrb	r2, [r2, #4]
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e042      	b.n	8003820 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800379a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	da0f      	bge.n	80037c2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	f003 020f 	and.w	r2, r3, #15
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	3310      	adds	r3, #16
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	4413      	add	r3, r2
 80037b6:	3304      	adds	r3, #4
 80037b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	705a      	strb	r2, [r3, #1]
 80037c0:	e00f      	b.n	80037e2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	f003 020f 	and.w	r2, r3, #15
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4413      	add	r3, r2
 80037d8:	3304      	adds	r3, #4
 80037da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_PCD_EP_ClrStall+0x86>
 80037fe:	2302      	movs	r3, #2
 8003800:	e00e      	b.n	8003820 <HAL_PCD_EP_ClrStall+0xa4>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68f9      	ldr	r1, [r7, #12]
 8003810:	4618      	mov	r0, r3
 8003812:	f004 faa9 	bl	8007d68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003834:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003838:	2b00      	cmp	r3, #0
 800383a:	da0c      	bge.n	8003856 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	f003 020f 	and.w	r2, r3, #15
 8003842:	4613      	mov	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	3310      	adds	r3, #16
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	4413      	add	r3, r2
 8003850:	3304      	adds	r3, #4
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	e00c      	b.n	8003870 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	f003 020f 	and.w	r2, r3, #15
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	4413      	add	r3, r2
 800386c:	3304      	adds	r3, #4
 800386e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68f9      	ldr	r1, [r7, #12]
 8003876:	4618      	mov	r0, r3
 8003878:	f004 f8c8 	bl	8007a0c <USB_EPStopXfer>
 800387c:	4603      	mov	r3, r0
 800387e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003880:	7afb      	ldrb	r3, [r7, #11]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b08a      	sub	sp, #40	@ 0x28
 800388e:	af02      	add	r7, sp, #8
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	3310      	adds	r3, #16
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4413      	add	r3, r2
 80038ae:	3304      	adds	r3, #4
 80038b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d901      	bls.n	80038c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e06b      	b.n	800399a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d902      	bls.n	80038de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	3303      	adds	r3, #3
 80038e2:	089b      	lsrs	r3, r3, #2
 80038e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038e6:	e02a      	b.n	800393e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d902      	bls.n	8003904 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	3303      	adds	r3, #3
 8003908:	089b      	lsrs	r3, r3, #2
 800390a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	68d9      	ldr	r1, [r3, #12]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	b2da      	uxtb	r2, r3
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	4603      	mov	r3, r0
 8003920:	6978      	ldr	r0, [r7, #20]
 8003922:	f004 f91d 	bl	8007b60 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	441a      	add	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	441a      	add	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	429a      	cmp	r2, r3
 8003952:	d809      	bhi.n	8003968 <PCD_WriteEmptyTxFifo+0xde>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800395c:	429a      	cmp	r2, r3
 800395e:	d203      	bcs.n	8003968 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1bf      	bne.n	80038e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	429a      	cmp	r2, r3
 8003972:	d811      	bhi.n	8003998 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	2201      	movs	r2, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	43db      	mvns	r3, r3
 800398e:	6939      	ldr	r1, [r7, #16]
 8003990:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003994:	4013      	ands	r3, r2
 8003996:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	333c      	adds	r3, #60	@ 0x3c
 80039bc:	3304      	adds	r3, #4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	799b      	ldrb	r3, [r3, #6]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d17b      	bne.n	8003ad2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d015      	beq.n	8003a10 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	4a61      	ldr	r2, [pc, #388]	@ (8003b6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	f240 80b9 	bls.w	8003b60 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80b3 	beq.w	8003b60 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a06:	461a      	mov	r2, r3
 8003a08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a0c:	6093      	str	r3, [r2, #8]
 8003a0e:	e0a7      	b.n	8003b60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d009      	beq.n	8003a2e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a26:	461a      	mov	r2, r3
 8003a28:	2320      	movs	r3, #32
 8003a2a:	6093      	str	r3, [r2, #8]
 8003a2c:	e098      	b.n	8003b60 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f040 8093 	bne.w	8003b60 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	4a4b      	ldr	r2, [pc, #300]	@ (8003b6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d90f      	bls.n	8003a62 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a58:	461a      	mov	r2, r3
 8003a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a5e:	6093      	str	r3, [r2, #8]
 8003a60:	e07e      	b.n	8003b60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	4413      	add	r3, r2
 8003a74:	3304      	adds	r3, #4
 8003a76:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a1a      	ldr	r2, [r3, #32]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	0159      	lsls	r1, r3, #5
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	440b      	add	r3, r1
 8003a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8e:	1ad2      	subs	r2, r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d114      	bne.n	8003ac4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003aac:	461a      	mov	r2, r3
 8003aae:	2101      	movs	r1, #1
 8003ab0:	f004 faec 	bl	800808c <USB_EP0_OutStart>
 8003ab4:	e006      	b.n	8003ac4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	441a      	add	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	4619      	mov	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f006 fdfe 	bl	800a6cc <HAL_PCD_DataOutStageCallback>
 8003ad0:	e046      	b.n	8003b60 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	4a26      	ldr	r2, [pc, #152]	@ (8003b70 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d124      	bne.n	8003b24 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af0:	461a      	mov	r2, r3
 8003af2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003af6:	6093      	str	r3, [r2, #8]
 8003af8:	e032      	b.n	8003b60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b10:	461a      	mov	r2, r3
 8003b12:	2320      	movs	r3, #32
 8003b14:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f006 fdd5 	bl	800a6cc <HAL_PCD_DataOutStageCallback>
 8003b22:	e01d      	b.n	8003b60 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d114      	bne.n	8003b54 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d108      	bne.n	8003b54 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	2100      	movs	r1, #0
 8003b50:	f004 fa9c 	bl	800808c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f006 fdb6 	bl	800a6cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3720      	adds	r7, #32
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	4f54300a 	.word	0x4f54300a
 8003b70:	4f54310a 	.word	0x4f54310a

08003b74 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	333c      	adds	r3, #60	@ 0x3c
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4a15      	ldr	r2, [pc, #84]	@ (8003bfc <PCD_EP_OutSetupPacket_int+0x88>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d90e      	bls.n	8003bc8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d009      	beq.n	8003bc8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bc6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f006 fd6d 	bl	800a6a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8003bfc <PCD_EP_OutSetupPacket_int+0x88>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d90c      	bls.n	8003bf0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	799b      	ldrb	r3, [r3, #6]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d108      	bne.n	8003bf0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003be8:	461a      	mov	r2, r3
 8003bea:	2101      	movs	r1, #1
 8003bec:	f004 fa4e 	bl	800808c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	4f54300a 	.word	0x4f54300a

08003c00 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	70fb      	strb	r3, [r7, #3]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c16:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d107      	bne.n	8003c2e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c1e:	883b      	ldrh	r3, [r7, #0]
 8003c20:	0419      	lsls	r1, r3, #16
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c2c:	e028      	b.n	8003c80 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c34:	0c1b      	lsrs	r3, r3, #16
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	4413      	add	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	73fb      	strb	r3, [r7, #15]
 8003c40:	e00d      	b.n	8003c5e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	3340      	adds	r3, #64	@ 0x40
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	0c1b      	lsrs	r3, r3, #16
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	4413      	add	r3, r2
 8003c56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	73fb      	strb	r3, [r7, #15]
 8003c5e:	7bfa      	ldrb	r2, [r7, #15]
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d3ec      	bcc.n	8003c42 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c68:	883b      	ldrh	r3, [r7, #0]
 8003c6a:	0418      	lsls	r0, r3, #16
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6819      	ldr	r1, [r3, #0]
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	4302      	orrs	r2, r0
 8003c78:	3340      	adds	r3, #64	@ 0x40
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	460b      	mov	r3, r1
 8003c98:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	887a      	ldrh	r2, [r7, #2]
 8003ca0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ce2:	f043 0303 	orr.w	r3, r3, #3
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0cc      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b68      	ldr	r3, [pc, #416]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d90c      	bls.n	8003d34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b65      	ldr	r3, [pc, #404]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d22:	4b63      	ldr	r3, [pc, #396]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0b8      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d020      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d4c:	4b59      	ldr	r3, [pc, #356]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	4a58      	ldr	r2, [pc, #352]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d64:	4b53      	ldr	r3, [pc, #332]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	4a52      	ldr	r2, [pc, #328]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d70:	4b50      	ldr	r3, [pc, #320]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	494d      	ldr	r1, [pc, #308]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d044      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d107      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d96:	4b47      	ldr	r3, [pc, #284]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d119      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e07f      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d003      	beq.n	8003db6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d107      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db6:	4b3f      	ldr	r3, [pc, #252]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d109      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e06f      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e067      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dd6:	4b37      	ldr	r3, [pc, #220]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f023 0203 	bic.w	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	4934      	ldr	r1, [pc, #208]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003de8:	f7fe f966 	bl	80020b8 <HAL_GetTick>
 8003dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dee:	e00a      	b.n	8003e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df0:	f7fe f962 	bl	80020b8 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e04f      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e06:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 020c 	and.w	r2, r3, #12
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d1eb      	bne.n	8003df0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e18:	4b25      	ldr	r3, [pc, #148]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d20c      	bcs.n	8003e40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b22      	ldr	r3, [pc, #136]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2e:	4b20      	ldr	r3, [pc, #128]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e032      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d008      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e4c:	4b19      	ldr	r3, [pc, #100]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	4916      	ldr	r1, [pc, #88]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e6a:	4b12      	ldr	r3, [pc, #72]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	490e      	ldr	r1, [pc, #56]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e7e:	f000 fb7f 	bl	8004580 <HAL_RCC_GetSysClockFreq>
 8003e82:	4602      	mov	r2, r0
 8003e84:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	091b      	lsrs	r3, r3, #4
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	490a      	ldr	r1, [pc, #40]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e90:	5ccb      	ldrb	r3, [r1, r3]
 8003e92:	fa22 f303 	lsr.w	r3, r2, r3
 8003e96:	4a09      	ldr	r2, [pc, #36]	@ (8003ebc <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e9a:	4b09      	ldr	r3, [pc, #36]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fe f8c6 	bl	8002030 <HAL_InitTick>

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40023c00 	.word	0x40023c00
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	0800db50 	.word	0x0800db50
 8003ebc:	20000004 	.word	0x20000004
 8003ec0:	20000008 	.word	0x20000008

08003ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec8:	4b03      	ldr	r3, [pc, #12]	@ (8003ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eca:	681b      	ldr	r3, [r3, #0]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20000004 	.word	0x20000004

08003edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ee0:	f7ff fff0 	bl	8003ec4 <HAL_RCC_GetHCLKFreq>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	4b05      	ldr	r3, [pc, #20]	@ (8003efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	0a9b      	lsrs	r3, r3, #10
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	4903      	ldr	r1, [pc, #12]	@ (8003f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ef2:	5ccb      	ldrb	r3, [r1, r3]
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40023800 	.word	0x40023800
 8003f00:	0800db60 	.word	0x0800db60

08003f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f08:	f7ff ffdc 	bl	8003ec4 <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b05      	ldr	r3, [pc, #20]	@ (8003f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	0b5b      	lsrs	r3, r3, #13
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4903      	ldr	r1, [pc, #12]	@ (8003f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40023800 	.word	0x40023800
 8003f28:	0800db60 	.word	0x0800db60

08003f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08c      	sub	sp, #48	@ 0x30
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d010      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003f64:	4b6f      	ldr	r3, [pc, #444]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f6a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f72:	496c      	ldr	r1, [pc, #432]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003f82:	2301      	movs	r3, #1
 8003f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d010      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003f92:	4b64      	ldr	r3, [pc, #400]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f98:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa0:	4960      	ldr	r1, [pc, #384]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d017      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fc0:	4b58      	ldr	r3, [pc, #352]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fce:	4955      	ldr	r1, [pc, #340]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fde:	d101      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003fec:	2301      	movs	r3, #1
 8003fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d017      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ffc:	4b49      	ldr	r3, [pc, #292]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004002:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800400a:	4946      	ldr	r1, [pc, #280]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004016:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800401a:	d101      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800401c:	2301      	movs	r3, #1
 800401e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004028:	2301      	movs	r3, #1
 800402a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 808a 	beq.w	800414e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	4b39      	ldr	r3, [pc, #228]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	4a38      	ldr	r2, [pc, #224]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004048:	6413      	str	r3, [r2, #64]	@ 0x40
 800404a:	4b36      	ldr	r3, [pc, #216]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004056:	4b34      	ldr	r3, [pc, #208]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a33      	ldr	r2, [pc, #204]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800405c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004060:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004062:	f7fe f829 	bl	80020b8 <HAL_GetTick>
 8004066:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004068:	e008      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406a:	f7fe f825 	bl	80020b8 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e278      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800407c:	4b2a      	ldr	r3, [pc, #168]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004088:	4b26      	ldr	r3, [pc, #152]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004090:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d02f      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040a0:	6a3a      	ldr	r2, [r7, #32]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d028      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ae:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040b0:	4b1e      	ldr	r3, [pc, #120]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040b6:	4b1d      	ldr	r3, [pc, #116]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040bc:	4a19      	ldr	r2, [pc, #100]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040c2:	4b18      	ldr	r3, [pc, #96]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d114      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80040ce:	f7fd fff3 	bl	80020b8 <HAL_GetTick>
 80040d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d4:	e00a      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d6:	f7fd ffef 	bl	80020b8 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e240      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ee      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004100:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004104:	d114      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004106:	4b07      	ldr	r3, [pc, #28]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004116:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800411a:	4902      	ldr	r1, [pc, #8]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800411c:	4313      	orrs	r3, r2
 800411e:	608b      	str	r3, [r1, #8]
 8004120:	e00c      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800
 8004128:	40007000 	.word	0x40007000
 800412c:	42470e40 	.word	0x42470e40
 8004130:	4b4a      	ldr	r3, [pc, #296]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4a49      	ldr	r2, [pc, #292]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004136:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800413a:	6093      	str	r3, [r2, #8]
 800413c:	4b47      	ldr	r3, [pc, #284]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800413e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004148:	4944      	ldr	r1, [pc, #272]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800414a:	4313      	orrs	r3, r2
 800414c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	d004      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8004160:	4b3f      	ldr	r3, [pc, #252]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004162:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004170:	4b3a      	ldr	r3, [pc, #232]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004176:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800417e:	4937      	ldr	r1, [pc, #220]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004192:	4b32      	ldr	r3, [pc, #200]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004198:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041a0:	492e      	ldr	r1, [pc, #184]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d011      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041b4:	4b29      	ldr	r3, [pc, #164]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ba:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c2:	4926      	ldr	r1, [pc, #152]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041d2:	d101      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80041d4:	2301      	movs	r3, #1
 80041d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80041e4:	4b1d      	ldr	r3, [pc, #116]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ea:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f2:	491a      	ldr	r1, [pc, #104]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004202:	2b00      	cmp	r3, #0
 8004204:	d011      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004206:	4b15      	ldr	r3, [pc, #84]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004208:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800420c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004214:	4911      	ldr	r1, [pc, #68]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004220:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004224:	d101      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004226:	2301      	movs	r3, #1
 8004228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800422a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d005      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004238:	f040 80ff 	bne.w	800443a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800423c:	4b09      	ldr	r3, [pc, #36]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004242:	f7fd ff39 	bl	80020b8 <HAL_GetTick>
 8004246:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004248:	e00e      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800424a:	f7fd ff35 	bl	80020b8 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d907      	bls.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e188      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800425c:	40023800 	.word	0x40023800
 8004260:	424711e0 	.word	0x424711e0
 8004264:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004268:	4b7e      	ldr	r3, [pc, #504]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1ea      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004284:	2b00      	cmp	r3, #0
 8004286:	d009      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004290:	2b00      	cmp	r3, #0
 8004292:	d028      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004298:	2b00      	cmp	r3, #0
 800429a:	d124      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800429c:	4b71      	ldr	r3, [pc, #452]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800429e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042a2:	0c1b      	lsrs	r3, r3, #16
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	3301      	adds	r3, #1
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042b4:	0e1b      	lsrs	r3, r3, #24
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	019b      	lsls	r3, r3, #6
 80042c6:	431a      	orrs	r2, r3
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	085b      	lsrs	r3, r3, #1
 80042cc:	3b01      	subs	r3, #1
 80042ce:	041b      	lsls	r3, r3, #16
 80042d0:	431a      	orrs	r2, r3
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	061b      	lsls	r3, r3, #24
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	071b      	lsls	r3, r3, #28
 80042de:	4961      	ldr	r1, [pc, #388]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0304 	and.w	r3, r3, #4
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d004      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042fa:	d00a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004304:	2b00      	cmp	r3, #0
 8004306:	d035      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800430c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004310:	d130      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004312:	4b54      	ldr	r3, [pc, #336]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004318:	0c1b      	lsrs	r3, r3, #16
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	3301      	adds	r3, #1
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004324:	4b4f      	ldr	r3, [pc, #316]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800432a:	0f1b      	lsrs	r3, r3, #28
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	019b      	lsls	r3, r3, #6
 800433c:	431a      	orrs	r2, r3
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	085b      	lsrs	r3, r3, #1
 8004342:	3b01      	subs	r3, #1
 8004344:	041b      	lsls	r3, r3, #16
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	061b      	lsls	r3, r3, #24
 800434e:	431a      	orrs	r2, r3
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	071b      	lsls	r3, r3, #28
 8004354:	4943      	ldr	r1, [pc, #268]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800435c:	4b41      	ldr	r3, [pc, #260]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800435e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004362:	f023 021f 	bic.w	r2, r3, #31
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436a:	3b01      	subs	r3, #1
 800436c:	493d      	ldr	r1, [pc, #244]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800437c:	2b00      	cmp	r3, #0
 800437e:	d029      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004384:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004388:	d124      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800438a:	4b36      	ldr	r3, [pc, #216]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800438c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004390:	0c1b      	lsrs	r3, r3, #16
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	3301      	adds	r3, #1
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800439c:	4b31      	ldr	r3, [pc, #196]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800439e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043a2:	0f1b      	lsrs	r3, r3, #28
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	019b      	lsls	r3, r3, #6
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	085b      	lsrs	r3, r3, #1
 80043bc:	3b01      	subs	r3, #1
 80043be:	041b      	lsls	r3, r3, #16
 80043c0:	431a      	orrs	r2, r3
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	061b      	lsls	r3, r3, #24
 80043c6:	431a      	orrs	r2, r3
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	071b      	lsls	r3, r3, #28
 80043cc:	4925      	ldr	r1, [pc, #148]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d016      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	019b      	lsls	r3, r3, #6
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	3b01      	subs	r3, #1
 80043f4:	041b      	lsls	r3, r3, #16
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	061b      	lsls	r3, r3, #24
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	071b      	lsls	r3, r3, #28
 8004406:	4917      	ldr	r1, [pc, #92]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800440e:	4b16      	ldr	r3, [pc, #88]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004410:	2201      	movs	r2, #1
 8004412:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004414:	f7fd fe50 	bl	80020b8 <HAL_GetTick>
 8004418:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800441a:	e008      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800441c:	f7fd fe4c 	bl	80020b8 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e09f      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800442e:	4b0d      	ldr	r3, [pc, #52]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800443a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443c:	2b01      	cmp	r3, #1
 800443e:	f040 8095 	bne.w	800456c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004442:	4b0a      	ldr	r3, [pc, #40]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004448:	f7fd fe36 	bl	80020b8 <HAL_GetTick>
 800444c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800444e:	e00f      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004450:	f7fd fe32 	bl	80020b8 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d908      	bls.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e085      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004462:	bf00      	nop
 8004464:	40023800 	.word	0x40023800
 8004468:	42470068 	.word	0x42470068
 800446c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004470:	4b41      	ldr	r3, [pc, #260]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800447c:	d0e8      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800449a:	2b00      	cmp	r3, #0
 800449c:	d02b      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d127      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80044a6:	4b34      	ldr	r3, [pc, #208]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	3301      	adds	r3, #1
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699a      	ldr	r2, [r3, #24]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	019b      	lsls	r3, r3, #6
 80044c2:	431a      	orrs	r2, r3
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	085b      	lsrs	r3, r3, #1
 80044c8:	3b01      	subs	r3, #1
 80044ca:	041b      	lsls	r3, r3, #16
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d2:	061b      	lsls	r3, r3, #24
 80044d4:	4928      	ldr	r1, [pc, #160]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044dc:	4b26      	ldr	r3, [pc, #152]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044e2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ea:	3b01      	subs	r3, #1
 80044ec:	021b      	lsls	r3, r3, #8
 80044ee:	4922      	ldr	r1, [pc, #136]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d01d      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004506:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800450a:	d118      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800450c:	4b1a      	ldr	r3, [pc, #104]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	0e1b      	lsrs	r3, r3, #24
 8004514:	f003 030f 	and.w	r3, r3, #15
 8004518:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	019b      	lsls	r3, r3, #6
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	085b      	lsrs	r3, r3, #1
 800452c:	3b01      	subs	r3, #1
 800452e:	041b      	lsls	r3, r3, #16
 8004530:	431a      	orrs	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	061b      	lsls	r3, r3, #24
 8004536:	4910      	ldr	r1, [pc, #64]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800453e:	4b0f      	ldr	r3, [pc, #60]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004540:	2201      	movs	r2, #1
 8004542:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004544:	f7fd fdb8 	bl	80020b8 <HAL_GetTick>
 8004548:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800454a:	e008      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800454c:	f7fd fdb4 	bl	80020b8 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e007      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800455e:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004566:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800456a:	d1ef      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3730      	adds	r7, #48	@ 0x30
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40023800 	.word	0x40023800
 800457c:	42470070 	.word	0x42470070

08004580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004584:	b0ae      	sub	sp, #184	@ 0xb8
 8004586:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045a6:	4bcb      	ldr	r3, [pc, #812]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b0c      	cmp	r3, #12
 80045b0:	f200 8206 	bhi.w	80049c0 <HAL_RCC_GetSysClockFreq+0x440>
 80045b4:	a201      	add	r2, pc, #4	@ (adr r2, 80045bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045f1 	.word	0x080045f1
 80045c0:	080049c1 	.word	0x080049c1
 80045c4:	080049c1 	.word	0x080049c1
 80045c8:	080049c1 	.word	0x080049c1
 80045cc:	080045f9 	.word	0x080045f9
 80045d0:	080049c1 	.word	0x080049c1
 80045d4:	080049c1 	.word	0x080049c1
 80045d8:	080049c1 	.word	0x080049c1
 80045dc:	08004601 	.word	0x08004601
 80045e0:	080049c1 	.word	0x080049c1
 80045e4:	080049c1 	.word	0x080049c1
 80045e8:	080049c1 	.word	0x080049c1
 80045ec:	080047f1 	.word	0x080047f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045f0:	4bb9      	ldr	r3, [pc, #740]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x358>)
 80045f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80045f6:	e1e7      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045f8:	4bb8      	ldr	r3, [pc, #736]	@ (80048dc <HAL_RCC_GetSysClockFreq+0x35c>)
 80045fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80045fe:	e1e3      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004600:	4bb4      	ldr	r3, [pc, #720]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004608:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800460c:	4bb1      	ldr	r3, [pc, #708]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d071      	beq.n	80046fc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004618:	4bae      	ldr	r3, [pc, #696]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	099b      	lsrs	r3, r3, #6
 800461e:	2200      	movs	r2, #0
 8004620:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004624:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004628:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800462c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004630:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004634:	2300      	movs	r3, #0
 8004636:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800463a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800463e:	4622      	mov	r2, r4
 8004640:	462b      	mov	r3, r5
 8004642:	f04f 0000 	mov.w	r0, #0
 8004646:	f04f 0100 	mov.w	r1, #0
 800464a:	0159      	lsls	r1, r3, #5
 800464c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004650:	0150      	lsls	r0, r2, #5
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4621      	mov	r1, r4
 8004658:	1a51      	subs	r1, r2, r1
 800465a:	6439      	str	r1, [r7, #64]	@ 0x40
 800465c:	4629      	mov	r1, r5
 800465e:	eb63 0301 	sbc.w	r3, r3, r1
 8004662:	647b      	str	r3, [r7, #68]	@ 0x44
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004670:	4649      	mov	r1, r9
 8004672:	018b      	lsls	r3, r1, #6
 8004674:	4641      	mov	r1, r8
 8004676:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800467a:	4641      	mov	r1, r8
 800467c:	018a      	lsls	r2, r1, #6
 800467e:	4641      	mov	r1, r8
 8004680:	1a51      	subs	r1, r2, r1
 8004682:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004684:	4649      	mov	r1, r9
 8004686:	eb63 0301 	sbc.w	r3, r3, r1
 800468a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004698:	4649      	mov	r1, r9
 800469a:	00cb      	lsls	r3, r1, #3
 800469c:	4641      	mov	r1, r8
 800469e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046a2:	4641      	mov	r1, r8
 80046a4:	00ca      	lsls	r2, r1, #3
 80046a6:	4610      	mov	r0, r2
 80046a8:	4619      	mov	r1, r3
 80046aa:	4603      	mov	r3, r0
 80046ac:	4622      	mov	r2, r4
 80046ae:	189b      	adds	r3, r3, r2
 80046b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80046b2:	462b      	mov	r3, r5
 80046b4:	460a      	mov	r2, r1
 80046b6:	eb42 0303 	adc.w	r3, r2, r3
 80046ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80046c8:	4629      	mov	r1, r5
 80046ca:	024b      	lsls	r3, r1, #9
 80046cc:	4621      	mov	r1, r4
 80046ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046d2:	4621      	mov	r1, r4
 80046d4:	024a      	lsls	r2, r1, #9
 80046d6:	4610      	mov	r0, r2
 80046d8:	4619      	mov	r1, r3
 80046da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046de:	2200      	movs	r2, #0
 80046e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80046ec:	f7fc fa8c 	bl	8000c08 <__aeabi_uldivmod>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4613      	mov	r3, r2
 80046f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046fa:	e067      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046fc:	4b75      	ldr	r3, [pc, #468]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	099b      	lsrs	r3, r3, #6
 8004702:	2200      	movs	r2, #0
 8004704:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004708:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800470c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004714:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004716:	2300      	movs	r3, #0
 8004718:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800471a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800471e:	4622      	mov	r2, r4
 8004720:	462b      	mov	r3, r5
 8004722:	f04f 0000 	mov.w	r0, #0
 8004726:	f04f 0100 	mov.w	r1, #0
 800472a:	0159      	lsls	r1, r3, #5
 800472c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004730:	0150      	lsls	r0, r2, #5
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4621      	mov	r1, r4
 8004738:	1a51      	subs	r1, r2, r1
 800473a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800473c:	4629      	mov	r1, r5
 800473e:	eb63 0301 	sbc.w	r3, r3, r1
 8004742:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004750:	4649      	mov	r1, r9
 8004752:	018b      	lsls	r3, r1, #6
 8004754:	4641      	mov	r1, r8
 8004756:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800475a:	4641      	mov	r1, r8
 800475c:	018a      	lsls	r2, r1, #6
 800475e:	4641      	mov	r1, r8
 8004760:	ebb2 0a01 	subs.w	sl, r2, r1
 8004764:	4649      	mov	r1, r9
 8004766:	eb63 0b01 	sbc.w	fp, r3, r1
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004776:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800477a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800477e:	4692      	mov	sl, r2
 8004780:	469b      	mov	fp, r3
 8004782:	4623      	mov	r3, r4
 8004784:	eb1a 0303 	adds.w	r3, sl, r3
 8004788:	623b      	str	r3, [r7, #32]
 800478a:	462b      	mov	r3, r5
 800478c:	eb4b 0303 	adc.w	r3, fp, r3
 8004790:	627b      	str	r3, [r7, #36]	@ 0x24
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800479e:	4629      	mov	r1, r5
 80047a0:	028b      	lsls	r3, r1, #10
 80047a2:	4621      	mov	r1, r4
 80047a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047a8:	4621      	mov	r1, r4
 80047aa:	028a      	lsls	r2, r1, #10
 80047ac:	4610      	mov	r0, r2
 80047ae:	4619      	mov	r1, r3
 80047b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047b4:	2200      	movs	r2, #0
 80047b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80047b8:	677a      	str	r2, [r7, #116]	@ 0x74
 80047ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80047be:	f7fc fa23 	bl	8000c08 <__aeabi_uldivmod>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4613      	mov	r3, r2
 80047c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80047cc:	4b41      	ldr	r3, [pc, #260]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	0c1b      	lsrs	r3, r3, #16
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	3301      	adds	r3, #1
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80047de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80047e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80047ee:	e0eb      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047f0:	4b38      	ldr	r3, [pc, #224]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047fc:	4b35      	ldr	r3, [pc, #212]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d06b      	beq.n	80048e0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004808:	4b32      	ldr	r3, [pc, #200]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	099b      	lsrs	r3, r3, #6
 800480e:	2200      	movs	r2, #0
 8004810:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004812:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004814:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481a:	663b      	str	r3, [r7, #96]	@ 0x60
 800481c:	2300      	movs	r3, #0
 800481e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004820:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004824:	4622      	mov	r2, r4
 8004826:	462b      	mov	r3, r5
 8004828:	f04f 0000 	mov.w	r0, #0
 800482c:	f04f 0100 	mov.w	r1, #0
 8004830:	0159      	lsls	r1, r3, #5
 8004832:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004836:	0150      	lsls	r0, r2, #5
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4621      	mov	r1, r4
 800483e:	1a51      	subs	r1, r2, r1
 8004840:	61b9      	str	r1, [r7, #24]
 8004842:	4629      	mov	r1, r5
 8004844:	eb63 0301 	sbc.w	r3, r3, r1
 8004848:	61fb      	str	r3, [r7, #28]
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004856:	4659      	mov	r1, fp
 8004858:	018b      	lsls	r3, r1, #6
 800485a:	4651      	mov	r1, sl
 800485c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004860:	4651      	mov	r1, sl
 8004862:	018a      	lsls	r2, r1, #6
 8004864:	4651      	mov	r1, sl
 8004866:	ebb2 0801 	subs.w	r8, r2, r1
 800486a:	4659      	mov	r1, fp
 800486c:	eb63 0901 	sbc.w	r9, r3, r1
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800487c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004880:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004884:	4690      	mov	r8, r2
 8004886:	4699      	mov	r9, r3
 8004888:	4623      	mov	r3, r4
 800488a:	eb18 0303 	adds.w	r3, r8, r3
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	462b      	mov	r3, r5
 8004892:	eb49 0303 	adc.w	r3, r9, r3
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80048a4:	4629      	mov	r1, r5
 80048a6:	024b      	lsls	r3, r1, #9
 80048a8:	4621      	mov	r1, r4
 80048aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048ae:	4621      	mov	r1, r4
 80048b0:	024a      	lsls	r2, r1, #9
 80048b2:	4610      	mov	r0, r2
 80048b4:	4619      	mov	r1, r3
 80048b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048ba:	2200      	movs	r2, #0
 80048bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048be:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80048c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048c4:	f7fc f9a0 	bl	8000c08 <__aeabi_uldivmod>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4613      	mov	r3, r2
 80048ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048d2:	e065      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x420>
 80048d4:	40023800 	.word	0x40023800
 80048d8:	00f42400 	.word	0x00f42400
 80048dc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e0:	4b3d      	ldr	r3, [pc, #244]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	099b      	lsrs	r3, r3, #6
 80048e6:	2200      	movs	r2, #0
 80048e8:	4618      	mov	r0, r3
 80048ea:	4611      	mov	r1, r2
 80048ec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80048f2:	2300      	movs	r3, #0
 80048f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80048f6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80048fa:	4642      	mov	r2, r8
 80048fc:	464b      	mov	r3, r9
 80048fe:	f04f 0000 	mov.w	r0, #0
 8004902:	f04f 0100 	mov.w	r1, #0
 8004906:	0159      	lsls	r1, r3, #5
 8004908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800490c:	0150      	lsls	r0, r2, #5
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4641      	mov	r1, r8
 8004914:	1a51      	subs	r1, r2, r1
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	4649      	mov	r1, r9
 800491a:	eb63 0301 	sbc.w	r3, r3, r1
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800492c:	4659      	mov	r1, fp
 800492e:	018b      	lsls	r3, r1, #6
 8004930:	4651      	mov	r1, sl
 8004932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004936:	4651      	mov	r1, sl
 8004938:	018a      	lsls	r2, r1, #6
 800493a:	4651      	mov	r1, sl
 800493c:	1a54      	subs	r4, r2, r1
 800493e:	4659      	mov	r1, fp
 8004940:	eb63 0501 	sbc.w	r5, r3, r1
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	00eb      	lsls	r3, r5, #3
 800494e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004952:	00e2      	lsls	r2, r4, #3
 8004954:	4614      	mov	r4, r2
 8004956:	461d      	mov	r5, r3
 8004958:	4643      	mov	r3, r8
 800495a:	18e3      	adds	r3, r4, r3
 800495c:	603b      	str	r3, [r7, #0]
 800495e:	464b      	mov	r3, r9
 8004960:	eb45 0303 	adc.w	r3, r5, r3
 8004964:	607b      	str	r3, [r7, #4]
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004972:	4629      	mov	r1, r5
 8004974:	028b      	lsls	r3, r1, #10
 8004976:	4621      	mov	r1, r4
 8004978:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800497c:	4621      	mov	r1, r4
 800497e:	028a      	lsls	r2, r1, #10
 8004980:	4610      	mov	r0, r2
 8004982:	4619      	mov	r1, r3
 8004984:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004988:	2200      	movs	r2, #0
 800498a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800498c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800498e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004992:	f7fc f939 	bl	8000c08 <__aeabi_uldivmod>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4613      	mov	r3, r2
 800499c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80049a0:	4b0d      	ldr	r3, [pc, #52]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	0f1b      	lsrs	r3, r3, #28
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80049ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80049b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80049be:	e003      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049c0:	4b06      	ldr	r3, [pc, #24]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x45c>)
 80049c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80049c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	37b8      	adds	r7, #184	@ 0xb8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049d6:	bf00      	nop
 80049d8:	40023800 	.word	0x40023800
 80049dc:	00f42400 	.word	0x00f42400

080049e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e28d      	b.n	8004f0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 8083 	beq.w	8004b06 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a00:	4b94      	ldr	r3, [pc, #592]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 030c 	and.w	r3, r3, #12
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d019      	beq.n	8004a40 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a0c:	4b91      	ldr	r3, [pc, #580]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 030c 	and.w	r3, r3, #12
        || \
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d106      	bne.n	8004a26 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a18:	4b8e      	ldr	r3, [pc, #568]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a24:	d00c      	beq.n	8004a40 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a26:	4b8b      	ldr	r3, [pc, #556]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a2e:	2b0c      	cmp	r3, #12
 8004a30:	d112      	bne.n	8004a58 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a32:	4b88      	ldr	r3, [pc, #544]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a3e:	d10b      	bne.n	8004a58 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a40:	4b84      	ldr	r3, [pc, #528]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d05b      	beq.n	8004b04 <HAL_RCC_OscConfig+0x124>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d157      	bne.n	8004b04 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e25a      	b.n	8004f0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a60:	d106      	bne.n	8004a70 <HAL_RCC_OscConfig+0x90>
 8004a62:	4b7c      	ldr	r3, [pc, #496]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a7b      	ldr	r2, [pc, #492]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	e01d      	b.n	8004aac <HAL_RCC_OscConfig+0xcc>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a78:	d10c      	bne.n	8004a94 <HAL_RCC_OscConfig+0xb4>
 8004a7a:	4b76      	ldr	r3, [pc, #472]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a75      	ldr	r2, [pc, #468]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	4b73      	ldr	r3, [pc, #460]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a72      	ldr	r2, [pc, #456]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	e00b      	b.n	8004aac <HAL_RCC_OscConfig+0xcc>
 8004a94:	4b6f      	ldr	r3, [pc, #444]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a6e      	ldr	r2, [pc, #440]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	4b6c      	ldr	r3, [pc, #432]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a6b      	ldr	r2, [pc, #428]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004aa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d013      	beq.n	8004adc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fd fb00 	bl	80020b8 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004abc:	f7fd fafc 	bl	80020b8 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	@ 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e21f      	b.n	8004f0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ace:	4b61      	ldr	r3, [pc, #388]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0xdc>
 8004ada:	e014      	b.n	8004b06 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fd faec 	bl	80020b8 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae4:	f7fd fae8 	bl	80020b8 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b64      	cmp	r3, #100	@ 0x64
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e20b      	b.n	8004f0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004af6:	4b57      	ldr	r3, [pc, #348]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x104>
 8004b02:	e000      	b.n	8004b06 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d06f      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b12:	4b50      	ldr	r3, [pc, #320]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 030c 	and.w	r3, r3, #12
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d017      	beq.n	8004b4e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b1e:	4b4d      	ldr	r3, [pc, #308]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
        || \
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d105      	bne.n	8004b36 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00b      	beq.n	8004b4e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b36:	4b47      	ldr	r3, [pc, #284]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b3e:	2b0c      	cmp	r3, #12
 8004b40:	d11c      	bne.n	8004b7c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b42:	4b44      	ldr	r3, [pc, #272]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d116      	bne.n	8004b7c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4e:	4b41      	ldr	r3, [pc, #260]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d005      	beq.n	8004b66 <HAL_RCC_OscConfig+0x186>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d001      	beq.n	8004b66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e1d3      	b.n	8004f0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b66:	4b3b      	ldr	r3, [pc, #236]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	4937      	ldr	r1, [pc, #220]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7a:	e03a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d020      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b84:	4b34      	ldr	r3, [pc, #208]	@ (8004c58 <HAL_RCC_OscConfig+0x278>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8a:	f7fd fa95 	bl	80020b8 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b92:	f7fd fa91 	bl	80020b8 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e1b4      	b.n	8004f0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb0:	4b28      	ldr	r3, [pc, #160]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	4925      	ldr	r1, [pc, #148]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	600b      	str	r3, [r1, #0]
 8004bc4:	e015      	b.n	8004bf2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bc6:	4b24      	ldr	r3, [pc, #144]	@ (8004c58 <HAL_RCC_OscConfig+0x278>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fd fa74 	bl	80020b8 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd4:	f7fd fa70 	bl	80020b8 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e193      	b.n	8004f0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be6:	4b1b      	ldr	r3, [pc, #108]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d036      	beq.n	8004c6c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d016      	beq.n	8004c34 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c06:	4b15      	ldr	r3, [pc, #84]	@ (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0c:	f7fd fa54 	bl	80020b8 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c14:	f7fd fa50 	bl	80020b8 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e173      	b.n	8004f0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c26:	4b0b      	ldr	r3, [pc, #44]	@ (8004c54 <HAL_RCC_OscConfig+0x274>)
 8004c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0x234>
 8004c32:	e01b      	b.n	8004c6c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c34:	4b09      	ldr	r3, [pc, #36]	@ (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3a:	f7fd fa3d 	bl	80020b8 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c40:	e00e      	b.n	8004c60 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c42:	f7fd fa39 	bl	80020b8 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d907      	bls.n	8004c60 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e15c      	b.n	8004f0e <HAL_RCC_OscConfig+0x52e>
 8004c54:	40023800 	.word	0x40023800
 8004c58:	42470000 	.word	0x42470000
 8004c5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c60:	4b8a      	ldr	r3, [pc, #552]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004c62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1ea      	bne.n	8004c42 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 8097 	beq.w	8004da8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c7e:	4b83      	ldr	r3, [pc, #524]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10f      	bne.n	8004caa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c92:	4a7e      	ldr	r2, [pc, #504]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c9a:	4b7c      	ldr	r3, [pc, #496]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ca2:	60bb      	str	r3, [r7, #8]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004caa:	4b79      	ldr	r3, [pc, #484]	@ (8004e90 <HAL_RCC_OscConfig+0x4b0>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d118      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cb6:	4b76      	ldr	r3, [pc, #472]	@ (8004e90 <HAL_RCC_OscConfig+0x4b0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a75      	ldr	r2, [pc, #468]	@ (8004e90 <HAL_RCC_OscConfig+0x4b0>)
 8004cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cc2:	f7fd f9f9 	bl	80020b8 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cca:	f7fd f9f5 	bl	80020b8 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e118      	b.n	8004f0e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cdc:	4b6c      	ldr	r3, [pc, #432]	@ (8004e90 <HAL_RCC_OscConfig+0x4b0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d106      	bne.n	8004cfe <HAL_RCC_OscConfig+0x31e>
 8004cf0:	4b66      	ldr	r3, [pc, #408]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf4:	4a65      	ldr	r2, [pc, #404]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cfc:	e01c      	b.n	8004d38 <HAL_RCC_OscConfig+0x358>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b05      	cmp	r3, #5
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x340>
 8004d06:	4b61      	ldr	r3, [pc, #388]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0a:	4a60      	ldr	r2, [pc, #384]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004d0c:	f043 0304 	orr.w	r3, r3, #4
 8004d10:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d12:	4b5e      	ldr	r3, [pc, #376]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d16:	4a5d      	ldr	r2, [pc, #372]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCC_OscConfig+0x358>
 8004d20:	4b5a      	ldr	r3, [pc, #360]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d24:	4a59      	ldr	r2, [pc, #356]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004d26:	f023 0301 	bic.w	r3, r3, #1
 8004d2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d2c:	4b57      	ldr	r3, [pc, #348]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d30:	4a56      	ldr	r2, [pc, #344]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004d32:	f023 0304 	bic.w	r3, r3, #4
 8004d36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d015      	beq.n	8004d6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d40:	f7fd f9ba 	bl	80020b8 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d48:	f7fd f9b6 	bl	80020b8 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e0d7      	b.n	8004f0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5e:	4b4b      	ldr	r3, [pc, #300]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0ee      	beq.n	8004d48 <HAL_RCC_OscConfig+0x368>
 8004d6a:	e014      	b.n	8004d96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6c:	f7fd f9a4 	bl	80020b8 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d72:	e00a      	b.n	8004d8a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d74:	f7fd f9a0 	bl	80020b8 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e0c1      	b.n	8004f0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d8a:	4b40      	ldr	r3, [pc, #256]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1ee      	bne.n	8004d74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d105      	bne.n	8004da8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da0:	4a3a      	ldr	r2, [pc, #232]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004da2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004da6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80ad 	beq.w	8004f0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004db2:	4b36      	ldr	r3, [pc, #216]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d060      	beq.n	8004e80 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d145      	bne.n	8004e52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc6:	4b33      	ldr	r3, [pc, #204]	@ (8004e94 <HAL_RCC_OscConfig+0x4b4>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dcc:	f7fd f974 	bl	80020b8 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd4:	f7fd f970 	bl	80020b8 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e093      	b.n	8004f0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de6:	4b29      	ldr	r3, [pc, #164]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69da      	ldr	r2, [r3, #28]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	019b      	lsls	r3, r3, #6
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e08:	085b      	lsrs	r3, r3, #1
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	041b      	lsls	r3, r3, #16
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e14:	061b      	lsls	r3, r3, #24
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1c:	071b      	lsls	r3, r3, #28
 8004e1e:	491b      	ldr	r1, [pc, #108]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e24:	4b1b      	ldr	r3, [pc, #108]	@ (8004e94 <HAL_RCC_OscConfig+0x4b4>)
 8004e26:	2201      	movs	r2, #1
 8004e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2a:	f7fd f945 	bl	80020b8 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e32:	f7fd f941 	bl	80020b8 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e064      	b.n	8004f0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e44:	4b11      	ldr	r3, [pc, #68]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f0      	beq.n	8004e32 <HAL_RCC_OscConfig+0x452>
 8004e50:	e05c      	b.n	8004f0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e52:	4b10      	ldr	r3, [pc, #64]	@ (8004e94 <HAL_RCC_OscConfig+0x4b4>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7fd f92e 	bl	80020b8 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e60:	f7fd f92a 	bl	80020b8 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e04d      	b.n	8004f0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e72:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <HAL_RCC_OscConfig+0x4ac>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f0      	bne.n	8004e60 <HAL_RCC_OscConfig+0x480>
 8004e7e:	e045      	b.n	8004f0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d107      	bne.n	8004e98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e040      	b.n	8004f0e <HAL_RCC_OscConfig+0x52e>
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	40007000 	.word	0x40007000
 8004e94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e98:	4b1f      	ldr	r3, [pc, #124]	@ (8004f18 <HAL_RCC_OscConfig+0x538>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d030      	beq.n	8004f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d129      	bne.n	8004f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d122      	bne.n	8004f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ec8:	4013      	ands	r3, r2
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ece:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d119      	bne.n	8004f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ede:	085b      	lsrs	r3, r3, #1
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d10f      	bne.n	8004f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d107      	bne.n	8004f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d001      	beq.n	8004f0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	40023800 	.word	0x40023800

08004f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e041      	b.n	8004fb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fc fe40 	bl	8001bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f000 fad8 	bl	8005510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e041      	b.n	8005050 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d106      	bne.n	8004fe6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f839 	bl	8005058 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	f000 fa89 	bl	8005510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d109      	bne.n	8005090 <HAL_TIM_PWM_Start+0x24>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	bf14      	ite	ne
 8005088:	2301      	movne	r3, #1
 800508a:	2300      	moveq	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	e022      	b.n	80050d6 <HAL_TIM_PWM_Start+0x6a>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b04      	cmp	r3, #4
 8005094:	d109      	bne.n	80050aa <HAL_TIM_PWM_Start+0x3e>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b01      	cmp	r3, #1
 80050a0:	bf14      	ite	ne
 80050a2:	2301      	movne	r3, #1
 80050a4:	2300      	moveq	r3, #0
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	e015      	b.n	80050d6 <HAL_TIM_PWM_Start+0x6a>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d109      	bne.n	80050c4 <HAL_TIM_PWM_Start+0x58>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	bf14      	ite	ne
 80050bc:	2301      	movne	r3, #1
 80050be:	2300      	moveq	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	e008      	b.n	80050d6 <HAL_TIM_PWM_Start+0x6a>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	bf14      	ite	ne
 80050d0:	2301      	movne	r3, #1
 80050d2:	2300      	moveq	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e07c      	b.n	80051d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_PWM_Start+0x82>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050ec:	e013      	b.n	8005116 <HAL_TIM_PWM_Start+0xaa>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_PWM_Start+0x92>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050fc:	e00b      	b.n	8005116 <HAL_TIM_PWM_Start+0xaa>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b08      	cmp	r3, #8
 8005102:	d104      	bne.n	800510e <HAL_TIM_PWM_Start+0xa2>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800510c:	e003      	b.n	8005116 <HAL_TIM_PWM_Start+0xaa>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2201      	movs	r2, #1
 800511c:	6839      	ldr	r1, [r7, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f000 fcec 	bl	8005afc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a2d      	ldr	r2, [pc, #180]	@ (80051e0 <HAL_TIM_PWM_Start+0x174>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <HAL_TIM_PWM_Start+0xcc>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a2c      	ldr	r2, [pc, #176]	@ (80051e4 <HAL_TIM_PWM_Start+0x178>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d101      	bne.n	800513c <HAL_TIM_PWM_Start+0xd0>
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <HAL_TIM_PWM_Start+0xd2>
 800513c:	2300      	movs	r3, #0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d007      	beq.n	8005152 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005150:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a22      	ldr	r2, [pc, #136]	@ (80051e0 <HAL_TIM_PWM_Start+0x174>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d022      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x136>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005164:	d01d      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x136>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1f      	ldr	r2, [pc, #124]	@ (80051e8 <HAL_TIM_PWM_Start+0x17c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d018      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x136>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a1d      	ldr	r2, [pc, #116]	@ (80051ec <HAL_TIM_PWM_Start+0x180>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d013      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x136>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a1c      	ldr	r2, [pc, #112]	@ (80051f0 <HAL_TIM_PWM_Start+0x184>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d00e      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x136>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a16      	ldr	r2, [pc, #88]	@ (80051e4 <HAL_TIM_PWM_Start+0x178>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d009      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x136>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a18      	ldr	r2, [pc, #96]	@ (80051f4 <HAL_TIM_PWM_Start+0x188>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x136>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a16      	ldr	r2, [pc, #88]	@ (80051f8 <HAL_TIM_PWM_Start+0x18c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d111      	bne.n	80051c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b06      	cmp	r3, #6
 80051b2:	d010      	beq.n	80051d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c4:	e007      	b.n	80051d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0201 	orr.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40010400 	.word	0x40010400
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40000800 	.word	0x40000800
 80051f0:	40000c00 	.word	0x40000c00
 80051f4:	40014000 	.word	0x40014000
 80051f8:	40001800 	.word	0x40001800

080051fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005208:	2300      	movs	r3, #0
 800520a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005216:	2302      	movs	r3, #2
 8005218:	e0ae      	b.n	8005378 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b0c      	cmp	r3, #12
 8005226:	f200 809f 	bhi.w	8005368 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800522a:	a201      	add	r2, pc, #4	@ (adr r2, 8005230 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	08005265 	.word	0x08005265
 8005234:	08005369 	.word	0x08005369
 8005238:	08005369 	.word	0x08005369
 800523c:	08005369 	.word	0x08005369
 8005240:	080052a5 	.word	0x080052a5
 8005244:	08005369 	.word	0x08005369
 8005248:	08005369 	.word	0x08005369
 800524c:	08005369 	.word	0x08005369
 8005250:	080052e7 	.word	0x080052e7
 8005254:	08005369 	.word	0x08005369
 8005258:	08005369 	.word	0x08005369
 800525c:	08005369 	.word	0x08005369
 8005260:	08005327 	.word	0x08005327
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68b9      	ldr	r1, [r7, #8]
 800526a:	4618      	mov	r0, r3
 800526c:	f000 f9fc 	bl	8005668 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0208 	orr.w	r2, r2, #8
 800527e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 0204 	bic.w	r2, r2, #4
 800528e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6999      	ldr	r1, [r3, #24]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	619a      	str	r2, [r3, #24]
      break;
 80052a2:	e064      	b.n	800536e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fa4c 	bl	8005748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699a      	ldr	r2, [r3, #24]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6999      	ldr	r1, [r3, #24]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	021a      	lsls	r2, r3, #8
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	619a      	str	r2, [r3, #24]
      break;
 80052e4:	e043      	b.n	800536e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 faa1 	bl	8005834 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69da      	ldr	r2, [r3, #28]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0208 	orr.w	r2, r2, #8
 8005300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69da      	ldr	r2, [r3, #28]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0204 	bic.w	r2, r2, #4
 8005310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69d9      	ldr	r1, [r3, #28]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	691a      	ldr	r2, [r3, #16]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	61da      	str	r2, [r3, #28]
      break;
 8005324:	e023      	b.n	800536e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68b9      	ldr	r1, [r7, #8]
 800532c:	4618      	mov	r0, r3
 800532e:	f000 faf5 	bl	800591c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69da      	ldr	r2, [r3, #28]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69da      	ldr	r2, [r3, #28]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69d9      	ldr	r1, [r3, #28]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	021a      	lsls	r2, r3, #8
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	61da      	str	r2, [r3, #28]
      break;
 8005366:	e002      	b.n	800536e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	75fb      	strb	r3, [r7, #23]
      break;
 800536c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005376:	7dfb      	ldrb	r3, [r7, #23]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <HAL_TIM_ConfigClockSource+0x1c>
 8005398:	2302      	movs	r3, #2
 800539a:	e0b4      	b.n	8005506 <HAL_TIM_ConfigClockSource+0x186>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80053ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053d4:	d03e      	beq.n	8005454 <HAL_TIM_ConfigClockSource+0xd4>
 80053d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053da:	f200 8087 	bhi.w	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 80053de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053e2:	f000 8086 	beq.w	80054f2 <HAL_TIM_ConfigClockSource+0x172>
 80053e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ea:	d87f      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 80053ec:	2b70      	cmp	r3, #112	@ 0x70
 80053ee:	d01a      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0xa6>
 80053f0:	2b70      	cmp	r3, #112	@ 0x70
 80053f2:	d87b      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 80053f4:	2b60      	cmp	r3, #96	@ 0x60
 80053f6:	d050      	beq.n	800549a <HAL_TIM_ConfigClockSource+0x11a>
 80053f8:	2b60      	cmp	r3, #96	@ 0x60
 80053fa:	d877      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 80053fc:	2b50      	cmp	r3, #80	@ 0x50
 80053fe:	d03c      	beq.n	800547a <HAL_TIM_ConfigClockSource+0xfa>
 8005400:	2b50      	cmp	r3, #80	@ 0x50
 8005402:	d873      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 8005404:	2b40      	cmp	r3, #64	@ 0x40
 8005406:	d058      	beq.n	80054ba <HAL_TIM_ConfigClockSource+0x13a>
 8005408:	2b40      	cmp	r3, #64	@ 0x40
 800540a:	d86f      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 800540c:	2b30      	cmp	r3, #48	@ 0x30
 800540e:	d064      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x15a>
 8005410:	2b30      	cmp	r3, #48	@ 0x30
 8005412:	d86b      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 8005414:	2b20      	cmp	r3, #32
 8005416:	d060      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x15a>
 8005418:	2b20      	cmp	r3, #32
 800541a:	d867      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d05c      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x15a>
 8005420:	2b10      	cmp	r3, #16
 8005422:	d05a      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x15a>
 8005424:	e062      	b.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005436:	f000 fb41 	bl	8005abc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005448:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	609a      	str	r2, [r3, #8]
      break;
 8005452:	e04f      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005464:	f000 fb2a 	bl	8005abc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005476:	609a      	str	r2, [r3, #8]
      break;
 8005478:	e03c      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005486:	461a      	mov	r2, r3
 8005488:	f000 fa9e 	bl	80059c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2150      	movs	r1, #80	@ 0x50
 8005492:	4618      	mov	r0, r3
 8005494:	f000 faf7 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 8005498:	e02c      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054a6:	461a      	mov	r2, r3
 80054a8:	f000 fabd 	bl	8005a26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2160      	movs	r1, #96	@ 0x60
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fae7 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 80054b8:	e01c      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c6:	461a      	mov	r2, r3
 80054c8:	f000 fa7e 	bl	80059c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2140      	movs	r1, #64	@ 0x40
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fad7 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 80054d8:	e00c      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4619      	mov	r1, r3
 80054e4:	4610      	mov	r0, r2
 80054e6:	f000 face 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 80054ea:	e003      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	73fb      	strb	r3, [r7, #15]
      break;
 80054f0:	e000      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005504:	7bfb      	ldrb	r3, [r7, #15]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a46      	ldr	r2, [pc, #280]	@ (800563c <TIM_Base_SetConfig+0x12c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d013      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800552e:	d00f      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a43      	ldr	r2, [pc, #268]	@ (8005640 <TIM_Base_SetConfig+0x130>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00b      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a42      	ldr	r2, [pc, #264]	@ (8005644 <TIM_Base_SetConfig+0x134>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d007      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a41      	ldr	r2, [pc, #260]	@ (8005648 <TIM_Base_SetConfig+0x138>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d003      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a40      	ldr	r2, [pc, #256]	@ (800564c <TIM_Base_SetConfig+0x13c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d108      	bne.n	8005562 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a35      	ldr	r2, [pc, #212]	@ (800563c <TIM_Base_SetConfig+0x12c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d02b      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005570:	d027      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a32      	ldr	r2, [pc, #200]	@ (8005640 <TIM_Base_SetConfig+0x130>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d023      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a31      	ldr	r2, [pc, #196]	@ (8005644 <TIM_Base_SetConfig+0x134>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d01f      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a30      	ldr	r2, [pc, #192]	@ (8005648 <TIM_Base_SetConfig+0x138>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d01b      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a2f      	ldr	r2, [pc, #188]	@ (800564c <TIM_Base_SetConfig+0x13c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d017      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a2e      	ldr	r2, [pc, #184]	@ (8005650 <TIM_Base_SetConfig+0x140>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d013      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a2d      	ldr	r2, [pc, #180]	@ (8005654 <TIM_Base_SetConfig+0x144>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00f      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005658 <TIM_Base_SetConfig+0x148>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00b      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a2b      	ldr	r2, [pc, #172]	@ (800565c <TIM_Base_SetConfig+0x14c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d007      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005660 <TIM_Base_SetConfig+0x150>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d003      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a29      	ldr	r2, [pc, #164]	@ (8005664 <TIM_Base_SetConfig+0x154>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d108      	bne.n	80055d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a10      	ldr	r2, [pc, #64]	@ (800563c <TIM_Base_SetConfig+0x12c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_Base_SetConfig+0xf8>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a12      	ldr	r2, [pc, #72]	@ (800564c <TIM_Base_SetConfig+0x13c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d103      	bne.n	8005610 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b01      	cmp	r3, #1
 8005620:	d105      	bne.n	800562e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f023 0201 	bic.w	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	611a      	str	r2, [r3, #16]
  }
}
 800562e:	bf00      	nop
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	40010000 	.word	0x40010000
 8005640:	40000400 	.word	0x40000400
 8005644:	40000800 	.word	0x40000800
 8005648:	40000c00 	.word	0x40000c00
 800564c:	40010400 	.word	0x40010400
 8005650:	40014000 	.word	0x40014000
 8005654:	40014400 	.word	0x40014400
 8005658:	40014800 	.word	0x40014800
 800565c:	40001800 	.word	0x40001800
 8005660:	40001c00 	.word	0x40001c00
 8005664:	40002000 	.word	0x40002000

08005668 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	f023 0201 	bic.w	r2, r3, #1
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0303 	bic.w	r3, r3, #3
 800569e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f023 0302 	bic.w	r3, r3, #2
 80056b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a20      	ldr	r2, [pc, #128]	@ (8005740 <TIM_OC1_SetConfig+0xd8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_OC1_SetConfig+0x64>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a1f      	ldr	r2, [pc, #124]	@ (8005744 <TIM_OC1_SetConfig+0xdc>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d10c      	bne.n	80056e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f023 0308 	bic.w	r3, r3, #8
 80056d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f023 0304 	bic.w	r3, r3, #4
 80056e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a15      	ldr	r2, [pc, #84]	@ (8005740 <TIM_OC1_SetConfig+0xd8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d003      	beq.n	80056f6 <TIM_OC1_SetConfig+0x8e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a14      	ldr	r2, [pc, #80]	@ (8005744 <TIM_OC1_SetConfig+0xdc>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d111      	bne.n	800571a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4313      	orrs	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	621a      	str	r2, [r3, #32]
}
 8005734:	bf00      	nop
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	40010000 	.word	0x40010000
 8005744:	40010400 	.word	0x40010400

08005748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f023 0210 	bic.w	r2, r3, #16
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800577e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	021b      	lsls	r3, r3, #8
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	4313      	orrs	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f023 0320 	bic.w	r3, r3, #32
 8005792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a22      	ldr	r2, [pc, #136]	@ (800582c <TIM_OC2_SetConfig+0xe4>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d003      	beq.n	80057b0 <TIM_OC2_SetConfig+0x68>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a21      	ldr	r2, [pc, #132]	@ (8005830 <TIM_OC2_SetConfig+0xe8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d10d      	bne.n	80057cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a17      	ldr	r2, [pc, #92]	@ (800582c <TIM_OC2_SetConfig+0xe4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d003      	beq.n	80057dc <TIM_OC2_SetConfig+0x94>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a16      	ldr	r2, [pc, #88]	@ (8005830 <TIM_OC2_SetConfig+0xe8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d113      	bne.n	8005804 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	621a      	str	r2, [r3, #32]
}
 800581e:	bf00      	nop
 8005820:	371c      	adds	r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	40010000 	.word	0x40010000
 8005830:	40010400 	.word	0x40010400

08005834 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0303 	bic.w	r3, r3, #3
 800586a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800587c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	021b      	lsls	r3, r3, #8
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4313      	orrs	r3, r2
 8005888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a21      	ldr	r2, [pc, #132]	@ (8005914 <TIM_OC3_SetConfig+0xe0>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d003      	beq.n	800589a <TIM_OC3_SetConfig+0x66>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a20      	ldr	r2, [pc, #128]	@ (8005918 <TIM_OC3_SetConfig+0xe4>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d10d      	bne.n	80058b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a16      	ldr	r2, [pc, #88]	@ (8005914 <TIM_OC3_SetConfig+0xe0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d003      	beq.n	80058c6 <TIM_OC3_SetConfig+0x92>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a15      	ldr	r2, [pc, #84]	@ (8005918 <TIM_OC3_SetConfig+0xe4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d113      	bne.n	80058ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	621a      	str	r2, [r3, #32]
}
 8005908:	bf00      	nop
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	40010000 	.word	0x40010000
 8005918:	40010400 	.word	0x40010400

0800591c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800594a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	021b      	lsls	r3, r3, #8
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4313      	orrs	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	031b      	lsls	r3, r3, #12
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a12      	ldr	r2, [pc, #72]	@ (80059c0 <TIM_OC4_SetConfig+0xa4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_OC4_SetConfig+0x68>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a11      	ldr	r2, [pc, #68]	@ (80059c4 <TIM_OC4_SetConfig+0xa8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d109      	bne.n	8005998 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800598a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	019b      	lsls	r3, r3, #6
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	621a      	str	r2, [r3, #32]
}
 80059b2:	bf00      	nop
 80059b4:	371c      	adds	r7, #28
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	40010000 	.word	0x40010000
 80059c4:	40010400 	.word	0x40010400

080059c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f023 0201 	bic.w	r2, r3, #1
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f023 030a 	bic.w	r3, r3, #10
 8005a04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	621a      	str	r2, [r3, #32]
}
 8005a1a:	bf00      	nop
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b087      	sub	sp, #28
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	f023 0210 	bic.w	r2, r3, #16
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	031b      	lsls	r3, r3, #12
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	621a      	str	r2, [r3, #32]
}
 8005a7a:	bf00      	nop
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b085      	sub	sp, #20
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f043 0307 	orr.w	r3, r3, #7
 8005aa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	609a      	str	r2, [r3, #8]
}
 8005ab0:	bf00      	nop
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ad6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	021a      	lsls	r2, r3, #8
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	609a      	str	r2, [r3, #8]
}
 8005af0:	bf00      	nop
 8005af2:	371c      	adds	r7, #28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	2201      	movs	r2, #1
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a1a      	ldr	r2, [r3, #32]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	401a      	ands	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a1a      	ldr	r2, [r3, #32]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f003 031f 	and.w	r3, r3, #31
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	fa01 f303 	lsl.w	r3, r1, r3
 8005b34:	431a      	orrs	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	621a      	str	r2, [r3, #32]
}
 8005b3a:	bf00      	nop
 8005b3c:	371c      	adds	r7, #28
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
	...

08005b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e05a      	b.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a21      	ldr	r2, [pc, #132]	@ (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d022      	beq.n	8005bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bac:	d01d      	beq.n	8005bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d018      	beq.n	8005bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d013      	beq.n	8005bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d00e      	beq.n	8005bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a18      	ldr	r2, [pc, #96]	@ (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d009      	beq.n	8005bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a17      	ldr	r2, [pc, #92]	@ (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d004      	beq.n	8005bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a15      	ldr	r2, [pc, #84]	@ (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d10c      	bne.n	8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	40010000 	.word	0x40010000
 8005c28:	40000400 	.word	0x40000400
 8005c2c:	40000800 	.word	0x40000800
 8005c30:	40000c00 	.word	0x40000c00
 8005c34:	40010400 	.word	0x40010400
 8005c38:	40014000 	.word	0x40014000
 8005c3c:	40001800 	.word	0x40001800

08005c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e042      	b.n	8005cd8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fc f82a 	bl	8001cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2224      	movs	r2, #36	@ 0x24
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fcdb 	bl	8006640 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691a      	ldr	r2, [r3, #16]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695a      	ldr	r2, [r3, #20]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	4613      	mov	r3, r2
 8005cec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d112      	bne.n	8005d20 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <HAL_UART_Receive_IT+0x26>
 8005d00:	88fb      	ldrh	r3, [r7, #6]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e00b      	b.n	8005d22 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d10:	88fb      	ldrh	r3, [r7, #6]
 8005d12:	461a      	mov	r2, r3
 8005d14:	68b9      	ldr	r1, [r7, #8]
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 faba 	bl	8006290 <UART_Start_Receive_IT>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	e000      	b.n	8005d22 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005d20:	2302      	movs	r3, #2
  }
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b0ba      	sub	sp, #232	@ 0xe8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005d6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10f      	bne.n	8005d92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d009      	beq.n	8005d92 <HAL_UART_IRQHandler+0x66>
 8005d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fb99 	bl	80064c2 <UART_Receive_IT>
      return;
 8005d90:	e25b      	b.n	800624a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 80de 	beq.w	8005f58 <HAL_UART_IRQHandler+0x22c>
 8005d9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d106      	bne.n	8005db6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80d1 	beq.w	8005f58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00b      	beq.n	8005dda <HAL_UART_IRQHandler+0xae>
 8005dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d005      	beq.n	8005dda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd2:	f043 0201 	orr.w	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dde:	f003 0304 	and.w	r3, r3, #4
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00b      	beq.n	8005dfe <HAL_UART_IRQHandler+0xd2>
 8005de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d005      	beq.n	8005dfe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df6:	f043 0202 	orr.w	r2, r3, #2
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <HAL_UART_IRQHandler+0xf6>
 8005e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1a:	f043 0204 	orr.w	r2, r3, #4
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e26:	f003 0308 	and.w	r3, r3, #8
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d011      	beq.n	8005e52 <HAL_UART_IRQHandler+0x126>
 8005e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d105      	bne.n	8005e46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e4a:	f043 0208 	orr.w	r2, r3, #8
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f000 81f2 	beq.w	8006240 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e60:	f003 0320 	and.w	r3, r3, #32
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d008      	beq.n	8005e7a <HAL_UART_IRQHandler+0x14e>
 8005e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fb24 	bl	80064c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e84:	2b40      	cmp	r3, #64	@ 0x40
 8005e86:	bf0c      	ite	eq
 8005e88:	2301      	moveq	r3, #1
 8005e8a:	2300      	movne	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d103      	bne.n	8005ea6 <HAL_UART_IRQHandler+0x17a>
 8005e9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d04f      	beq.n	8005f46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fa2c 	bl	8006304 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb6:	2b40      	cmp	r3, #64	@ 0x40
 8005eb8:	d141      	bne.n	8005f3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3314      	adds	r3, #20
 8005ec0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ed0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ed4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3314      	adds	r3, #20
 8005ee2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005ee6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005eea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005ef2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005efe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1d9      	bne.n	8005eba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d013      	beq.n	8005f36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f12:	4a7e      	ldr	r2, [pc, #504]	@ (800610c <HAL_UART_IRQHandler+0x3e0>)
 8005f14:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fc fa7d 	bl	800241a <HAL_DMA_Abort_IT>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d016      	beq.n	8005f54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005f30:	4610      	mov	r0, r2
 8005f32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f34:	e00e      	b.n	8005f54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f994 	bl	8006264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3c:	e00a      	b.n	8005f54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f990 	bl	8006264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f44:	e006      	b.n	8005f54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f98c 	bl	8006264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005f52:	e175      	b.n	8006240 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f54:	bf00      	nop
    return;
 8005f56:	e173      	b.n	8006240 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	f040 814f 	bne.w	8006200 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f66:	f003 0310 	and.w	r3, r3, #16
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 8148 	beq.w	8006200 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8141 	beq.w	8006200 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	60bb      	str	r3, [r7, #8]
 8005f92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f9e:	2b40      	cmp	r3, #64	@ 0x40
 8005fa0:	f040 80b6 	bne.w	8006110 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 8145 	beq.w	8006244 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	f080 813e 	bcs.w	8006244 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fda:	f000 8088 	beq.w	80060ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	330c      	adds	r3, #12
 8005fe4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ff4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ffc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	330c      	adds	r3, #12
 8006006:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800600a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800600e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006012:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006016:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006022:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1d9      	bne.n	8005fde <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3314      	adds	r3, #20
 8006030:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006032:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006034:	e853 3f00 	ldrex	r3, [r3]
 8006038:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800603a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800603c:	f023 0301 	bic.w	r3, r3, #1
 8006040:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3314      	adds	r3, #20
 800604a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800604e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006052:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006056:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800605a:	e841 2300 	strex	r3, r2, [r1]
 800605e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006060:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1e1      	bne.n	800602a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3314      	adds	r3, #20
 800606c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006070:	e853 3f00 	ldrex	r3, [r3]
 8006074:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006076:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800607c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3314      	adds	r3, #20
 8006086:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800608a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800608c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006090:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006098:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e3      	bne.n	8006066 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	330c      	adds	r3, #12
 80060b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060b6:	e853 3f00 	ldrex	r3, [r3]
 80060ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060be:	f023 0310 	bic.w	r3, r3, #16
 80060c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	330c      	adds	r3, #12
 80060cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80060d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80060d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e3      	bne.n	80060ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fc f926 	bl	800233a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2202      	movs	r2, #2
 80060f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	b29b      	uxth	r3, r3
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f8b7 	bl	8006278 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800610a:	e09b      	b.n	8006244 <HAL_UART_IRQHandler+0x518>
 800610c:	080063cb 	.word	0x080063cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006118:	b29b      	uxth	r3, r3
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006124:	b29b      	uxth	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 808e 	beq.w	8006248 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800612c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 8089 	beq.w	8006248 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	330c      	adds	r3, #12
 800613c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006140:	e853 3f00 	ldrex	r3, [r3]
 8006144:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006148:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800614c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	330c      	adds	r3, #12
 8006156:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800615a:	647a      	str	r2, [r7, #68]	@ 0x44
 800615c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006160:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e3      	bne.n	8006136 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3314      	adds	r3, #20
 8006174:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006178:	e853 3f00 	ldrex	r3, [r3]
 800617c:	623b      	str	r3, [r7, #32]
   return(result);
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	f023 0301 	bic.w	r3, r3, #1
 8006184:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3314      	adds	r3, #20
 800618e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006192:	633a      	str	r2, [r7, #48]	@ 0x30
 8006194:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e3      	bne.n	800616e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	330c      	adds	r3, #12
 80061ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	e853 3f00 	ldrex	r3, [r3]
 80061c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 0310 	bic.w	r3, r3, #16
 80061ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	330c      	adds	r3, #12
 80061d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80061d8:	61fa      	str	r2, [r7, #28]
 80061da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	69b9      	ldr	r1, [r7, #24]
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	617b      	str	r3, [r7, #20]
   return(result);
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e3      	bne.n	80061b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f83d 	bl	8006278 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061fe:	e023      	b.n	8006248 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006208:	2b00      	cmp	r3, #0
 800620a:	d009      	beq.n	8006220 <HAL_UART_IRQHandler+0x4f4>
 800620c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f8ea 	bl	80063f2 <UART_Transmit_IT>
    return;
 800621e:	e014      	b.n	800624a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00e      	beq.n	800624a <HAL_UART_IRQHandler+0x51e>
 800622c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d008      	beq.n	800624a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f92a 	bl	8006492 <UART_EndTransmit_IT>
    return;
 800623e:	e004      	b.n	800624a <HAL_UART_IRQHandler+0x51e>
    return;
 8006240:	bf00      	nop
 8006242:	e002      	b.n	800624a <HAL_UART_IRQHandler+0x51e>
      return;
 8006244:	bf00      	nop
 8006246:	e000      	b.n	800624a <HAL_UART_IRQHandler+0x51e>
      return;
 8006248:	bf00      	nop
  }
}
 800624a:	37e8      	adds	r7, #232	@ 0xe8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	4613      	mov	r3, r2
 800629c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	88fa      	ldrh	r2, [r7, #6]
 80062a8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	88fa      	ldrh	r2, [r7, #6]
 80062ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2222      	movs	r2, #34	@ 0x22
 80062ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d007      	beq.n	80062d6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062d4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695a      	ldr	r2, [r3, #20]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f042 0201 	orr.w	r2, r2, #1
 80062e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f042 0220 	orr.w	r2, r2, #32
 80062f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006304:	b480      	push	{r7}
 8006306:	b095      	sub	sp, #84	@ 0x54
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	330c      	adds	r3, #12
 8006312:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800631c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006322:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	330c      	adds	r3, #12
 800632a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800632c:	643a      	str	r2, [r7, #64]	@ 0x40
 800632e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006332:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800633a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e5      	bne.n	800630c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3314      	adds	r3, #20
 8006346:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	f023 0301 	bic.w	r3, r3, #1
 8006356:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3314      	adds	r3, #20
 800635e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006360:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006362:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006364:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006366:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006368:	e841 2300 	strex	r3, r2, [r1]
 800636c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1e5      	bne.n	8006340 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006378:	2b01      	cmp	r3, #1
 800637a:	d119      	bne.n	80063b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	330c      	adds	r3, #12
 8006382:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	e853 3f00 	ldrex	r3, [r3]
 800638a:	60bb      	str	r3, [r7, #8]
   return(result);
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	f023 0310 	bic.w	r3, r3, #16
 8006392:	647b      	str	r3, [r7, #68]	@ 0x44
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	330c      	adds	r3, #12
 800639a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800639c:	61ba      	str	r2, [r7, #24]
 800639e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a0:	6979      	ldr	r1, [r7, #20]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	e841 2300 	strex	r3, r2, [r1]
 80063a8:	613b      	str	r3, [r7, #16]
   return(result);
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1e5      	bne.n	800637c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80063be:	bf00      	nop
 80063c0:	3754      	adds	r7, #84	@ 0x54
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f7ff ff3d 	bl	8006264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ea:	bf00      	nop
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b085      	sub	sp, #20
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b21      	cmp	r3, #33	@ 0x21
 8006404:	d13e      	bne.n	8006484 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800640e:	d114      	bne.n	800643a <UART_Transmit_IT+0x48>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d110      	bne.n	800643a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800642c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	1c9a      	adds	r2, r3, #2
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	621a      	str	r2, [r3, #32]
 8006438:	e008      	b.n	800644c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	1c59      	adds	r1, r3, #1
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6211      	str	r1, [r2, #32]
 8006444:	781a      	ldrb	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	b29b      	uxth	r3, r3
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	4619      	mov	r1, r3
 800645a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10f      	bne.n	8006480 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800646e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800647e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	e000      	b.n	8006486 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006484:	2302      	movs	r3, #2
  }
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68da      	ldr	r2, [r3, #12]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff fecc 	bl	8006250 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b08c      	sub	sp, #48	@ 0x30
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b22      	cmp	r3, #34	@ 0x22
 80064d4:	f040 80ae 	bne.w	8006634 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064e0:	d117      	bne.n	8006512 <UART_Receive_IT+0x50>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d113      	bne.n	8006512 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006500:	b29a      	uxth	r2, r3
 8006502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006504:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650a:	1c9a      	adds	r2, r3, #2
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006510:	e026      	b.n	8006560 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006516:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006518:	2300      	movs	r3, #0
 800651a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006524:	d007      	beq.n	8006536 <UART_Receive_IT+0x74>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <UART_Receive_IT+0x82>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d106      	bne.n	8006544 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	b2da      	uxtb	r2, r3
 800653e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	e008      	b.n	8006556 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006550:	b2da      	uxtb	r2, r3
 8006552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006554:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655a:	1c5a      	adds	r2, r3, #1
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006564:	b29b      	uxth	r3, r3
 8006566:	3b01      	subs	r3, #1
 8006568:	b29b      	uxth	r3, r3
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	4619      	mov	r1, r3
 800656e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006570:	2b00      	cmp	r3, #0
 8006572:	d15d      	bne.n	8006630 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68da      	ldr	r2, [r3, #12]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0220 	bic.w	r2, r2, #32
 8006582:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006592:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	695a      	ldr	r2, [r3, #20]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0201 	bic.w	r2, r2, #1
 80065a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d135      	bne.n	8006626 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	330c      	adds	r3, #12
 80065c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	e853 3f00 	ldrex	r3, [r3]
 80065ce:	613b      	str	r3, [r7, #16]
   return(result);
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f023 0310 	bic.w	r3, r3, #16
 80065d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	330c      	adds	r3, #12
 80065de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065e0:	623a      	str	r2, [r7, #32]
 80065e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e4:	69f9      	ldr	r1, [r7, #28]
 80065e6:	6a3a      	ldr	r2, [r7, #32]
 80065e8:	e841 2300 	strex	r3, r2, [r1]
 80065ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1e5      	bne.n	80065c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0310 	and.w	r3, r3, #16
 80065fe:	2b10      	cmp	r3, #16
 8006600:	d10a      	bne.n	8006618 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	60fb      	str	r3, [r7, #12]
 8006616:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7ff fe2a 	bl	8006278 <HAL_UARTEx_RxEventCallback>
 8006624:	e002      	b.n	800662c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7fb f9a2 	bl	8001970 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	e002      	b.n	8006636 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006630:	2300      	movs	r3, #0
 8006632:	e000      	b.n	8006636 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006634:	2302      	movs	r3, #2
  }
}
 8006636:	4618      	mov	r0, r3
 8006638:	3730      	adds	r7, #48	@ 0x30
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006644:	b0c0      	sub	sp, #256	@ 0x100
 8006646:	af00      	add	r7, sp, #0
 8006648:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800664c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800665c:	68d9      	ldr	r1, [r3, #12]
 800665e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	ea40 0301 	orr.w	r3, r0, r1
 8006668:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800666a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	431a      	orrs	r2, r3
 8006678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	431a      	orrs	r2, r3
 8006680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	4313      	orrs	r3, r2
 8006688:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006698:	f021 010c 	bic.w	r1, r1, #12
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80066a6:	430b      	orrs	r3, r1
 80066a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80066b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ba:	6999      	ldr	r1, [r3, #24]
 80066bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	ea40 0301 	orr.w	r3, r0, r1
 80066c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4b8f      	ldr	r3, [pc, #572]	@ (800690c <UART_SetConfig+0x2cc>)
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d005      	beq.n	80066e0 <UART_SetConfig+0xa0>
 80066d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	4b8d      	ldr	r3, [pc, #564]	@ (8006910 <UART_SetConfig+0x2d0>)
 80066dc:	429a      	cmp	r2, r3
 80066de:	d104      	bne.n	80066ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066e0:	f7fd fc10 	bl	8003f04 <HAL_RCC_GetPCLK2Freq>
 80066e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80066e8:	e003      	b.n	80066f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066ea:	f7fd fbf7 	bl	8003edc <HAL_RCC_GetPCLK1Freq>
 80066ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066fc:	f040 810c 	bne.w	8006918 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006704:	2200      	movs	r2, #0
 8006706:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800670a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800670e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006712:	4622      	mov	r2, r4
 8006714:	462b      	mov	r3, r5
 8006716:	1891      	adds	r1, r2, r2
 8006718:	65b9      	str	r1, [r7, #88]	@ 0x58
 800671a:	415b      	adcs	r3, r3
 800671c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800671e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006722:	4621      	mov	r1, r4
 8006724:	eb12 0801 	adds.w	r8, r2, r1
 8006728:	4629      	mov	r1, r5
 800672a:	eb43 0901 	adc.w	r9, r3, r1
 800672e:	f04f 0200 	mov.w	r2, #0
 8006732:	f04f 0300 	mov.w	r3, #0
 8006736:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800673a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800673e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006742:	4690      	mov	r8, r2
 8006744:	4699      	mov	r9, r3
 8006746:	4623      	mov	r3, r4
 8006748:	eb18 0303 	adds.w	r3, r8, r3
 800674c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006750:	462b      	mov	r3, r5
 8006752:	eb49 0303 	adc.w	r3, r9, r3
 8006756:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800675a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006766:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800676a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800676e:	460b      	mov	r3, r1
 8006770:	18db      	adds	r3, r3, r3
 8006772:	653b      	str	r3, [r7, #80]	@ 0x50
 8006774:	4613      	mov	r3, r2
 8006776:	eb42 0303 	adc.w	r3, r2, r3
 800677a:	657b      	str	r3, [r7, #84]	@ 0x54
 800677c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006780:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006784:	f7fa fa40 	bl	8000c08 <__aeabi_uldivmod>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4b61      	ldr	r3, [pc, #388]	@ (8006914 <UART_SetConfig+0x2d4>)
 800678e:	fba3 2302 	umull	r2, r3, r3, r2
 8006792:	095b      	lsrs	r3, r3, #5
 8006794:	011c      	lsls	r4, r3, #4
 8006796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800679a:	2200      	movs	r2, #0
 800679c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80067a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80067a8:	4642      	mov	r2, r8
 80067aa:	464b      	mov	r3, r9
 80067ac:	1891      	adds	r1, r2, r2
 80067ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80067b0:	415b      	adcs	r3, r3
 80067b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80067b8:	4641      	mov	r1, r8
 80067ba:	eb12 0a01 	adds.w	sl, r2, r1
 80067be:	4649      	mov	r1, r9
 80067c0:	eb43 0b01 	adc.w	fp, r3, r1
 80067c4:	f04f 0200 	mov.w	r2, #0
 80067c8:	f04f 0300 	mov.w	r3, #0
 80067cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067d8:	4692      	mov	sl, r2
 80067da:	469b      	mov	fp, r3
 80067dc:	4643      	mov	r3, r8
 80067de:	eb1a 0303 	adds.w	r3, sl, r3
 80067e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067e6:	464b      	mov	r3, r9
 80067e8:	eb4b 0303 	adc.w	r3, fp, r3
 80067ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006800:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006804:	460b      	mov	r3, r1
 8006806:	18db      	adds	r3, r3, r3
 8006808:	643b      	str	r3, [r7, #64]	@ 0x40
 800680a:	4613      	mov	r3, r2
 800680c:	eb42 0303 	adc.w	r3, r2, r3
 8006810:	647b      	str	r3, [r7, #68]	@ 0x44
 8006812:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006816:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800681a:	f7fa f9f5 	bl	8000c08 <__aeabi_uldivmod>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	4611      	mov	r1, r2
 8006824:	4b3b      	ldr	r3, [pc, #236]	@ (8006914 <UART_SetConfig+0x2d4>)
 8006826:	fba3 2301 	umull	r2, r3, r3, r1
 800682a:	095b      	lsrs	r3, r3, #5
 800682c:	2264      	movs	r2, #100	@ 0x64
 800682e:	fb02 f303 	mul.w	r3, r2, r3
 8006832:	1acb      	subs	r3, r1, r3
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800683a:	4b36      	ldr	r3, [pc, #216]	@ (8006914 <UART_SetConfig+0x2d4>)
 800683c:	fba3 2302 	umull	r2, r3, r3, r2
 8006840:	095b      	lsrs	r3, r3, #5
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006848:	441c      	add	r4, r3
 800684a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800684e:	2200      	movs	r2, #0
 8006850:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006854:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006858:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800685c:	4642      	mov	r2, r8
 800685e:	464b      	mov	r3, r9
 8006860:	1891      	adds	r1, r2, r2
 8006862:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006864:	415b      	adcs	r3, r3
 8006866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006868:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800686c:	4641      	mov	r1, r8
 800686e:	1851      	adds	r1, r2, r1
 8006870:	6339      	str	r1, [r7, #48]	@ 0x30
 8006872:	4649      	mov	r1, r9
 8006874:	414b      	adcs	r3, r1
 8006876:	637b      	str	r3, [r7, #52]	@ 0x34
 8006878:	f04f 0200 	mov.w	r2, #0
 800687c:	f04f 0300 	mov.w	r3, #0
 8006880:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006884:	4659      	mov	r1, fp
 8006886:	00cb      	lsls	r3, r1, #3
 8006888:	4651      	mov	r1, sl
 800688a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800688e:	4651      	mov	r1, sl
 8006890:	00ca      	lsls	r2, r1, #3
 8006892:	4610      	mov	r0, r2
 8006894:	4619      	mov	r1, r3
 8006896:	4603      	mov	r3, r0
 8006898:	4642      	mov	r2, r8
 800689a:	189b      	adds	r3, r3, r2
 800689c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068a0:	464b      	mov	r3, r9
 80068a2:	460a      	mov	r2, r1
 80068a4:	eb42 0303 	adc.w	r3, r2, r3
 80068a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80068b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80068bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80068c0:	460b      	mov	r3, r1
 80068c2:	18db      	adds	r3, r3, r3
 80068c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068c6:	4613      	mov	r3, r2
 80068c8:	eb42 0303 	adc.w	r3, r2, r3
 80068cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80068d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80068d6:	f7fa f997 	bl	8000c08 <__aeabi_uldivmod>
 80068da:	4602      	mov	r2, r0
 80068dc:	460b      	mov	r3, r1
 80068de:	4b0d      	ldr	r3, [pc, #52]	@ (8006914 <UART_SetConfig+0x2d4>)
 80068e0:	fba3 1302 	umull	r1, r3, r3, r2
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	2164      	movs	r1, #100	@ 0x64
 80068e8:	fb01 f303 	mul.w	r3, r1, r3
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	3332      	adds	r3, #50	@ 0x32
 80068f2:	4a08      	ldr	r2, [pc, #32]	@ (8006914 <UART_SetConfig+0x2d4>)
 80068f4:	fba2 2303 	umull	r2, r3, r2, r3
 80068f8:	095b      	lsrs	r3, r3, #5
 80068fa:	f003 0207 	and.w	r2, r3, #7
 80068fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4422      	add	r2, r4
 8006906:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006908:	e106      	b.n	8006b18 <UART_SetConfig+0x4d8>
 800690a:	bf00      	nop
 800690c:	40011000 	.word	0x40011000
 8006910:	40011400 	.word	0x40011400
 8006914:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800691c:	2200      	movs	r2, #0
 800691e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006922:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006926:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800692a:	4642      	mov	r2, r8
 800692c:	464b      	mov	r3, r9
 800692e:	1891      	adds	r1, r2, r2
 8006930:	6239      	str	r1, [r7, #32]
 8006932:	415b      	adcs	r3, r3
 8006934:	627b      	str	r3, [r7, #36]	@ 0x24
 8006936:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800693a:	4641      	mov	r1, r8
 800693c:	1854      	adds	r4, r2, r1
 800693e:	4649      	mov	r1, r9
 8006940:	eb43 0501 	adc.w	r5, r3, r1
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	f04f 0300 	mov.w	r3, #0
 800694c:	00eb      	lsls	r3, r5, #3
 800694e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006952:	00e2      	lsls	r2, r4, #3
 8006954:	4614      	mov	r4, r2
 8006956:	461d      	mov	r5, r3
 8006958:	4643      	mov	r3, r8
 800695a:	18e3      	adds	r3, r4, r3
 800695c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006960:	464b      	mov	r3, r9
 8006962:	eb45 0303 	adc.w	r3, r5, r3
 8006966:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800696a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006976:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800697a:	f04f 0200 	mov.w	r2, #0
 800697e:	f04f 0300 	mov.w	r3, #0
 8006982:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006986:	4629      	mov	r1, r5
 8006988:	008b      	lsls	r3, r1, #2
 800698a:	4621      	mov	r1, r4
 800698c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006990:	4621      	mov	r1, r4
 8006992:	008a      	lsls	r2, r1, #2
 8006994:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006998:	f7fa f936 	bl	8000c08 <__aeabi_uldivmod>
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	4b60      	ldr	r3, [pc, #384]	@ (8006b24 <UART_SetConfig+0x4e4>)
 80069a2:	fba3 2302 	umull	r2, r3, r3, r2
 80069a6:	095b      	lsrs	r3, r3, #5
 80069a8:	011c      	lsls	r4, r3, #4
 80069aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80069b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80069b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80069bc:	4642      	mov	r2, r8
 80069be:	464b      	mov	r3, r9
 80069c0:	1891      	adds	r1, r2, r2
 80069c2:	61b9      	str	r1, [r7, #24]
 80069c4:	415b      	adcs	r3, r3
 80069c6:	61fb      	str	r3, [r7, #28]
 80069c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069cc:	4641      	mov	r1, r8
 80069ce:	1851      	adds	r1, r2, r1
 80069d0:	6139      	str	r1, [r7, #16]
 80069d2:	4649      	mov	r1, r9
 80069d4:	414b      	adcs	r3, r1
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069e4:	4659      	mov	r1, fp
 80069e6:	00cb      	lsls	r3, r1, #3
 80069e8:	4651      	mov	r1, sl
 80069ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ee:	4651      	mov	r1, sl
 80069f0:	00ca      	lsls	r2, r1, #3
 80069f2:	4610      	mov	r0, r2
 80069f4:	4619      	mov	r1, r3
 80069f6:	4603      	mov	r3, r0
 80069f8:	4642      	mov	r2, r8
 80069fa:	189b      	adds	r3, r3, r2
 80069fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a00:	464b      	mov	r3, r9
 8006a02:	460a      	mov	r2, r1
 8006a04:	eb42 0303 	adc.w	r3, r2, r3
 8006a08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006a24:	4649      	mov	r1, r9
 8006a26:	008b      	lsls	r3, r1, #2
 8006a28:	4641      	mov	r1, r8
 8006a2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a2e:	4641      	mov	r1, r8
 8006a30:	008a      	lsls	r2, r1, #2
 8006a32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006a36:	f7fa f8e7 	bl	8000c08 <__aeabi_uldivmod>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4611      	mov	r1, r2
 8006a40:	4b38      	ldr	r3, [pc, #224]	@ (8006b24 <UART_SetConfig+0x4e4>)
 8006a42:	fba3 2301 	umull	r2, r3, r3, r1
 8006a46:	095b      	lsrs	r3, r3, #5
 8006a48:	2264      	movs	r2, #100	@ 0x64
 8006a4a:	fb02 f303 	mul.w	r3, r2, r3
 8006a4e:	1acb      	subs	r3, r1, r3
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	3332      	adds	r3, #50	@ 0x32
 8006a54:	4a33      	ldr	r2, [pc, #204]	@ (8006b24 <UART_SetConfig+0x4e4>)
 8006a56:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5a:	095b      	lsrs	r3, r3, #5
 8006a5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a60:	441c      	add	r4, r3
 8006a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a66:	2200      	movs	r2, #0
 8006a68:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006a70:	4642      	mov	r2, r8
 8006a72:	464b      	mov	r3, r9
 8006a74:	1891      	adds	r1, r2, r2
 8006a76:	60b9      	str	r1, [r7, #8]
 8006a78:	415b      	adcs	r3, r3
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a80:	4641      	mov	r1, r8
 8006a82:	1851      	adds	r1, r2, r1
 8006a84:	6039      	str	r1, [r7, #0]
 8006a86:	4649      	mov	r1, r9
 8006a88:	414b      	adcs	r3, r1
 8006a8a:	607b      	str	r3, [r7, #4]
 8006a8c:	f04f 0200 	mov.w	r2, #0
 8006a90:	f04f 0300 	mov.w	r3, #0
 8006a94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a98:	4659      	mov	r1, fp
 8006a9a:	00cb      	lsls	r3, r1, #3
 8006a9c:	4651      	mov	r1, sl
 8006a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006aa2:	4651      	mov	r1, sl
 8006aa4:	00ca      	lsls	r2, r1, #3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	4603      	mov	r3, r0
 8006aac:	4642      	mov	r2, r8
 8006aae:	189b      	adds	r3, r3, r2
 8006ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ab2:	464b      	mov	r3, r9
 8006ab4:	460a      	mov	r2, r1
 8006ab6:	eb42 0303 	adc.w	r3, r2, r3
 8006aba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ac6:	667a      	str	r2, [r7, #100]	@ 0x64
 8006ac8:	f04f 0200 	mov.w	r2, #0
 8006acc:	f04f 0300 	mov.w	r3, #0
 8006ad0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006ad4:	4649      	mov	r1, r9
 8006ad6:	008b      	lsls	r3, r1, #2
 8006ad8:	4641      	mov	r1, r8
 8006ada:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ade:	4641      	mov	r1, r8
 8006ae0:	008a      	lsls	r2, r1, #2
 8006ae2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006ae6:	f7fa f88f 	bl	8000c08 <__aeabi_uldivmod>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4b0d      	ldr	r3, [pc, #52]	@ (8006b24 <UART_SetConfig+0x4e4>)
 8006af0:	fba3 1302 	umull	r1, r3, r3, r2
 8006af4:	095b      	lsrs	r3, r3, #5
 8006af6:	2164      	movs	r1, #100	@ 0x64
 8006af8:	fb01 f303 	mul.w	r3, r1, r3
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	3332      	adds	r3, #50	@ 0x32
 8006b02:	4a08      	ldr	r2, [pc, #32]	@ (8006b24 <UART_SetConfig+0x4e4>)
 8006b04:	fba2 2303 	umull	r2, r3, r2, r3
 8006b08:	095b      	lsrs	r3, r3, #5
 8006b0a:	f003 020f 	and.w	r2, r3, #15
 8006b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4422      	add	r2, r4
 8006b16:	609a      	str	r2, [r3, #8]
}
 8006b18:	bf00      	nop
 8006b1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b24:	51eb851f 	.word	0x51eb851f

08006b28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b28:	b084      	sub	sp, #16
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	f107 001c 	add.w	r0, r7, #28
 8006b36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b3a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d123      	bne.n	8006b8a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006b56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d105      	bne.n	8006b7e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 fae2 	bl	8008148 <USB_CoreReset>
 8006b84:	4603      	mov	r3, r0
 8006b86:	73fb      	strb	r3, [r7, #15]
 8006b88:	e01b      	b.n	8006bc2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f001 fad6 	bl	8008148 <USB_CoreReset>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ba0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d106      	bne.n	8006bb6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	639a      	str	r2, [r3, #56]	@ 0x38
 8006bb4:	e005      	b.n	8006bc2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006bc2:	7fbb      	ldrb	r3, [r7, #30]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d10b      	bne.n	8006be0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f043 0206 	orr.w	r2, r3, #6
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f043 0220 	orr.w	r2, r3, #32
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bec:	b004      	add	sp, #16
 8006bee:	4770      	bx	lr

08006bf0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d165      	bne.n	8006cd0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	4a41      	ldr	r2, [pc, #260]	@ (8006d0c <USB_SetTurnaroundTime+0x11c>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d906      	bls.n	8006c1a <USB_SetTurnaroundTime+0x2a>
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4a40      	ldr	r2, [pc, #256]	@ (8006d10 <USB_SetTurnaroundTime+0x120>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d202      	bcs.n	8006c1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006c14:	230f      	movs	r3, #15
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	e062      	b.n	8006ce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	4a3c      	ldr	r2, [pc, #240]	@ (8006d10 <USB_SetTurnaroundTime+0x120>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d306      	bcc.n	8006c30 <USB_SetTurnaroundTime+0x40>
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	4a3b      	ldr	r2, [pc, #236]	@ (8006d14 <USB_SetTurnaroundTime+0x124>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d202      	bcs.n	8006c30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006c2a:	230e      	movs	r3, #14
 8006c2c:	617b      	str	r3, [r7, #20]
 8006c2e:	e057      	b.n	8006ce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	4a38      	ldr	r2, [pc, #224]	@ (8006d14 <USB_SetTurnaroundTime+0x124>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d306      	bcc.n	8006c46 <USB_SetTurnaroundTime+0x56>
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	4a37      	ldr	r2, [pc, #220]	@ (8006d18 <USB_SetTurnaroundTime+0x128>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d202      	bcs.n	8006c46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006c40:	230d      	movs	r3, #13
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	e04c      	b.n	8006ce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	4a33      	ldr	r2, [pc, #204]	@ (8006d18 <USB_SetTurnaroundTime+0x128>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d306      	bcc.n	8006c5c <USB_SetTurnaroundTime+0x6c>
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	4a32      	ldr	r2, [pc, #200]	@ (8006d1c <USB_SetTurnaroundTime+0x12c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d802      	bhi.n	8006c5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006c56:	230c      	movs	r3, #12
 8006c58:	617b      	str	r3, [r7, #20]
 8006c5a:	e041      	b.n	8006ce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	4a2f      	ldr	r2, [pc, #188]	@ (8006d1c <USB_SetTurnaroundTime+0x12c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d906      	bls.n	8006c72 <USB_SetTurnaroundTime+0x82>
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	4a2e      	ldr	r2, [pc, #184]	@ (8006d20 <USB_SetTurnaroundTime+0x130>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d802      	bhi.n	8006c72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006c6c:	230b      	movs	r3, #11
 8006c6e:	617b      	str	r3, [r7, #20]
 8006c70:	e036      	b.n	8006ce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	4a2a      	ldr	r2, [pc, #168]	@ (8006d20 <USB_SetTurnaroundTime+0x130>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d906      	bls.n	8006c88 <USB_SetTurnaroundTime+0x98>
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	4a29      	ldr	r2, [pc, #164]	@ (8006d24 <USB_SetTurnaroundTime+0x134>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d802      	bhi.n	8006c88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006c82:	230a      	movs	r3, #10
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	e02b      	b.n	8006ce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4a26      	ldr	r2, [pc, #152]	@ (8006d24 <USB_SetTurnaroundTime+0x134>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d906      	bls.n	8006c9e <USB_SetTurnaroundTime+0xae>
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	4a25      	ldr	r2, [pc, #148]	@ (8006d28 <USB_SetTurnaroundTime+0x138>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d202      	bcs.n	8006c9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006c98:	2309      	movs	r3, #9
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	e020      	b.n	8006ce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	4a21      	ldr	r2, [pc, #132]	@ (8006d28 <USB_SetTurnaroundTime+0x138>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d306      	bcc.n	8006cb4 <USB_SetTurnaroundTime+0xc4>
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	4a20      	ldr	r2, [pc, #128]	@ (8006d2c <USB_SetTurnaroundTime+0x13c>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d802      	bhi.n	8006cb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006cae:	2308      	movs	r3, #8
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	e015      	b.n	8006ce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8006d2c <USB_SetTurnaroundTime+0x13c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d906      	bls.n	8006cca <USB_SetTurnaroundTime+0xda>
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8006d30 <USB_SetTurnaroundTime+0x140>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d202      	bcs.n	8006cca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006cc4:	2307      	movs	r3, #7
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	e00a      	b.n	8006ce0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006cca:	2306      	movs	r3, #6
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	e007      	b.n	8006ce0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006cd0:	79fb      	ldrb	r3, [r7, #7]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d102      	bne.n	8006cdc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006cd6:	2309      	movs	r3, #9
 8006cd8:	617b      	str	r3, [r7, #20]
 8006cda:	e001      	b.n	8006ce0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006cdc:	2309      	movs	r3, #9
 8006cde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	029b      	lsls	r3, r3, #10
 8006cf4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	371c      	adds	r7, #28
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	00d8acbf 	.word	0x00d8acbf
 8006d10:	00e4e1c0 	.word	0x00e4e1c0
 8006d14:	00f42400 	.word	0x00f42400
 8006d18:	01067380 	.word	0x01067380
 8006d1c:	011a499f 	.word	0x011a499f
 8006d20:	01312cff 	.word	0x01312cff
 8006d24:	014ca43f 	.word	0x014ca43f
 8006d28:	016e3600 	.word	0x016e3600
 8006d2c:	01a6ab1f 	.word	0x01a6ab1f
 8006d30:	01e84800 	.word	0x01e84800

08006d34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f043 0201 	orr.w	r2, r3, #1
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f023 0201 	bic.w	r2, r3, #1
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d94:	78fb      	ldrb	r3, [r7, #3]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d115      	bne.n	8006dc6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006da6:	200a      	movs	r0, #10
 8006da8:	f7fb f992 	bl	80020d0 <HAL_Delay>
      ms += 10U;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	330a      	adds	r3, #10
 8006db0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f001 f939 	bl	800802a <USB_GetMode>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d01e      	beq.n	8006dfc <USB_SetCurrentMode+0x84>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2bc7      	cmp	r3, #199	@ 0xc7
 8006dc2:	d9f0      	bls.n	8006da6 <USB_SetCurrentMode+0x2e>
 8006dc4:	e01a      	b.n	8006dfc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006dc6:	78fb      	ldrb	r3, [r7, #3]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d115      	bne.n	8006df8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006dd8:	200a      	movs	r0, #10
 8006dda:	f7fb f979 	bl	80020d0 <HAL_Delay>
      ms += 10U;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	330a      	adds	r3, #10
 8006de2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 f920 	bl	800802a <USB_GetMode>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <USB_SetCurrentMode+0x84>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2bc7      	cmp	r3, #199	@ 0xc7
 8006df4:	d9f0      	bls.n	8006dd8 <USB_SetCurrentMode+0x60>
 8006df6:	e001      	b.n	8006dfc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e005      	b.n	8006e08 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2bc8      	cmp	r3, #200	@ 0xc8
 8006e00:	d101      	bne.n	8006e06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e000      	b.n	8006e08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e10:	b084      	sub	sp, #16
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b086      	sub	sp, #24
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006e1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	613b      	str	r3, [r7, #16]
 8006e2e:	e009      	b.n	8006e44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	3340      	adds	r3, #64	@ 0x40
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	3301      	adds	r3, #1
 8006e42:	613b      	str	r3, [r7, #16]
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	2b0e      	cmp	r3, #14
 8006e48:	d9f2      	bls.n	8006e30 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e4a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d11c      	bne.n	8006e8c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e60:	f043 0302 	orr.w	r3, r3, #2
 8006e64:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	e005      	b.n	8006e98 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e90:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ea4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d10d      	bne.n	8006ec8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006eac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d104      	bne.n	8006ebe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f968 	bl	800718c <USB_SetDevSpeed>
 8006ebc:	e008      	b.n	8006ed0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f963 	bl	800718c <USB_SetDevSpeed>
 8006ec6:	e003      	b.n	8006ed0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ec8:	2103      	movs	r1, #3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f95e 	bl	800718c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ed0:	2110      	movs	r1, #16
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f8fa 	bl	80070cc <USB_FlushTxFifo>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f924 	bl	8007130 <USB_FlushRxFifo>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ef8:	461a      	mov	r2, r3
 8006efa:	2300      	movs	r3, #0
 8006efc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f04:	461a      	mov	r2, r3
 8006f06:	2300      	movs	r3, #0
 8006f08:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f10:	461a      	mov	r2, r3
 8006f12:	2300      	movs	r3, #0
 8006f14:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f16:	2300      	movs	r3, #0
 8006f18:	613b      	str	r3, [r7, #16]
 8006f1a:	e043      	b.n	8006fa4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f32:	d118      	bne.n	8006f66 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10a      	bne.n	8006f50 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f46:	461a      	mov	r2, r3
 8006f48:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f4c:	6013      	str	r3, [r2, #0]
 8006f4e:	e013      	b.n	8006f78 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f62:	6013      	str	r3, [r2, #0]
 8006f64:	e008      	b.n	8006f78 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f72:	461a      	mov	r2, r3
 8006f74:	2300      	movs	r3, #0
 8006f76:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f84:	461a      	mov	r2, r3
 8006f86:	2300      	movs	r3, #0
 8006f88:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f96:	461a      	mov	r2, r3
 8006f98:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	613b      	str	r3, [r7, #16]
 8006fa4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006fa8:	461a      	mov	r2, r3
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d3b5      	bcc.n	8006f1c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	613b      	str	r3, [r7, #16]
 8006fb4:	e043      	b.n	800703e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fcc:	d118      	bne.n	8007000 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10a      	bne.n	8006fea <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	e013      	b.n	8007012 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	e008      	b.n	8007012 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	015a      	lsls	r2, r3, #5
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4413      	add	r3, r2
 8007008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800700c:	461a      	mov	r2, r3
 800700e:	2300      	movs	r3, #0
 8007010:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800701e:	461a      	mov	r2, r3
 8007020:	2300      	movs	r3, #0
 8007022:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007030:	461a      	mov	r2, r3
 8007032:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007036:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	3301      	adds	r3, #1
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007042:	461a      	mov	r2, r3
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	4293      	cmp	r3, r2
 8007048:	d3b5      	bcc.n	8006fb6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800705c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800706a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800706c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007070:	2b00      	cmp	r3, #0
 8007072:	d105      	bne.n	8007080 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	f043 0210 	orr.w	r2, r3, #16
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	699a      	ldr	r2, [r3, #24]
 8007084:	4b10      	ldr	r3, [pc, #64]	@ (80070c8 <USB_DevInit+0x2b8>)
 8007086:	4313      	orrs	r3, r2
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800708c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007090:	2b00      	cmp	r3, #0
 8007092:	d005      	beq.n	80070a0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	f043 0208 	orr.w	r2, r3, #8
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80070a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d107      	bne.n	80070b8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070b0:	f043 0304 	orr.w	r3, r3, #4
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070c4:	b004      	add	sp, #16
 80070c6:	4770      	bx	lr
 80070c8:	803c3800 	.word	0x803c3800

080070cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3301      	adds	r3, #1
 80070de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070e6:	d901      	bls.n	80070ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e01b      	b.n	8007124 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	daf2      	bge.n	80070da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	019b      	lsls	r3, r3, #6
 80070fc:	f043 0220 	orr.w	r2, r3, #32
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3301      	adds	r3, #1
 8007108:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007110:	d901      	bls.n	8007116 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e006      	b.n	8007124 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f003 0320 	and.w	r3, r3, #32
 800711e:	2b20      	cmp	r3, #32
 8007120:	d0f0      	beq.n	8007104 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007148:	d901      	bls.n	800714e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e018      	b.n	8007180 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	daf2      	bge.n	800713c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2210      	movs	r2, #16
 800715e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3301      	adds	r3, #1
 8007164:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800716c:	d901      	bls.n	8007172 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e006      	b.n	8007180 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	f003 0310 	and.w	r3, r3, #16
 800717a:	2b10      	cmp	r3, #16
 800717c:	d0f0      	beq.n	8007160 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	460b      	mov	r3, r1
 8007196:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	78fb      	ldrb	r3, [r7, #3]
 80071a6:	68f9      	ldr	r1, [r7, #12]
 80071a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071ac:	4313      	orrs	r3, r2
 80071ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80071be:	b480      	push	{r7}
 80071c0:	b087      	sub	sp, #28
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f003 0306 	and.w	r3, r3, #6
 80071d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d102      	bne.n	80071e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80071de:	2300      	movs	r3, #0
 80071e0:	75fb      	strb	r3, [r7, #23]
 80071e2:	e00a      	b.n	80071fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d002      	beq.n	80071f0 <USB_GetDevSpeed+0x32>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2b06      	cmp	r3, #6
 80071ee:	d102      	bne.n	80071f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80071f0:	2302      	movs	r3, #2
 80071f2:	75fb      	strb	r3, [r7, #23]
 80071f4:	e001      	b.n	80071fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80071f6:	230f      	movs	r3, #15
 80071f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	371c      	adds	r7, #28
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d13a      	bne.n	800729a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800722a:	69da      	ldr	r2, [r3, #28]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	f003 030f 	and.w	r3, r3, #15
 8007234:	2101      	movs	r1, #1
 8007236:	fa01 f303 	lsl.w	r3, r1, r3
 800723a:	b29b      	uxth	r3, r3
 800723c:	68f9      	ldr	r1, [r7, #12]
 800723e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007242:	4313      	orrs	r3, r2
 8007244:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	4413      	add	r3, r2
 800724e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d155      	bne.n	8007308 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	791b      	ldrb	r3, [r3, #4]
 8007276:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007278:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	059b      	lsls	r3, r3, #22
 800727e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007280:	4313      	orrs	r3, r2
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	0151      	lsls	r1, r2, #5
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	440a      	add	r2, r1
 800728a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800728e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007292:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007296:	6013      	str	r3, [r2, #0]
 8007298:	e036      	b.n	8007308 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072a0:	69da      	ldr	r2, [r3, #28]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	f003 030f 	and.w	r3, r3, #15
 80072aa:	2101      	movs	r1, #1
 80072ac:	fa01 f303 	lsl.w	r3, r1, r3
 80072b0:	041b      	lsls	r3, r3, #16
 80072b2:	68f9      	ldr	r1, [r7, #12]
 80072b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072b8:	4313      	orrs	r3, r2
 80072ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d11a      	bne.n	8007308 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	791b      	ldrb	r3, [r3, #4]
 80072ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80072ee:	430b      	orrs	r3, r1
 80072f0:	4313      	orrs	r3, r2
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	0151      	lsls	r1, r2, #5
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	440a      	add	r2, r1
 80072fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007302:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007306:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
	...

08007318 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	785b      	ldrb	r3, [r3, #1]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d161      	bne.n	80073f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007346:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800734a:	d11f      	bne.n	800738c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4413      	add	r3, r2
 8007354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	0151      	lsls	r1, r2, #5
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	440a      	add	r2, r1
 8007362:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007366:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800736a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	0151      	lsls	r1, r2, #5
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	440a      	add	r2, r1
 8007382:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007386:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800738a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007392:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	f003 030f 	and.w	r3, r3, #15
 800739c:	2101      	movs	r1, #1
 800739e:	fa01 f303 	lsl.w	r3, r1, r3
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	43db      	mvns	r3, r3
 80073a6:	68f9      	ldr	r1, [r7, #12]
 80073a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073ac:	4013      	ands	r3, r2
 80073ae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073b6:	69da      	ldr	r2, [r3, #28]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	f003 030f 	and.w	r3, r3, #15
 80073c0:	2101      	movs	r1, #1
 80073c2:	fa01 f303 	lsl.w	r3, r1, r3
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	43db      	mvns	r3, r3
 80073ca:	68f9      	ldr	r1, [r7, #12]
 80073cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073d0:	4013      	ands	r3, r2
 80073d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	0159      	lsls	r1, r3, #5
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	440b      	add	r3, r1
 80073ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ee:	4619      	mov	r1, r3
 80073f0:	4b35      	ldr	r3, [pc, #212]	@ (80074c8 <USB_DeactivateEndpoint+0x1b0>)
 80073f2:	4013      	ands	r3, r2
 80073f4:	600b      	str	r3, [r1, #0]
 80073f6:	e060      	b.n	80074ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800740a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800740e:	d11f      	bne.n	8007450 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	0151      	lsls	r1, r2, #5
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	440a      	add	r2, r1
 8007426:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800742a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800742e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	4413      	add	r3, r2
 8007438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	0151      	lsls	r1, r2, #5
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	440a      	add	r2, r1
 8007446:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800744a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800744e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007456:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	f003 030f 	and.w	r3, r3, #15
 8007460:	2101      	movs	r1, #1
 8007462:	fa01 f303 	lsl.w	r3, r1, r3
 8007466:	041b      	lsls	r3, r3, #16
 8007468:	43db      	mvns	r3, r3
 800746a:	68f9      	ldr	r1, [r7, #12]
 800746c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007470:	4013      	ands	r3, r2
 8007472:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800747a:	69da      	ldr	r2, [r3, #28]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	f003 030f 	and.w	r3, r3, #15
 8007484:	2101      	movs	r1, #1
 8007486:	fa01 f303 	lsl.w	r3, r1, r3
 800748a:	041b      	lsls	r3, r3, #16
 800748c:	43db      	mvns	r3, r3
 800748e:	68f9      	ldr	r1, [r7, #12]
 8007490:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007494:	4013      	ands	r3, r2
 8007496:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	0159      	lsls	r1, r3, #5
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	440b      	add	r3, r1
 80074ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074b2:	4619      	mov	r1, r3
 80074b4:	4b05      	ldr	r3, [pc, #20]	@ (80074cc <USB_DeactivateEndpoint+0x1b4>)
 80074b6:	4013      	ands	r3, r2
 80074b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	ec337800 	.word	0xec337800
 80074cc:	eff37800 	.word	0xeff37800

080074d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b08a      	sub	sp, #40	@ 0x28
 80074d4:	af02      	add	r7, sp, #8
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	4613      	mov	r3, r2
 80074dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	785b      	ldrb	r3, [r3, #1]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	f040 817f 	bne.w	80077f0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d132      	bne.n	8007560 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	0151      	lsls	r1, r2, #5
 800750c:	69fa      	ldr	r2, [r7, #28]
 800750e:	440a      	add	r2, r1
 8007510:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007514:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007518:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800751c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	0151      	lsls	r1, r2, #5
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	440a      	add	r2, r1
 8007534:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007538:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800753c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	0151      	lsls	r1, r2, #5
 8007550:	69fa      	ldr	r2, [r7, #28]
 8007552:	440a      	add	r2, r1
 8007554:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007558:	0cdb      	lsrs	r3, r3, #19
 800755a:	04db      	lsls	r3, r3, #19
 800755c:	6113      	str	r3, [r2, #16]
 800755e:	e097      	b.n	8007690 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	015a      	lsls	r2, r3, #5
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	4413      	add	r3, r2
 8007568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	69ba      	ldr	r2, [r7, #24]
 8007570:	0151      	lsls	r1, r2, #5
 8007572:	69fa      	ldr	r2, [r7, #28]
 8007574:	440a      	add	r2, r1
 8007576:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800757a:	0cdb      	lsrs	r3, r3, #19
 800757c:	04db      	lsls	r3, r3, #19
 800757e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	0151      	lsls	r1, r2, #5
 8007592:	69fa      	ldr	r2, [r7, #28]
 8007594:	440a      	add	r2, r1
 8007596:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800759a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800759e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80075a2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d11a      	bne.n	80075e0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	691a      	ldr	r2, [r3, #16]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d903      	bls.n	80075be <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	689a      	ldr	r2, [r3, #8]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	0151      	lsls	r1, r2, #5
 80075d0:	69fa      	ldr	r2, [r7, #28]
 80075d2:	440a      	add	r2, r1
 80075d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075dc:	6113      	str	r3, [r2, #16]
 80075de:	e044      	b.n	800766a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	691a      	ldr	r2, [r3, #16]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	4413      	add	r3, r2
 80075ea:	1e5a      	subs	r2, r3, #1
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007602:	691a      	ldr	r2, [r3, #16]
 8007604:	8afb      	ldrh	r3, [r7, #22]
 8007606:	04d9      	lsls	r1, r3, #19
 8007608:	4ba4      	ldr	r3, [pc, #656]	@ (800789c <USB_EPStartXfer+0x3cc>)
 800760a:	400b      	ands	r3, r1
 800760c:	69b9      	ldr	r1, [r7, #24]
 800760e:	0148      	lsls	r0, r1, #5
 8007610:	69f9      	ldr	r1, [r7, #28]
 8007612:	4401      	add	r1, r0
 8007614:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007618:	4313      	orrs	r3, r2
 800761a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	791b      	ldrb	r3, [r3, #4]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d122      	bne.n	800766a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	4413      	add	r3, r2
 800762c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	0151      	lsls	r1, r2, #5
 8007636:	69fa      	ldr	r2, [r7, #28]
 8007638:	440a      	add	r2, r1
 800763a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800763e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007642:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007650:	691a      	ldr	r2, [r3, #16]
 8007652:	8afb      	ldrh	r3, [r7, #22]
 8007654:	075b      	lsls	r3, r3, #29
 8007656:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800765a:	69b9      	ldr	r1, [r7, #24]
 800765c:	0148      	lsls	r0, r1, #5
 800765e:	69f9      	ldr	r1, [r7, #28]
 8007660:	4401      	add	r1, r0
 8007662:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007666:	4313      	orrs	r3, r2
 8007668:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	4413      	add	r3, r2
 8007672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007676:	691a      	ldr	r2, [r3, #16]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007680:	69b9      	ldr	r1, [r7, #24]
 8007682:	0148      	lsls	r0, r1, #5
 8007684:	69f9      	ldr	r1, [r7, #28]
 8007686:	4401      	add	r1, r0
 8007688:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800768c:	4313      	orrs	r3, r2
 800768e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007690:	79fb      	ldrb	r3, [r7, #7]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d14b      	bne.n	800772e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d009      	beq.n	80076b2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076aa:	461a      	mov	r2, r3
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	69db      	ldr	r3, [r3, #28]
 80076b0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	791b      	ldrb	r3, [r3, #4]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d128      	bne.n	800770c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d110      	bne.n	80076ec <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	69ba      	ldr	r2, [r7, #24]
 80076da:	0151      	lsls	r1, r2, #5
 80076dc:	69fa      	ldr	r2, [r7, #28]
 80076de:	440a      	add	r2, r1
 80076e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80076e8:	6013      	str	r3, [r2, #0]
 80076ea:	e00f      	b.n	800770c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	0151      	lsls	r1, r2, #5
 80076fe:	69fa      	ldr	r2, [r7, #28]
 8007700:	440a      	add	r2, r1
 8007702:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800770a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	4413      	add	r3, r2
 8007714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	0151      	lsls	r1, r2, #5
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	440a      	add	r2, r1
 8007722:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007726:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	e166      	b.n	80079fc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	4413      	add	r3, r2
 8007736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	0151      	lsls	r1, r2, #5
 8007740:	69fa      	ldr	r2, [r7, #28]
 8007742:	440a      	add	r2, r1
 8007744:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007748:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800774c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	791b      	ldrb	r3, [r3, #4]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d015      	beq.n	8007782 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 814e 	beq.w	80079fc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007766:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	f003 030f 	and.w	r3, r3, #15
 8007770:	2101      	movs	r1, #1
 8007772:	fa01 f303 	lsl.w	r3, r1, r3
 8007776:	69f9      	ldr	r1, [r7, #28]
 8007778:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800777c:	4313      	orrs	r3, r2
 800777e:	634b      	str	r3, [r1, #52]	@ 0x34
 8007780:	e13c      	b.n	80079fc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800778e:	2b00      	cmp	r3, #0
 8007790:	d110      	bne.n	80077b4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	015a      	lsls	r2, r3, #5
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	4413      	add	r3, r2
 800779a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	69ba      	ldr	r2, [r7, #24]
 80077a2:	0151      	lsls	r1, r2, #5
 80077a4:	69fa      	ldr	r2, [r7, #28]
 80077a6:	440a      	add	r2, r1
 80077a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80077b0:	6013      	str	r3, [r2, #0]
 80077b2:	e00f      	b.n	80077d4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	0151      	lsls	r1, r2, #5
 80077c6:	69fa      	ldr	r2, [r7, #28]
 80077c8:	440a      	add	r2, r1
 80077ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077d2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	68d9      	ldr	r1, [r3, #12]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	781a      	ldrb	r2, [r3, #0]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	b298      	uxth	r0, r3
 80077e2:	79fb      	ldrb	r3, [r7, #7]
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	4603      	mov	r3, r0
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 f9b9 	bl	8007b60 <USB_WritePacket>
 80077ee:	e105      	b.n	80079fc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	0151      	lsls	r1, r2, #5
 8007802:	69fa      	ldr	r2, [r7, #28]
 8007804:	440a      	add	r2, r1
 8007806:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800780a:	0cdb      	lsrs	r3, r3, #19
 800780c:	04db      	lsls	r3, r3, #19
 800780e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	0151      	lsls	r1, r2, #5
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	440a      	add	r2, r1
 8007826:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800782a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800782e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007832:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d132      	bne.n	80078a0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d003      	beq.n	800784a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	689a      	ldr	r2, [r3, #8]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	689a      	ldr	r2, [r3, #8]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	4413      	add	r3, r2
 800785a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800785e:	691a      	ldr	r2, [r3, #16]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007868:	69b9      	ldr	r1, [r7, #24]
 800786a:	0148      	lsls	r0, r1, #5
 800786c:	69f9      	ldr	r1, [r7, #28]
 800786e:	4401      	add	r1, r0
 8007870:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007874:	4313      	orrs	r3, r2
 8007876:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	4413      	add	r3, r2
 8007880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	0151      	lsls	r1, r2, #5
 800788a:	69fa      	ldr	r2, [r7, #28]
 800788c:	440a      	add	r2, r1
 800788e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007892:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007896:	6113      	str	r3, [r2, #16]
 8007898:	e062      	b.n	8007960 <USB_EPStartXfer+0x490>
 800789a:	bf00      	nop
 800789c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d123      	bne.n	80078f0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078b4:	691a      	ldr	r2, [r3, #16]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078be:	69b9      	ldr	r1, [r7, #24]
 80078c0:	0148      	lsls	r0, r1, #5
 80078c2:	69f9      	ldr	r1, [r7, #28]
 80078c4:	4401      	add	r1, r0
 80078c6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80078ca:	4313      	orrs	r3, r2
 80078cc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	0151      	lsls	r1, r2, #5
 80078e0:	69fa      	ldr	r2, [r7, #28]
 80078e2:	440a      	add	r2, r1
 80078e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078ec:	6113      	str	r3, [r2, #16]
 80078ee:	e037      	b.n	8007960 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	691a      	ldr	r2, [r3, #16]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	4413      	add	r3, r2
 80078fa:	1e5a      	subs	r2, r3, #1
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	fbb2 f3f3 	udiv	r3, r2, r3
 8007904:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	8afa      	ldrh	r2, [r7, #22]
 800790c:	fb03 f202 	mul.w	r2, r3, r2
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	4413      	add	r3, r2
 800791c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007920:	691a      	ldr	r2, [r3, #16]
 8007922:	8afb      	ldrh	r3, [r7, #22]
 8007924:	04d9      	lsls	r1, r3, #19
 8007926:	4b38      	ldr	r3, [pc, #224]	@ (8007a08 <USB_EPStartXfer+0x538>)
 8007928:	400b      	ands	r3, r1
 800792a:	69b9      	ldr	r1, [r7, #24]
 800792c:	0148      	lsls	r0, r1, #5
 800792e:	69f9      	ldr	r1, [r7, #28]
 8007930:	4401      	add	r1, r0
 8007932:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007936:	4313      	orrs	r3, r2
 8007938:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007946:	691a      	ldr	r2, [r3, #16]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007950:	69b9      	ldr	r1, [r7, #24]
 8007952:	0148      	lsls	r0, r1, #5
 8007954:	69f9      	ldr	r1, [r7, #28]
 8007956:	4401      	add	r1, r0
 8007958:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800795c:	4313      	orrs	r3, r2
 800795e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d10d      	bne.n	8007982 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d009      	beq.n	8007982 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	68d9      	ldr	r1, [r3, #12]
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	4413      	add	r3, r2
 800797a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800797e:	460a      	mov	r2, r1
 8007980:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	791b      	ldrb	r3, [r3, #4]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d128      	bne.n	80079dc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007996:	2b00      	cmp	r3, #0
 8007998:	d110      	bne.n	80079bc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	0151      	lsls	r1, r2, #5
 80079ac:	69fa      	ldr	r2, [r7, #28]
 80079ae:	440a      	add	r2, r1
 80079b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	e00f      	b.n	80079dc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	69ba      	ldr	r2, [r7, #24]
 80079cc:	0151      	lsls	r1, r2, #5
 80079ce:	69fa      	ldr	r2, [r7, #28]
 80079d0:	440a      	add	r2, r1
 80079d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	0151      	lsls	r1, r2, #5
 80079ee:	69fa      	ldr	r2, [r7, #28]
 80079f0:	440a      	add	r2, r1
 80079f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079f6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80079fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3720      	adds	r7, #32
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	1ff80000 	.word	0x1ff80000

08007a0c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	785b      	ldrb	r3, [r3, #1]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d14a      	bne.n	8007ac0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a42:	f040 8086 	bne.w	8007b52 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	7812      	ldrb	r2, [r2, #0]
 8007a5a:	0151      	lsls	r1, r2, #5
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	440a      	add	r2, r1
 8007a60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a64:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a68:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	7812      	ldrb	r2, [r2, #0]
 8007a7e:	0151      	lsls	r1, r2, #5
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	440a      	add	r2, r1
 8007a84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	3301      	adds	r3, #1
 8007a92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d902      	bls.n	8007aa4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	75fb      	strb	r3, [r7, #23]
          break;
 8007aa2:	e056      	b.n	8007b52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007abc:	d0e7      	beq.n	8007a8e <USB_EPStopXfer+0x82>
 8007abe:	e048      	b.n	8007b52 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ad8:	d13b      	bne.n	8007b52 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	7812      	ldrb	r2, [r2, #0]
 8007aee:	0151      	lsls	r1, r2, #5
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	440a      	add	r2, r1
 8007af4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007af8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007afc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	7812      	ldrb	r2, [r2, #0]
 8007b12:	0151      	lsls	r1, r2, #5
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	440a      	add	r2, r1
 8007b18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3301      	adds	r3, #1
 8007b26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d902      	bls.n	8007b38 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	75fb      	strb	r3, [r7, #23]
          break;
 8007b36:	e00c      	b.n	8007b52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	015a      	lsls	r2, r3, #5
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b50:	d0e7      	beq.n	8007b22 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	371c      	adds	r7, #28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b089      	sub	sp, #36	@ 0x24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	460b      	mov	r3, r1
 8007b70:	71fb      	strb	r3, [r7, #7]
 8007b72:	4613      	mov	r3, r2
 8007b74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007b7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d123      	bne.n	8007bce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b86:	88bb      	ldrh	r3, [r7, #4]
 8007b88:	3303      	adds	r3, #3
 8007b8a:	089b      	lsrs	r3, r3, #2
 8007b8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b8e:	2300      	movs	r3, #0
 8007b90:	61bb      	str	r3, [r7, #24]
 8007b92:	e018      	b.n	8007bc6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b94:	79fb      	ldrb	r3, [r7, #7]
 8007b96:	031a      	lsls	r2, r3, #12
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	3301      	adds	r3, #1
 8007bac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	61bb      	str	r3, [r7, #24]
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d3e2      	bcc.n	8007b94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3724      	adds	r7, #36	@ 0x24
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b08b      	sub	sp, #44	@ 0x2c
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	4613      	mov	r3, r2
 8007be8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007bf2:	88fb      	ldrh	r3, [r7, #6]
 8007bf4:	089b      	lsrs	r3, r3, #2
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007bfa:	88fb      	ldrh	r3, [r7, #6]
 8007bfc:	f003 0303 	and.w	r3, r3, #3
 8007c00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007c02:	2300      	movs	r3, #0
 8007c04:	623b      	str	r3, [r7, #32]
 8007c06:	e014      	b.n	8007c32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c12:	601a      	str	r2, [r3, #0]
    pDest++;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c16:	3301      	adds	r3, #1
 8007c18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c22:	3301      	adds	r3, #1
 8007c24:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	3301      	adds	r3, #1
 8007c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	623b      	str	r3, [r7, #32]
 8007c32:	6a3a      	ldr	r2, [r7, #32]
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d3e6      	bcc.n	8007c08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007c3a:	8bfb      	ldrh	r3, [r7, #30]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01e      	beq.n	8007c7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f107 0310 	add.w	r3, r7, #16
 8007c50:	6812      	ldr	r2, [r2, #0]
 8007c52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c64:	701a      	strb	r2, [r3, #0]
      i++;
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6e:	3301      	adds	r3, #1
 8007c70:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007c72:	8bfb      	ldrh	r3, [r7, #30]
 8007c74:	3b01      	subs	r3, #1
 8007c76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c78:	8bfb      	ldrh	r3, [r7, #30]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1ea      	bne.n	8007c54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	372c      	adds	r7, #44	@ 0x2c
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	785b      	ldrb	r3, [r3, #1]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d12c      	bne.n	8007d02 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	db12      	blt.n	8007ce0 <USB_EPSetStall+0x54>
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00f      	beq.n	8007ce0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	0151      	lsls	r1, r2, #5
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	440a      	add	r2, r1
 8007cd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cda:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007cde:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	015a      	lsls	r2, r3, #5
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	0151      	lsls	r1, r2, #5
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	440a      	add	r2, r1
 8007cf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cfa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	e02b      	b.n	8007d5a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	db12      	blt.n	8007d3a <USB_EPSetStall+0xae>
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00f      	beq.n	8007d3a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	0151      	lsls	r1, r2, #5
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	440a      	add	r2, r1
 8007d30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d34:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d38:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	015a      	lsls	r2, r3, #5
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	4413      	add	r3, r2
 8007d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	0151      	lsls	r1, r2, #5
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	440a      	add	r2, r1
 8007d50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007d58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	785b      	ldrb	r3, [r3, #1]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d128      	bne.n	8007dd6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	0151      	lsls	r1, r2, #5
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	440a      	add	r2, r1
 8007d9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007da2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	791b      	ldrb	r3, [r3, #4]
 8007da8:	2b03      	cmp	r3, #3
 8007daa:	d003      	beq.n	8007db4 <USB_EPClearStall+0x4c>
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	791b      	ldrb	r3, [r3, #4]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d138      	bne.n	8007e26 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	0151      	lsls	r1, r2, #5
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	440a      	add	r2, r1
 8007dca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	e027      	b.n	8007e26 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	0151      	lsls	r1, r2, #5
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	440a      	add	r2, r1
 8007dec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007df0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007df4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	791b      	ldrb	r3, [r3, #4]
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d003      	beq.n	8007e06 <USB_EPClearStall+0x9e>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	791b      	ldrb	r3, [r3, #4]
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d10f      	bne.n	8007e26 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	015a      	lsls	r2, r3, #5
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	0151      	lsls	r1, r2, #5
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	440a      	add	r2, r1
 8007e1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e24:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e52:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007e56:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	78fb      	ldrb	r3, [r7, #3]
 8007e62:	011b      	lsls	r3, r3, #4
 8007e64:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007e68:	68f9      	ldr	r1, [r7, #12]
 8007e6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e9a:	f023 0303 	bic.w	r3, r3, #3
 8007e9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007eae:	f023 0302 	bic.w	r3, r3, #2
 8007eb2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b085      	sub	sp, #20
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007edc:	f023 0303 	bic.w	r3, r3, #3
 8007ee0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ef0:	f043 0302 	orr.w	r3, r3, #2
 8007ef4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3714      	adds	r7, #20
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	4013      	ands	r3, r2
 8007f1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b085      	sub	sp, #20
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	0c1b      	lsrs	r3, r3, #16
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b085      	sub	sp, #20
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f7a:	69db      	ldr	r3, [r3, #28]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	4013      	ands	r3, r2
 8007f80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	b29b      	uxth	r3, r3
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b085      	sub	sp, #20
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007fa2:	78fb      	ldrb	r3, [r7, #3]
 8007fa4:	015a      	lsls	r2, r3, #5
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	4413      	add	r3, r2
 8007faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007fc0:	68bb      	ldr	r3, [r7, #8]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b087      	sub	sp, #28
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ff0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007ff2:	78fb      	ldrb	r3, [r7, #3]
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8007ffe:	01db      	lsls	r3, r3, #7
 8008000:	b2db      	uxtb	r3, r3
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	4313      	orrs	r3, r2
 8008006:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008008:	78fb      	ldrb	r3, [r7, #3]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	4013      	ands	r3, r2
 800801a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800801c:	68bb      	ldr	r3, [r7, #8]
}
 800801e:	4618      	mov	r0, r3
 8008020:	371c      	adds	r7, #28
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	f003 0301 	and.w	r3, r3, #1
}
 800803a:	4618      	mov	r0, r3
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008046:	b480      	push	{r7}
 8008048:	b085      	sub	sp, #20
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008060:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008064:	f023 0307 	bic.w	r3, r3, #7
 8008068:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800807c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	460b      	mov	r3, r1
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	333c      	adds	r3, #60	@ 0x3c
 80080a2:	3304      	adds	r3, #4
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	4a26      	ldr	r2, [pc, #152]	@ (8008144 <USB_EP0_OutStart+0xb8>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d90a      	bls.n	80080c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080c0:	d101      	bne.n	80080c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	e037      	b.n	8008136 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080cc:	461a      	mov	r2, r3
 80080ce:	2300      	movs	r3, #0
 80080d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080f4:	f043 0318 	orr.w	r3, r3, #24
 80080f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008108:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800810c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800810e:	7afb      	ldrb	r3, [r7, #11]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d10f      	bne.n	8008134 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800811a:	461a      	mov	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	697a      	ldr	r2, [r7, #20]
 800812a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800812e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008132:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	371c      	adds	r7, #28
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	4f54300a 	.word	0x4f54300a

08008148 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	3301      	adds	r3, #1
 8008158:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008160:	d901      	bls.n	8008166 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e01b      	b.n	800819e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	2b00      	cmp	r3, #0
 800816c:	daf2      	bge.n	8008154 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	f043 0201 	orr.w	r2, r3, #1
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3301      	adds	r3, #1
 8008182:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800818a:	d901      	bls.n	8008190 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e006      	b.n	800819e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b01      	cmp	r3, #1
 800819a:	d0f0      	beq.n	800817e <USB_CoreReset+0x36>

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
	...

080081ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	460b      	mov	r3, r1
 80081b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80081b8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80081bc:	f002 fd3e 	bl	800ac3c <USBD_static_malloc>
 80081c0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d109      	bne.n	80081dc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	32b0      	adds	r2, #176	@ 0xb0
 80081d2:	2100      	movs	r1, #0
 80081d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80081d8:	2302      	movs	r3, #2
 80081da:	e0d4      	b.n	8008386 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80081dc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80081e0:	2100      	movs	r1, #0
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f003 faeb 	bl	800b7be <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	32b0      	adds	r2, #176	@ 0xb0
 80081f2:	68f9      	ldr	r1, [r7, #12]
 80081f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	32b0      	adds	r2, #176	@ 0xb0
 8008202:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	7c1b      	ldrb	r3, [r3, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d138      	bne.n	8008286 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008214:	4b5e      	ldr	r3, [pc, #376]	@ (8008390 <USBD_CDC_Init+0x1e4>)
 8008216:	7819      	ldrb	r1, [r3, #0]
 8008218:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800821c:	2202      	movs	r2, #2
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f002 fb9b 	bl	800a95a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008224:	4b5a      	ldr	r3, [pc, #360]	@ (8008390 <USBD_CDC_Init+0x1e4>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	f003 020f 	and.w	r2, r3, #15
 800822c:	6879      	ldr	r1, [r7, #4]
 800822e:	4613      	mov	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	440b      	add	r3, r1
 8008238:	3324      	adds	r3, #36	@ 0x24
 800823a:	2201      	movs	r2, #1
 800823c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800823e:	4b55      	ldr	r3, [pc, #340]	@ (8008394 <USBD_CDC_Init+0x1e8>)
 8008240:	7819      	ldrb	r1, [r3, #0]
 8008242:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008246:	2202      	movs	r2, #2
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f002 fb86 	bl	800a95a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800824e:	4b51      	ldr	r3, [pc, #324]	@ (8008394 <USBD_CDC_Init+0x1e8>)
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	f003 020f 	and.w	r2, r3, #15
 8008256:	6879      	ldr	r1, [r7, #4]
 8008258:	4613      	mov	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4413      	add	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	440b      	add	r3, r1
 8008262:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008266:	2201      	movs	r2, #1
 8008268:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800826a:	4b4b      	ldr	r3, [pc, #300]	@ (8008398 <USBD_CDC_Init+0x1ec>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	f003 020f 	and.w	r2, r3, #15
 8008272:	6879      	ldr	r1, [r7, #4]
 8008274:	4613      	mov	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	440b      	add	r3, r1
 800827e:	3326      	adds	r3, #38	@ 0x26
 8008280:	2210      	movs	r2, #16
 8008282:	801a      	strh	r2, [r3, #0]
 8008284:	e035      	b.n	80082f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008286:	4b42      	ldr	r3, [pc, #264]	@ (8008390 <USBD_CDC_Init+0x1e4>)
 8008288:	7819      	ldrb	r1, [r3, #0]
 800828a:	2340      	movs	r3, #64	@ 0x40
 800828c:	2202      	movs	r2, #2
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f002 fb63 	bl	800a95a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008294:	4b3e      	ldr	r3, [pc, #248]	@ (8008390 <USBD_CDC_Init+0x1e4>)
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	f003 020f 	and.w	r2, r3, #15
 800829c:	6879      	ldr	r1, [r7, #4]
 800829e:	4613      	mov	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	4413      	add	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	440b      	add	r3, r1
 80082a8:	3324      	adds	r3, #36	@ 0x24
 80082aa:	2201      	movs	r2, #1
 80082ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80082ae:	4b39      	ldr	r3, [pc, #228]	@ (8008394 <USBD_CDC_Init+0x1e8>)
 80082b0:	7819      	ldrb	r1, [r3, #0]
 80082b2:	2340      	movs	r3, #64	@ 0x40
 80082b4:	2202      	movs	r2, #2
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f002 fb4f 	bl	800a95a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80082bc:	4b35      	ldr	r3, [pc, #212]	@ (8008394 <USBD_CDC_Init+0x1e8>)
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	f003 020f 	and.w	r2, r3, #15
 80082c4:	6879      	ldr	r1, [r7, #4]
 80082c6:	4613      	mov	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	440b      	add	r3, r1
 80082d0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80082d4:	2201      	movs	r2, #1
 80082d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80082d8:	4b2f      	ldr	r3, [pc, #188]	@ (8008398 <USBD_CDC_Init+0x1ec>)
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	f003 020f 	and.w	r2, r3, #15
 80082e0:	6879      	ldr	r1, [r7, #4]
 80082e2:	4613      	mov	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4413      	add	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	440b      	add	r3, r1
 80082ec:	3326      	adds	r3, #38	@ 0x26
 80082ee:	2210      	movs	r2, #16
 80082f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082f2:	4b29      	ldr	r3, [pc, #164]	@ (8008398 <USBD_CDC_Init+0x1ec>)
 80082f4:	7819      	ldrb	r1, [r3, #0]
 80082f6:	2308      	movs	r3, #8
 80082f8:	2203      	movs	r2, #3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f002 fb2d 	bl	800a95a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008300:	4b25      	ldr	r3, [pc, #148]	@ (8008398 <USBD_CDC_Init+0x1ec>)
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	f003 020f 	and.w	r2, r3, #15
 8008308:	6879      	ldr	r1, [r7, #4]
 800830a:	4613      	mov	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4413      	add	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	440b      	add	r3, r1
 8008314:	3324      	adds	r3, #36	@ 0x24
 8008316:	2201      	movs	r2, #1
 8008318:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	33b0      	adds	r3, #176	@ 0xb0
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008350:	2302      	movs	r3, #2
 8008352:	e018      	b.n	8008386 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	7c1b      	ldrb	r3, [r3, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10a      	bne.n	8008372 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800835c:	4b0d      	ldr	r3, [pc, #52]	@ (8008394 <USBD_CDC_Init+0x1e8>)
 800835e:	7819      	ldrb	r1, [r3, #0]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008366:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f002 fbe4 	bl	800ab38 <USBD_LL_PrepareReceive>
 8008370:	e008      	b.n	8008384 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008372:	4b08      	ldr	r3, [pc, #32]	@ (8008394 <USBD_CDC_Init+0x1e8>)
 8008374:	7819      	ldrb	r1, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800837c:	2340      	movs	r3, #64	@ 0x40
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f002 fbda 	bl	800ab38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	20000097 	.word	0x20000097
 8008394:	20000098 	.word	0x20000098
 8008398:	20000099 	.word	0x20000099

0800839c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	460b      	mov	r3, r1
 80083a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80083a8:	4b3a      	ldr	r3, [pc, #232]	@ (8008494 <USBD_CDC_DeInit+0xf8>)
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f002 faf9 	bl	800a9a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80083b4:	4b37      	ldr	r3, [pc, #220]	@ (8008494 <USBD_CDC_DeInit+0xf8>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	f003 020f 	and.w	r2, r3, #15
 80083bc:	6879      	ldr	r1, [r7, #4]
 80083be:	4613      	mov	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	440b      	add	r3, r1
 80083c8:	3324      	adds	r3, #36	@ 0x24
 80083ca:	2200      	movs	r2, #0
 80083cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80083ce:	4b32      	ldr	r3, [pc, #200]	@ (8008498 <USBD_CDC_DeInit+0xfc>)
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	4619      	mov	r1, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f002 fae6 	bl	800a9a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80083da:	4b2f      	ldr	r3, [pc, #188]	@ (8008498 <USBD_CDC_DeInit+0xfc>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	f003 020f 	and.w	r2, r3, #15
 80083e2:	6879      	ldr	r1, [r7, #4]
 80083e4:	4613      	mov	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	440b      	add	r3, r1
 80083ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80083f2:	2200      	movs	r2, #0
 80083f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80083f6:	4b29      	ldr	r3, [pc, #164]	@ (800849c <USBD_CDC_DeInit+0x100>)
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f002 fad2 	bl	800a9a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008402:	4b26      	ldr	r3, [pc, #152]	@ (800849c <USBD_CDC_DeInit+0x100>)
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	f003 020f 	and.w	r2, r3, #15
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	4613      	mov	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	440b      	add	r3, r1
 8008416:	3324      	adds	r3, #36	@ 0x24
 8008418:	2200      	movs	r2, #0
 800841a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800841c:	4b1f      	ldr	r3, [pc, #124]	@ (800849c <USBD_CDC_DeInit+0x100>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	f003 020f 	and.w	r2, r3, #15
 8008424:	6879      	ldr	r1, [r7, #4]
 8008426:	4613      	mov	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	440b      	add	r3, r1
 8008430:	3326      	adds	r3, #38	@ 0x26
 8008432:	2200      	movs	r2, #0
 8008434:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	32b0      	adds	r2, #176	@ 0xb0
 8008440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d01f      	beq.n	8008488 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	33b0      	adds	r3, #176	@ 0xb0
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	32b0      	adds	r2, #176	@ 0xb0
 8008466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846a:	4618      	mov	r0, r3
 800846c:	f002 fbf4 	bl	800ac58 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	32b0      	adds	r2, #176	@ 0xb0
 800847a:	2100      	movs	r1, #0
 800847c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	20000097 	.word	0x20000097
 8008498:	20000098 	.word	0x20000098
 800849c:	20000099 	.word	0x20000099

080084a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	32b0      	adds	r2, #176	@ 0xb0
 80084b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e0bf      	b.n	8008650 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d050      	beq.n	800857e <USBD_CDC_Setup+0xde>
 80084dc:	2b20      	cmp	r3, #32
 80084de:	f040 80af 	bne.w	8008640 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	88db      	ldrh	r3, [r3, #6]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d03a      	beq.n	8008560 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	b25b      	sxtb	r3, r3
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	da1b      	bge.n	800852c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	33b0      	adds	r3, #176	@ 0xb0
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800850a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	88d2      	ldrh	r2, [r2, #6]
 8008510:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	88db      	ldrh	r3, [r3, #6]
 8008516:	2b07      	cmp	r3, #7
 8008518:	bf28      	it	cs
 800851a:	2307      	movcs	r3, #7
 800851c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	89fa      	ldrh	r2, [r7, #14]
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f001 fdbd 	bl	800a0a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800852a:	e090      	b.n	800864e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	785a      	ldrb	r2, [r3, #1]
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	88db      	ldrh	r3, [r3, #6]
 800853a:	2b3f      	cmp	r3, #63	@ 0x3f
 800853c:	d803      	bhi.n	8008546 <USBD_CDC_Setup+0xa6>
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	88db      	ldrh	r3, [r3, #6]
 8008542:	b2da      	uxtb	r2, r3
 8008544:	e000      	b.n	8008548 <USBD_CDC_Setup+0xa8>
 8008546:	2240      	movs	r2, #64	@ 0x40
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800854e:	6939      	ldr	r1, [r7, #16]
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008556:	461a      	mov	r2, r3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f001 fdcf 	bl	800a0fc <USBD_CtlPrepareRx>
      break;
 800855e:	e076      	b.n	800864e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	33b0      	adds	r3, #176	@ 0xb0
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	7850      	ldrb	r0, [r2, #1]
 8008576:	2200      	movs	r2, #0
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	4798      	blx	r3
      break;
 800857c:	e067      	b.n	800864e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	785b      	ldrb	r3, [r3, #1]
 8008582:	2b0b      	cmp	r3, #11
 8008584:	d851      	bhi.n	800862a <USBD_CDC_Setup+0x18a>
 8008586:	a201      	add	r2, pc, #4	@ (adr r2, 800858c <USBD_CDC_Setup+0xec>)
 8008588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858c:	080085bd 	.word	0x080085bd
 8008590:	08008639 	.word	0x08008639
 8008594:	0800862b 	.word	0x0800862b
 8008598:	0800862b 	.word	0x0800862b
 800859c:	0800862b 	.word	0x0800862b
 80085a0:	0800862b 	.word	0x0800862b
 80085a4:	0800862b 	.word	0x0800862b
 80085a8:	0800862b 	.word	0x0800862b
 80085ac:	0800862b 	.word	0x0800862b
 80085b0:	0800862b 	.word	0x0800862b
 80085b4:	080085e7 	.word	0x080085e7
 80085b8:	08008611 	.word	0x08008611
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b03      	cmp	r3, #3
 80085c6:	d107      	bne.n	80085d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80085c8:	f107 030a 	add.w	r3, r7, #10
 80085cc:	2202      	movs	r2, #2
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 fd67 	bl	800a0a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085d6:	e032      	b.n	800863e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f001 fce5 	bl	8009faa <USBD_CtlError>
            ret = USBD_FAIL;
 80085e0:	2303      	movs	r3, #3
 80085e2:	75fb      	strb	r3, [r7, #23]
          break;
 80085e4:	e02b      	b.n	800863e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d107      	bne.n	8008602 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80085f2:	f107 030d 	add.w	r3, r7, #13
 80085f6:	2201      	movs	r2, #1
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f001 fd52 	bl	800a0a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008600:	e01d      	b.n	800863e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f001 fcd0 	bl	8009faa <USBD_CtlError>
            ret = USBD_FAIL;
 800860a:	2303      	movs	r3, #3
 800860c:	75fb      	strb	r3, [r7, #23]
          break;
 800860e:	e016      	b.n	800863e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008616:	b2db      	uxtb	r3, r3
 8008618:	2b03      	cmp	r3, #3
 800861a:	d00f      	beq.n	800863c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800861c:	6839      	ldr	r1, [r7, #0]
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f001 fcc3 	bl	8009faa <USBD_CtlError>
            ret = USBD_FAIL;
 8008624:	2303      	movs	r3, #3
 8008626:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008628:	e008      	b.n	800863c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f001 fcbc 	bl	8009faa <USBD_CtlError>
          ret = USBD_FAIL;
 8008632:	2303      	movs	r3, #3
 8008634:	75fb      	strb	r3, [r7, #23]
          break;
 8008636:	e002      	b.n	800863e <USBD_CDC_Setup+0x19e>
          break;
 8008638:	bf00      	nop
 800863a:	e008      	b.n	800864e <USBD_CDC_Setup+0x1ae>
          break;
 800863c:	bf00      	nop
      }
      break;
 800863e:	e006      	b.n	800864e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f001 fcb1 	bl	8009faa <USBD_CtlError>
      ret = USBD_FAIL;
 8008648:	2303      	movs	r3, #3
 800864a:	75fb      	strb	r3, [r7, #23]
      break;
 800864c:	bf00      	nop
  }

  return (uint8_t)ret;
 800864e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3718      	adds	r7, #24
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	460b      	mov	r3, r1
 8008662:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800866a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	32b0      	adds	r2, #176	@ 0xb0
 8008676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800867e:	2303      	movs	r3, #3
 8008680:	e065      	b.n	800874e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	32b0      	adds	r2, #176	@ 0xb0
 800868c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008690:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008692:	78fb      	ldrb	r3, [r7, #3]
 8008694:	f003 020f 	and.w	r2, r3, #15
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	4613      	mov	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	440b      	add	r3, r1
 80086a4:	3318      	adds	r3, #24
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d02f      	beq.n	800870c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80086ac:	78fb      	ldrb	r3, [r7, #3]
 80086ae:	f003 020f 	and.w	r2, r3, #15
 80086b2:	6879      	ldr	r1, [r7, #4]
 80086b4:	4613      	mov	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	440b      	add	r3, r1
 80086be:	3318      	adds	r3, #24
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	78fb      	ldrb	r3, [r7, #3]
 80086c4:	f003 010f 	and.w	r1, r3, #15
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	460b      	mov	r3, r1
 80086cc:	00db      	lsls	r3, r3, #3
 80086ce:	440b      	add	r3, r1
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4403      	add	r3, r0
 80086d4:	331c      	adds	r3, #28
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80086dc:	fb01 f303 	mul.w	r3, r1, r3
 80086e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d112      	bne.n	800870c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80086e6:	78fb      	ldrb	r3, [r7, #3]
 80086e8:	f003 020f 	and.w	r2, r3, #15
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	4613      	mov	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	440b      	add	r3, r1
 80086f8:	3318      	adds	r3, #24
 80086fa:	2200      	movs	r2, #0
 80086fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80086fe:	78f9      	ldrb	r1, [r7, #3]
 8008700:	2300      	movs	r3, #0
 8008702:	2200      	movs	r2, #0
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f002 f9f6 	bl	800aaf6 <USBD_LL_Transmit>
 800870a:	e01f      	b.n	800874c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2200      	movs	r2, #0
 8008710:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	33b0      	adds	r3, #176	@ 0xb0
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d010      	beq.n	800874c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	33b0      	adds	r3, #176	@ 0xb0
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4413      	add	r3, r2
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008748:	78fa      	ldrb	r2, [r7, #3]
 800874a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b084      	sub	sp, #16
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	460b      	mov	r3, r1
 8008760:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	32b0      	adds	r2, #176	@ 0xb0
 800876c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008770:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	32b0      	adds	r2, #176	@ 0xb0
 800877c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008784:	2303      	movs	r3, #3
 8008786:	e01a      	b.n	80087be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008788:	78fb      	ldrb	r3, [r7, #3]
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f002 f9f4 	bl	800ab7a <USBD_LL_GetRxDataSize>
 8008792:	4602      	mov	r2, r0
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	33b0      	adds	r3, #176	@ 0xb0
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80087b8:	4611      	mov	r1, r2
 80087ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b084      	sub	sp, #16
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	32b0      	adds	r2, #176	@ 0xb0
 80087d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d101      	bne.n	80087e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e024      	b.n	8008832 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	33b0      	adds	r3, #176	@ 0xb0
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	4413      	add	r3, r2
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d019      	beq.n	8008830 <USBD_CDC_EP0_RxReady+0x6a>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008802:	2bff      	cmp	r3, #255	@ 0xff
 8008804:	d014      	beq.n	8008830 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	33b0      	adds	r3, #176	@ 0xb0
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800881e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008826:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	22ff      	movs	r2, #255	@ 0xff
 800882c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
	...

0800883c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008844:	2182      	movs	r1, #130	@ 0x82
 8008846:	4818      	ldr	r0, [pc, #96]	@ (80088a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008848:	f000 fd4f 	bl	80092ea <USBD_GetEpDesc>
 800884c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800884e:	2101      	movs	r1, #1
 8008850:	4815      	ldr	r0, [pc, #84]	@ (80088a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008852:	f000 fd4a 	bl	80092ea <USBD_GetEpDesc>
 8008856:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008858:	2181      	movs	r1, #129	@ 0x81
 800885a:	4813      	ldr	r0, [pc, #76]	@ (80088a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800885c:	f000 fd45 	bl	80092ea <USBD_GetEpDesc>
 8008860:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	2210      	movs	r2, #16
 800886c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d006      	beq.n	8008882 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	2200      	movs	r2, #0
 8008878:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800887c:	711a      	strb	r2, [r3, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d006      	beq.n	8008896 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008890:	711a      	strb	r2, [r3, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2243      	movs	r2, #67	@ 0x43
 800889a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800889c:	4b02      	ldr	r3, [pc, #8]	@ (80088a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3718      	adds	r7, #24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	20000054 	.word	0x20000054

080088ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80088b4:	2182      	movs	r1, #130	@ 0x82
 80088b6:	4818      	ldr	r0, [pc, #96]	@ (8008918 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80088b8:	f000 fd17 	bl	80092ea <USBD_GetEpDesc>
 80088bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80088be:	2101      	movs	r1, #1
 80088c0:	4815      	ldr	r0, [pc, #84]	@ (8008918 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80088c2:	f000 fd12 	bl	80092ea <USBD_GetEpDesc>
 80088c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80088c8:	2181      	movs	r1, #129	@ 0x81
 80088ca:	4813      	ldr	r0, [pc, #76]	@ (8008918 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80088cc:	f000 fd0d 	bl	80092ea <USBD_GetEpDesc>
 80088d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	2210      	movs	r2, #16
 80088dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d006      	beq.n	80088f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	2200      	movs	r2, #0
 80088e8:	711a      	strb	r2, [r3, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f042 0202 	orr.w	r2, r2, #2
 80088f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d006      	beq.n	8008906 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	711a      	strb	r2, [r3, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f042 0202 	orr.w	r2, r2, #2
 8008904:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2243      	movs	r2, #67	@ 0x43
 800890a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800890c:	4b02      	ldr	r3, [pc, #8]	@ (8008918 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800890e:	4618      	mov	r0, r3
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	20000054 	.word	0x20000054

0800891c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008924:	2182      	movs	r1, #130	@ 0x82
 8008926:	4818      	ldr	r0, [pc, #96]	@ (8008988 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008928:	f000 fcdf 	bl	80092ea <USBD_GetEpDesc>
 800892c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800892e:	2101      	movs	r1, #1
 8008930:	4815      	ldr	r0, [pc, #84]	@ (8008988 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008932:	f000 fcda 	bl	80092ea <USBD_GetEpDesc>
 8008936:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008938:	2181      	movs	r1, #129	@ 0x81
 800893a:	4813      	ldr	r0, [pc, #76]	@ (8008988 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800893c:	f000 fcd5 	bl	80092ea <USBD_GetEpDesc>
 8008940:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	2210      	movs	r2, #16
 800894c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d006      	beq.n	8008962 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	2200      	movs	r2, #0
 8008958:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800895c:	711a      	strb	r2, [r3, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d006      	beq.n	8008976 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008970:	711a      	strb	r2, [r3, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2243      	movs	r2, #67	@ 0x43
 800897a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800897c:	4b02      	ldr	r3, [pc, #8]	@ (8008988 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800897e:	4618      	mov	r0, r3
 8008980:	3718      	adds	r7, #24
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	20000054 	.word	0x20000054

0800898c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	220a      	movs	r2, #10
 8008998:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800899a:	4b03      	ldr	r3, [pc, #12]	@ (80089a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800899c:	4618      	mov	r0, r3
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	20000010 	.word	0x20000010

080089ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d101      	bne.n	80089c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80089bc:	2303      	movs	r3, #3
 80089be:	e009      	b.n	80089d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	33b0      	adds	r3, #176	@ 0xb0
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	32b0      	adds	r2, #176	@ 0xb0
 80089f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089fa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e008      	b.n	8008a18 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	371c      	adds	r7, #28
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	32b0      	adds	r2, #176	@ 0xb0
 8008a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d101      	bne.n	8008a48 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e004      	b.n	8008a52 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
	...

08008a60 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	32b0      	adds	r2, #176	@ 0xb0
 8008a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a76:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e025      	b.n	8008ad2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d11f      	bne.n	8008ad0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008a98:	4b10      	ldr	r3, [pc, #64]	@ (8008adc <USBD_CDC_TransmitPacket+0x7c>)
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	f003 020f 	and.w	r2, r3, #15
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4403      	add	r3, r0
 8008ab2:	3318      	adds	r3, #24
 8008ab4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008ab6:	4b09      	ldr	r3, [pc, #36]	@ (8008adc <USBD_CDC_TransmitPacket+0x7c>)
 8008ab8:	7819      	ldrb	r1, [r3, #0]
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f002 f815 	bl	800aaf6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	20000097 	.word	0x20000097

08008ae0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	32b0      	adds	r2, #176	@ 0xb0
 8008af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	32b0      	adds	r2, #176	@ 0xb0
 8008b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e018      	b.n	8008b40 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	7c1b      	ldrb	r3, [r3, #16]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10a      	bne.n	8008b2c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b16:	4b0c      	ldr	r3, [pc, #48]	@ (8008b48 <USBD_CDC_ReceivePacket+0x68>)
 8008b18:	7819      	ldrb	r1, [r3, #0]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f002 f807 	bl	800ab38 <USBD_LL_PrepareReceive>
 8008b2a:	e008      	b.n	8008b3e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b2c:	4b06      	ldr	r3, [pc, #24]	@ (8008b48 <USBD_CDC_ReceivePacket+0x68>)
 8008b2e:	7819      	ldrb	r1, [r3, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b36:	2340      	movs	r3, #64	@ 0x40
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f001 fffd 	bl	800ab38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	20000098 	.word	0x20000098

08008b4c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	4613      	mov	r3, r2
 8008b58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e01f      	b.n	8008ba4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	79fa      	ldrb	r2, [r7, #7]
 8008b96:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f001 fe77 	bl	800a88c <USBD_LL_Init>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e025      	b.n	8008c10 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	32ae      	adds	r2, #174	@ 0xae
 8008bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00f      	beq.n	8008c00 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	32ae      	adds	r2, #174	@ 0xae
 8008bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf0:	f107 020e 	add.w	r2, r7, #14
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	4798      	blx	r3
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008c06:	1c5a      	adds	r2, r3, #1
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f001 fe7f 	bl	800a924 <USBD_LL_Start>
 8008c26:	4603      	mov	r3, r0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c38:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b084      	sub	sp, #16
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	460b      	mov	r3, r1
 8008c50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d009      	beq.n	8008c74 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	78fa      	ldrb	r2, [r7, #3]
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	4798      	blx	r3
 8008c70:	4603      	mov	r3, r0
 8008c72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	460b      	mov	r3, r1
 8008c88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	78fa      	ldrb	r2, [r7, #3]
 8008c98:	4611      	mov	r1, r2
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	4798      	blx	r3
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d001      	beq.n	8008ca8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f001 f936 	bl	8009f36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008cd8:	461a      	mov	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008ce6:	f003 031f 	and.w	r3, r3, #31
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d01a      	beq.n	8008d24 <USBD_LL_SetupStage+0x72>
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d822      	bhi.n	8008d38 <USBD_LL_SetupStage+0x86>
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d002      	beq.n	8008cfc <USBD_LL_SetupStage+0x4a>
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d00a      	beq.n	8008d10 <USBD_LL_SetupStage+0x5e>
 8008cfa:	e01d      	b.n	8008d38 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fb63 	bl	80093d0 <USBD_StdDevReq>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d0e:	e020      	b.n	8008d52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d16:	4619      	mov	r1, r3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fbcb 	bl	80094b4 <USBD_StdItfReq>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	73fb      	strb	r3, [r7, #15]
      break;
 8008d22:	e016      	b.n	8008d52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 fc2d 	bl	800958c <USBD_StdEPReq>
 8008d32:	4603      	mov	r3, r0
 8008d34:	73fb      	strb	r3, [r7, #15]
      break;
 8008d36:	e00c      	b.n	8008d52 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d3e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f001 fe4c 	bl	800a9e4 <USBD_LL_StallEP>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d50:	bf00      	nop
  }

  return ret;
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	460b      	mov	r3, r1
 8008d66:	607a      	str	r2, [r7, #4]
 8008d68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008d6e:	7afb      	ldrb	r3, [r7, #11]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d16e      	bne.n	8008e52 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008d7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	f040 8098 	bne.w	8008eb8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	689a      	ldr	r2, [r3, #8]
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d913      	bls.n	8008dbc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	689a      	ldr	r2, [r3, #8]
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	1ad2      	subs	r2, r2, r3
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	68da      	ldr	r2, [r3, #12]
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	4293      	cmp	r3, r2
 8008dac:	bf28      	it	cs
 8008dae:	4613      	movcs	r3, r2
 8008db0:	461a      	mov	r2, r3
 8008db2:	6879      	ldr	r1, [r7, #4]
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f001 f9be 	bl	800a136 <USBD_CtlContinueRx>
 8008dba:	e07d      	b.n	8008eb8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008dc2:	f003 031f 	and.w	r3, r3, #31
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d014      	beq.n	8008df4 <USBD_LL_DataOutStage+0x98>
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d81d      	bhi.n	8008e0a <USBD_LL_DataOutStage+0xae>
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <USBD_LL_DataOutStage+0x7c>
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d003      	beq.n	8008dde <USBD_LL_DataOutStage+0x82>
 8008dd6:	e018      	b.n	8008e0a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	75bb      	strb	r3, [r7, #22]
            break;
 8008ddc:	e018      	b.n	8008e10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	4619      	mov	r1, r3
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f000 fa64 	bl	80092b6 <USBD_CoreFindIF>
 8008dee:	4603      	mov	r3, r0
 8008df0:	75bb      	strb	r3, [r7, #22]
            break;
 8008df2:	e00d      	b.n	8008e10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f000 fa66 	bl	80092d0 <USBD_CoreFindEP>
 8008e04:	4603      	mov	r3, r0
 8008e06:	75bb      	strb	r3, [r7, #22]
            break;
 8008e08:	e002      	b.n	8008e10 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	75bb      	strb	r3, [r7, #22]
            break;
 8008e0e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008e10:	7dbb      	ldrb	r3, [r7, #22]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d119      	bne.n	8008e4a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	2b03      	cmp	r3, #3
 8008e20:	d113      	bne.n	8008e4a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008e22:	7dba      	ldrb	r2, [r7, #22]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	32ae      	adds	r2, #174	@ 0xae
 8008e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00b      	beq.n	8008e4a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008e32:	7dba      	ldrb	r2, [r7, #22]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008e3a:	7dba      	ldrb	r2, [r7, #22]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	32ae      	adds	r2, #174	@ 0xae
 8008e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f001 f984 	bl	800a158 <USBD_CtlSendStatus>
 8008e50:	e032      	b.n	8008eb8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008e52:	7afb      	ldrb	r3, [r7, #11]
 8008e54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f000 fa37 	bl	80092d0 <USBD_CoreFindEP>
 8008e62:	4603      	mov	r3, r0
 8008e64:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e66:	7dbb      	ldrb	r3, [r7, #22]
 8008e68:	2bff      	cmp	r3, #255	@ 0xff
 8008e6a:	d025      	beq.n	8008eb8 <USBD_LL_DataOutStage+0x15c>
 8008e6c:	7dbb      	ldrb	r3, [r7, #22]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d122      	bne.n	8008eb8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d117      	bne.n	8008eae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008e7e:	7dba      	ldrb	r2, [r7, #22]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	32ae      	adds	r2, #174	@ 0xae
 8008e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00f      	beq.n	8008eae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008e8e:	7dba      	ldrb	r2, [r7, #22]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008e96:	7dba      	ldrb	r2, [r7, #22]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	32ae      	adds	r2, #174	@ 0xae
 8008e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	7afa      	ldrb	r2, [r7, #11]
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	4798      	blx	r3
 8008eaa:	4603      	mov	r3, r0
 8008eac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008eae:	7dfb      	ldrb	r3, [r7, #23]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008eb4:	7dfb      	ldrb	r3, [r7, #23]
 8008eb6:	e000      	b.n	8008eba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3718      	adds	r7, #24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b086      	sub	sp, #24
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	60f8      	str	r0, [r7, #12]
 8008eca:	460b      	mov	r3, r1
 8008ecc:	607a      	str	r2, [r7, #4]
 8008ece:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008ed0:	7afb      	ldrb	r3, [r7, #11]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d16f      	bne.n	8008fb6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	3314      	adds	r3, #20
 8008eda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d15a      	bne.n	8008f9c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	689a      	ldr	r2, [r3, #8]
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d914      	bls.n	8008f1c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	689a      	ldr	r2, [r3, #8]
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	1ad2      	subs	r2, r2, r3
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	461a      	mov	r2, r3
 8008f06:	6879      	ldr	r1, [r7, #4]
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f001 f8e6 	bl	800a0da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f0e:	2300      	movs	r3, #0
 8008f10:	2200      	movs	r2, #0
 8008f12:	2100      	movs	r1, #0
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f001 fe0f 	bl	800ab38 <USBD_LL_PrepareReceive>
 8008f1a:	e03f      	b.n	8008f9c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	68da      	ldr	r2, [r3, #12]
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d11c      	bne.n	8008f62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d316      	bcc.n	8008f62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d20f      	bcs.n	8008f62 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f42:	2200      	movs	r2, #0
 8008f44:	2100      	movs	r1, #0
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f001 f8c7 	bl	800a0da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f54:	2300      	movs	r3, #0
 8008f56:	2200      	movs	r2, #0
 8008f58:	2100      	movs	r1, #0
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f001 fdec 	bl	800ab38 <USBD_LL_PrepareReceive>
 8008f60:	e01c      	b.n	8008f9c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d10f      	bne.n	8008f8e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d009      	beq.n	8008f8e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f8e:	2180      	movs	r1, #128	@ 0x80
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f001 fd27 	bl	800a9e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f001 f8f1 	bl	800a17e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d03a      	beq.n	800901c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f7ff fe42 	bl	8008c30 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008fb4:	e032      	b.n	800901c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008fb6:	7afb      	ldrb	r3, [r7, #11]
 8008fb8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f000 f985 	bl	80092d0 <USBD_CoreFindEP>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fca:	7dfb      	ldrb	r3, [r7, #23]
 8008fcc:	2bff      	cmp	r3, #255	@ 0xff
 8008fce:	d025      	beq.n	800901c <USBD_LL_DataInStage+0x15a>
 8008fd0:	7dfb      	ldrb	r3, [r7, #23]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d122      	bne.n	800901c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d11c      	bne.n	800901c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008fe2:	7dfa      	ldrb	r2, [r7, #23]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	32ae      	adds	r2, #174	@ 0xae
 8008fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d014      	beq.n	800901c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008ff2:	7dfa      	ldrb	r2, [r7, #23]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008ffa:	7dfa      	ldrb	r2, [r7, #23]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	32ae      	adds	r2, #174	@ 0xae
 8009000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	7afa      	ldrb	r2, [r7, #11]
 8009008:	4611      	mov	r1, r2
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	4798      	blx	r3
 800900e:	4603      	mov	r3, r0
 8009010:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009012:	7dbb      	ldrb	r3, [r7, #22]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009018:	7dbb      	ldrb	r3, [r7, #22]
 800901a:	e000      	b.n	800901e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3718      	adds	r7, #24
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800905e:	2b00      	cmp	r3, #0
 8009060:	d014      	beq.n	800908c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00e      	beq.n	800908c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	6852      	ldr	r2, [r2, #4]
 800907a:	b2d2      	uxtb	r2, r2
 800907c:	4611      	mov	r1, r2
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	4798      	blx	r3
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d001      	beq.n	800908c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009088:	2303      	movs	r3, #3
 800908a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800908c:	2340      	movs	r3, #64	@ 0x40
 800908e:	2200      	movs	r2, #0
 8009090:	2100      	movs	r1, #0
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f001 fc61 	bl	800a95a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2240      	movs	r2, #64	@ 0x40
 80090a4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090a8:	2340      	movs	r3, #64	@ 0x40
 80090aa:	2200      	movs	r2, #0
 80090ac:	2180      	movs	r1, #128	@ 0x80
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f001 fc53 	bl	800a95a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2240      	movs	r2, #64	@ 0x40
 80090be:	621a      	str	r2, [r3, #32]

  return ret;
 80090c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80090ca:	b480      	push	{r7}
 80090cc:	b083      	sub	sp, #12
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	460b      	mov	r3, r1
 80090d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	78fa      	ldrb	r2, [r7, #3]
 80090da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	370c      	adds	r7, #12
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr

080090ea <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b04      	cmp	r3, #4
 80090fc:	d006      	beq.n	800910c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009104:	b2da      	uxtb	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2204      	movs	r2, #4
 8009110:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	370c      	adds	r7, #12
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr

08009122 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009122:	b480      	push	{r7}
 8009124:	b083      	sub	sp, #12
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b04      	cmp	r3, #4
 8009134:	d106      	bne.n	8009144 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800913c:	b2da      	uxtb	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	370c      	adds	r7, #12
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b082      	sub	sp, #8
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b03      	cmp	r3, #3
 8009164:	d110      	bne.n	8009188 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00b      	beq.n	8009188 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009176:	69db      	ldr	r3, [r3, #28]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d005      	beq.n	8009188 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009182:	69db      	ldr	r3, [r3, #28]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b082      	sub	sp, #8
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	460b      	mov	r3, r1
 800919c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	32ae      	adds	r2, #174	@ 0xae
 80091a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80091b0:	2303      	movs	r3, #3
 80091b2:	e01c      	b.n	80091ee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	2b03      	cmp	r3, #3
 80091be:	d115      	bne.n	80091ec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	32ae      	adds	r2, #174	@ 0xae
 80091ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ce:	6a1b      	ldr	r3, [r3, #32]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00b      	beq.n	80091ec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	32ae      	adds	r2, #174	@ 0xae
 80091de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e2:	6a1b      	ldr	r3, [r3, #32]
 80091e4:	78fa      	ldrb	r2, [r7, #3]
 80091e6:	4611      	mov	r1, r2
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b082      	sub	sp, #8
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
 80091fe:	460b      	mov	r3, r1
 8009200:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	32ae      	adds	r2, #174	@ 0xae
 800920c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d101      	bne.n	8009218 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009214:	2303      	movs	r3, #3
 8009216:	e01c      	b.n	8009252 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b03      	cmp	r3, #3
 8009222:	d115      	bne.n	8009250 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	32ae      	adds	r2, #174	@ 0xae
 800922e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00b      	beq.n	8009250 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	32ae      	adds	r2, #174	@ 0xae
 8009242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009248:	78fa      	ldrb	r2, [r7, #3]
 800924a:	4611      	mov	r1, r2
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800925a:	b480      	push	{r7}
 800925c:	b083      	sub	sp, #12
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009278:	2300      	movs	r3, #0
 800927a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00e      	beq.n	80092ac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	6852      	ldr	r2, [r2, #4]
 800929a:	b2d2      	uxtb	r2, r2
 800929c:	4611      	mov	r1, r2
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	4798      	blx	r3
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80092a8:	2303      	movs	r3, #3
 80092aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b083      	sub	sp, #12
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	460b      	mov	r3, r1
 80092c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80092c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	460b      	mov	r3, r1
 80092da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80092dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80092de:	4618      	mov	r0, r3
 80092e0:	370c      	adds	r7, #12
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr

080092ea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b086      	sub	sp, #24
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
 80092f2:	460b      	mov	r3, r1
 80092f4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80092fe:	2300      	movs	r3, #0
 8009300:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	885b      	ldrh	r3, [r3, #2]
 8009306:	b29b      	uxth	r3, r3
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	7812      	ldrb	r2, [r2, #0]
 800930c:	4293      	cmp	r3, r2
 800930e:	d91f      	bls.n	8009350 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009316:	e013      	b.n	8009340 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009318:	f107 030a 	add.w	r3, r7, #10
 800931c:	4619      	mov	r1, r3
 800931e:	6978      	ldr	r0, [r7, #20]
 8009320:	f000 f81b 	bl	800935a <USBD_GetNextDesc>
 8009324:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	785b      	ldrb	r3, [r3, #1]
 800932a:	2b05      	cmp	r3, #5
 800932c:	d108      	bne.n	8009340 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	789b      	ldrb	r3, [r3, #2]
 8009336:	78fa      	ldrb	r2, [r7, #3]
 8009338:	429a      	cmp	r2, r3
 800933a:	d008      	beq.n	800934e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800933c:	2300      	movs	r3, #0
 800933e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	885b      	ldrh	r3, [r3, #2]
 8009344:	b29a      	uxth	r2, r3
 8009346:	897b      	ldrh	r3, [r7, #10]
 8009348:	429a      	cmp	r2, r3
 800934a:	d8e5      	bhi.n	8009318 <USBD_GetEpDesc+0x2e>
 800934c:	e000      	b.n	8009350 <USBD_GetEpDesc+0x66>
          break;
 800934e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009350:	693b      	ldr	r3, [r7, #16]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3718      	adds	r7, #24
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800935a:	b480      	push	{r7}
 800935c:	b085      	sub	sp, #20
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	881b      	ldrh	r3, [r3, #0]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	7812      	ldrb	r2, [r2, #0]
 8009370:	4413      	add	r3, r2
 8009372:	b29a      	uxth	r2, r3
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	461a      	mov	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4413      	add	r3, r2
 8009382:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009384:	68fb      	ldr	r3, [r7, #12]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009392:	b480      	push	{r7}
 8009394:	b087      	sub	sp, #28
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	3301      	adds	r3, #1
 80093a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80093b0:	8a3b      	ldrh	r3, [r7, #16]
 80093b2:	021b      	lsls	r3, r3, #8
 80093b4:	b21a      	sxth	r2, r3
 80093b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	b21b      	sxth	r3, r3
 80093be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80093c0:	89fb      	ldrh	r3, [r7, #14]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	371c      	adds	r7, #28
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr
	...

080093d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093e6:	2b40      	cmp	r3, #64	@ 0x40
 80093e8:	d005      	beq.n	80093f6 <USBD_StdDevReq+0x26>
 80093ea:	2b40      	cmp	r3, #64	@ 0x40
 80093ec:	d857      	bhi.n	800949e <USBD_StdDevReq+0xce>
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00f      	beq.n	8009412 <USBD_StdDevReq+0x42>
 80093f2:	2b20      	cmp	r3, #32
 80093f4:	d153      	bne.n	800949e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	32ae      	adds	r2, #174	@ 0xae
 8009400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	4798      	blx	r3
 800940c:	4603      	mov	r3, r0
 800940e:	73fb      	strb	r3, [r7, #15]
      break;
 8009410:	e04a      	b.n	80094a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	785b      	ldrb	r3, [r3, #1]
 8009416:	2b09      	cmp	r3, #9
 8009418:	d83b      	bhi.n	8009492 <USBD_StdDevReq+0xc2>
 800941a:	a201      	add	r2, pc, #4	@ (adr r2, 8009420 <USBD_StdDevReq+0x50>)
 800941c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009420:	08009475 	.word	0x08009475
 8009424:	08009489 	.word	0x08009489
 8009428:	08009493 	.word	0x08009493
 800942c:	0800947f 	.word	0x0800947f
 8009430:	08009493 	.word	0x08009493
 8009434:	08009453 	.word	0x08009453
 8009438:	08009449 	.word	0x08009449
 800943c:	08009493 	.word	0x08009493
 8009440:	0800946b 	.word	0x0800946b
 8009444:	0800945d 	.word	0x0800945d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fa3c 	bl	80098c8 <USBD_GetDescriptor>
          break;
 8009450:	e024      	b.n	800949c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fbcb 	bl	8009bf0 <USBD_SetAddress>
          break;
 800945a:	e01f      	b.n	800949c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800945c:	6839      	ldr	r1, [r7, #0]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fc0a 	bl	8009c78 <USBD_SetConfig>
 8009464:	4603      	mov	r3, r0
 8009466:	73fb      	strb	r3, [r7, #15]
          break;
 8009468:	e018      	b.n	800949c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fcad 	bl	8009dcc <USBD_GetConfig>
          break;
 8009472:	e013      	b.n	800949c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009474:	6839      	ldr	r1, [r7, #0]
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fcde 	bl	8009e38 <USBD_GetStatus>
          break;
 800947c:	e00e      	b.n	800949c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fd0d 	bl	8009ea0 <USBD_SetFeature>
          break;
 8009486:	e009      	b.n	800949c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fd31 	bl	8009ef2 <USBD_ClrFeature>
          break;
 8009490:	e004      	b.n	800949c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fd88 	bl	8009faa <USBD_CtlError>
          break;
 800949a:	bf00      	nop
      }
      break;
 800949c:	e004      	b.n	80094a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800949e:	6839      	ldr	r1, [r7, #0]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 fd82 	bl	8009faa <USBD_CtlError>
      break;
 80094a6:	bf00      	nop
  }

  return ret;
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop

080094b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094ca:	2b40      	cmp	r3, #64	@ 0x40
 80094cc:	d005      	beq.n	80094da <USBD_StdItfReq+0x26>
 80094ce:	2b40      	cmp	r3, #64	@ 0x40
 80094d0:	d852      	bhi.n	8009578 <USBD_StdItfReq+0xc4>
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d001      	beq.n	80094da <USBD_StdItfReq+0x26>
 80094d6:	2b20      	cmp	r3, #32
 80094d8:	d14e      	bne.n	8009578 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	3b01      	subs	r3, #1
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d840      	bhi.n	800956a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	889b      	ldrh	r3, [r3, #4]
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d836      	bhi.n	8009560 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	889b      	ldrh	r3, [r3, #4]
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7ff fedb 	bl	80092b6 <USBD_CoreFindIF>
 8009500:	4603      	mov	r3, r0
 8009502:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009504:	7bbb      	ldrb	r3, [r7, #14]
 8009506:	2bff      	cmp	r3, #255	@ 0xff
 8009508:	d01d      	beq.n	8009546 <USBD_StdItfReq+0x92>
 800950a:	7bbb      	ldrb	r3, [r7, #14]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d11a      	bne.n	8009546 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009510:	7bba      	ldrb	r2, [r7, #14]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	32ae      	adds	r2, #174	@ 0xae
 8009516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00f      	beq.n	8009540 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009520:	7bba      	ldrb	r2, [r7, #14]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009528:	7bba      	ldrb	r2, [r7, #14]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	32ae      	adds	r2, #174	@ 0xae
 800952e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	4798      	blx	r3
 800953a:	4603      	mov	r3, r0
 800953c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800953e:	e004      	b.n	800954a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009540:	2303      	movs	r3, #3
 8009542:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009544:	e001      	b.n	800954a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009546:	2303      	movs	r3, #3
 8009548:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	88db      	ldrh	r3, [r3, #6]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d110      	bne.n	8009574 <USBD_StdItfReq+0xc0>
 8009552:	7bfb      	ldrb	r3, [r7, #15]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10d      	bne.n	8009574 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fdfd 	bl	800a158 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800955e:	e009      	b.n	8009574 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fd21 	bl	8009faa <USBD_CtlError>
          break;
 8009568:	e004      	b.n	8009574 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fd1c 	bl	8009faa <USBD_CtlError>
          break;
 8009572:	e000      	b.n	8009576 <USBD_StdItfReq+0xc2>
          break;
 8009574:	bf00      	nop
      }
      break;
 8009576:	e004      	b.n	8009582 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fd15 	bl	8009faa <USBD_CtlError>
      break;
 8009580:	bf00      	nop
  }

  return ret;
 8009582:	7bfb      	ldrb	r3, [r7, #15]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	889b      	ldrh	r3, [r3, #4]
 800959e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80095a8:	2b40      	cmp	r3, #64	@ 0x40
 80095aa:	d007      	beq.n	80095bc <USBD_StdEPReq+0x30>
 80095ac:	2b40      	cmp	r3, #64	@ 0x40
 80095ae:	f200 817f 	bhi.w	80098b0 <USBD_StdEPReq+0x324>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d02a      	beq.n	800960c <USBD_StdEPReq+0x80>
 80095b6:	2b20      	cmp	r3, #32
 80095b8:	f040 817a 	bne.w	80098b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80095bc:	7bbb      	ldrb	r3, [r7, #14]
 80095be:	4619      	mov	r1, r3
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7ff fe85 	bl	80092d0 <USBD_CoreFindEP>
 80095c6:	4603      	mov	r3, r0
 80095c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095ca:	7b7b      	ldrb	r3, [r7, #13]
 80095cc:	2bff      	cmp	r3, #255	@ 0xff
 80095ce:	f000 8174 	beq.w	80098ba <USBD_StdEPReq+0x32e>
 80095d2:	7b7b      	ldrb	r3, [r7, #13]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f040 8170 	bne.w	80098ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80095da:	7b7a      	ldrb	r2, [r7, #13]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80095e2:	7b7a      	ldrb	r2, [r7, #13]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	32ae      	adds	r2, #174	@ 0xae
 80095e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f000 8163 	beq.w	80098ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80095f4:	7b7a      	ldrb	r2, [r7, #13]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	32ae      	adds	r2, #174	@ 0xae
 80095fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	4798      	blx	r3
 8009606:	4603      	mov	r3, r0
 8009608:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800960a:	e156      	b.n	80098ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	785b      	ldrb	r3, [r3, #1]
 8009610:	2b03      	cmp	r3, #3
 8009612:	d008      	beq.n	8009626 <USBD_StdEPReq+0x9a>
 8009614:	2b03      	cmp	r3, #3
 8009616:	f300 8145 	bgt.w	80098a4 <USBD_StdEPReq+0x318>
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 809b 	beq.w	8009756 <USBD_StdEPReq+0x1ca>
 8009620:	2b01      	cmp	r3, #1
 8009622:	d03c      	beq.n	800969e <USBD_StdEPReq+0x112>
 8009624:	e13e      	b.n	80098a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800962c:	b2db      	uxtb	r3, r3
 800962e:	2b02      	cmp	r3, #2
 8009630:	d002      	beq.n	8009638 <USBD_StdEPReq+0xac>
 8009632:	2b03      	cmp	r3, #3
 8009634:	d016      	beq.n	8009664 <USBD_StdEPReq+0xd8>
 8009636:	e02c      	b.n	8009692 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009638:	7bbb      	ldrb	r3, [r7, #14]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00d      	beq.n	800965a <USBD_StdEPReq+0xce>
 800963e:	7bbb      	ldrb	r3, [r7, #14]
 8009640:	2b80      	cmp	r3, #128	@ 0x80
 8009642:	d00a      	beq.n	800965a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009644:	7bbb      	ldrb	r3, [r7, #14]
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f001 f9cb 	bl	800a9e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800964e:	2180      	movs	r1, #128	@ 0x80
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f001 f9c7 	bl	800a9e4 <USBD_LL_StallEP>
 8009656:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009658:	e020      	b.n	800969c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fca4 	bl	8009faa <USBD_CtlError>
              break;
 8009662:	e01b      	b.n	800969c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	885b      	ldrh	r3, [r3, #2]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10e      	bne.n	800968a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800966c:	7bbb      	ldrb	r3, [r7, #14]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00b      	beq.n	800968a <USBD_StdEPReq+0xfe>
 8009672:	7bbb      	ldrb	r3, [r7, #14]
 8009674:	2b80      	cmp	r3, #128	@ 0x80
 8009676:	d008      	beq.n	800968a <USBD_StdEPReq+0xfe>
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	88db      	ldrh	r3, [r3, #6]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d104      	bne.n	800968a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009680:	7bbb      	ldrb	r3, [r7, #14]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f001 f9ad 	bl	800a9e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fd64 	bl	800a158 <USBD_CtlSendStatus>

              break;
 8009690:	e004      	b.n	800969c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fc88 	bl	8009faa <USBD_CtlError>
              break;
 800969a:	bf00      	nop
          }
          break;
 800969c:	e107      	b.n	80098ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d002      	beq.n	80096b0 <USBD_StdEPReq+0x124>
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d016      	beq.n	80096dc <USBD_StdEPReq+0x150>
 80096ae:	e04b      	b.n	8009748 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096b0:	7bbb      	ldrb	r3, [r7, #14]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00d      	beq.n	80096d2 <USBD_StdEPReq+0x146>
 80096b6:	7bbb      	ldrb	r3, [r7, #14]
 80096b8:	2b80      	cmp	r3, #128	@ 0x80
 80096ba:	d00a      	beq.n	80096d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	4619      	mov	r1, r3
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f001 f98f 	bl	800a9e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096c6:	2180      	movs	r1, #128	@ 0x80
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f001 f98b 	bl	800a9e4 <USBD_LL_StallEP>
 80096ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096d0:	e040      	b.n	8009754 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fc68 	bl	8009faa <USBD_CtlError>
              break;
 80096da:	e03b      	b.n	8009754 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	885b      	ldrh	r3, [r3, #2]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d136      	bne.n	8009752 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80096e4:	7bbb      	ldrb	r3, [r7, #14]
 80096e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d004      	beq.n	80096f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80096ee:	7bbb      	ldrb	r3, [r7, #14]
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f001 f995 	bl	800aa22 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fd2d 	bl	800a158 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80096fe:	7bbb      	ldrb	r3, [r7, #14]
 8009700:	4619      	mov	r1, r3
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7ff fde4 	bl	80092d0 <USBD_CoreFindEP>
 8009708:	4603      	mov	r3, r0
 800970a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800970c:	7b7b      	ldrb	r3, [r7, #13]
 800970e:	2bff      	cmp	r3, #255	@ 0xff
 8009710:	d01f      	beq.n	8009752 <USBD_StdEPReq+0x1c6>
 8009712:	7b7b      	ldrb	r3, [r7, #13]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d11c      	bne.n	8009752 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009718:	7b7a      	ldrb	r2, [r7, #13]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009720:	7b7a      	ldrb	r2, [r7, #13]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	32ae      	adds	r2, #174	@ 0xae
 8009726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d010      	beq.n	8009752 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009730:	7b7a      	ldrb	r2, [r7, #13]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	32ae      	adds	r2, #174	@ 0xae
 8009736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	4798      	blx	r3
 8009742:	4603      	mov	r3, r0
 8009744:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009746:	e004      	b.n	8009752 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fc2d 	bl	8009faa <USBD_CtlError>
              break;
 8009750:	e000      	b.n	8009754 <USBD_StdEPReq+0x1c8>
              break;
 8009752:	bf00      	nop
          }
          break;
 8009754:	e0ab      	b.n	80098ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b02      	cmp	r3, #2
 8009760:	d002      	beq.n	8009768 <USBD_StdEPReq+0x1dc>
 8009762:	2b03      	cmp	r3, #3
 8009764:	d032      	beq.n	80097cc <USBD_StdEPReq+0x240>
 8009766:	e097      	b.n	8009898 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009768:	7bbb      	ldrb	r3, [r7, #14]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d007      	beq.n	800977e <USBD_StdEPReq+0x1f2>
 800976e:	7bbb      	ldrb	r3, [r7, #14]
 8009770:	2b80      	cmp	r3, #128	@ 0x80
 8009772:	d004      	beq.n	800977e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fc17 	bl	8009faa <USBD_CtlError>
                break;
 800977c:	e091      	b.n	80098a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800977e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009782:	2b00      	cmp	r3, #0
 8009784:	da0b      	bge.n	800979e <USBD_StdEPReq+0x212>
 8009786:	7bbb      	ldrb	r3, [r7, #14]
 8009788:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800978c:	4613      	mov	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	3310      	adds	r3, #16
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	4413      	add	r3, r2
 800979a:	3304      	adds	r3, #4
 800979c:	e00b      	b.n	80097b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800979e:	7bbb      	ldrb	r3, [r7, #14]
 80097a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097a4:	4613      	mov	r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4413      	add	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	4413      	add	r3, r2
 80097b4:	3304      	adds	r3, #4
 80097b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	2200      	movs	r2, #0
 80097bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2202      	movs	r2, #2
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fc6d 	bl	800a0a4 <USBD_CtlSendData>
              break;
 80097ca:	e06a      	b.n	80098a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80097cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	da11      	bge.n	80097f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80097d4:	7bbb      	ldrb	r3, [r7, #14]
 80097d6:	f003 020f 	and.w	r2, r3, #15
 80097da:	6879      	ldr	r1, [r7, #4]
 80097dc:	4613      	mov	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	440b      	add	r3, r1
 80097e6:	3324      	adds	r3, #36	@ 0x24
 80097e8:	881b      	ldrh	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d117      	bne.n	800981e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fbda 	bl	8009faa <USBD_CtlError>
                  break;
 80097f6:	e054      	b.n	80098a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80097f8:	7bbb      	ldrb	r3, [r7, #14]
 80097fa:	f003 020f 	and.w	r2, r3, #15
 80097fe:	6879      	ldr	r1, [r7, #4]
 8009800:	4613      	mov	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4413      	add	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	440b      	add	r3, r1
 800980a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800980e:	881b      	ldrh	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d104      	bne.n	800981e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fbc7 	bl	8009faa <USBD_CtlError>
                  break;
 800981c:	e041      	b.n	80098a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800981e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009822:	2b00      	cmp	r3, #0
 8009824:	da0b      	bge.n	800983e <USBD_StdEPReq+0x2b2>
 8009826:	7bbb      	ldrb	r3, [r7, #14]
 8009828:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800982c:	4613      	mov	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	3310      	adds	r3, #16
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	4413      	add	r3, r2
 800983a:	3304      	adds	r3, #4
 800983c:	e00b      	b.n	8009856 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800983e:	7bbb      	ldrb	r3, [r7, #14]
 8009840:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009844:	4613      	mov	r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4413      	add	r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	4413      	add	r3, r2
 8009854:	3304      	adds	r3, #4
 8009856:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009858:	7bbb      	ldrb	r3, [r7, #14]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d002      	beq.n	8009864 <USBD_StdEPReq+0x2d8>
 800985e:	7bbb      	ldrb	r3, [r7, #14]
 8009860:	2b80      	cmp	r3, #128	@ 0x80
 8009862:	d103      	bne.n	800986c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	2200      	movs	r2, #0
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	e00e      	b.n	800988a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800986c:	7bbb      	ldrb	r3, [r7, #14]
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f001 f8f5 	bl	800aa60 <USBD_LL_IsStallEP>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d003      	beq.n	8009884 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	2201      	movs	r2, #1
 8009880:	601a      	str	r2, [r3, #0]
 8009882:	e002      	b.n	800988a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	2200      	movs	r2, #0
 8009888:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	2202      	movs	r2, #2
 800988e:	4619      	mov	r1, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fc07 	bl	800a0a4 <USBD_CtlSendData>
              break;
 8009896:	e004      	b.n	80098a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 fb85 	bl	8009faa <USBD_CtlError>
              break;
 80098a0:	bf00      	nop
          }
          break;
 80098a2:	e004      	b.n	80098ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fb7f 	bl	8009faa <USBD_CtlError>
          break;
 80098ac:	bf00      	nop
      }
      break;
 80098ae:	e005      	b.n	80098bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80098b0:	6839      	ldr	r1, [r7, #0]
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fb79 	bl	8009faa <USBD_CtlError>
      break;
 80098b8:	e000      	b.n	80098bc <USBD_StdEPReq+0x330>
      break;
 80098ba:	bf00      	nop
  }

  return ret;
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
	...

080098c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80098d2:	2300      	movs	r3, #0
 80098d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80098d6:	2300      	movs	r3, #0
 80098d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80098da:	2300      	movs	r3, #0
 80098dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	885b      	ldrh	r3, [r3, #2]
 80098e2:	0a1b      	lsrs	r3, r3, #8
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	3b01      	subs	r3, #1
 80098e8:	2b0e      	cmp	r3, #14
 80098ea:	f200 8152 	bhi.w	8009b92 <USBD_GetDescriptor+0x2ca>
 80098ee:	a201      	add	r2, pc, #4	@ (adr r2, 80098f4 <USBD_GetDescriptor+0x2c>)
 80098f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f4:	08009965 	.word	0x08009965
 80098f8:	0800997d 	.word	0x0800997d
 80098fc:	080099bd 	.word	0x080099bd
 8009900:	08009b93 	.word	0x08009b93
 8009904:	08009b93 	.word	0x08009b93
 8009908:	08009b33 	.word	0x08009b33
 800990c:	08009b5f 	.word	0x08009b5f
 8009910:	08009b93 	.word	0x08009b93
 8009914:	08009b93 	.word	0x08009b93
 8009918:	08009b93 	.word	0x08009b93
 800991c:	08009b93 	.word	0x08009b93
 8009920:	08009b93 	.word	0x08009b93
 8009924:	08009b93 	.word	0x08009b93
 8009928:	08009b93 	.word	0x08009b93
 800992c:	08009931 	.word	0x08009931
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009936:	69db      	ldr	r3, [r3, #28]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d00b      	beq.n	8009954 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009942:	69db      	ldr	r3, [r3, #28]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	7c12      	ldrb	r2, [r2, #16]
 8009948:	f107 0108 	add.w	r1, r7, #8
 800994c:	4610      	mov	r0, r2
 800994e:	4798      	blx	r3
 8009950:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009952:	e126      	b.n	8009ba2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009954:	6839      	ldr	r1, [r7, #0]
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fb27 	bl	8009faa <USBD_CtlError>
        err++;
 800995c:	7afb      	ldrb	r3, [r7, #11]
 800995e:	3301      	adds	r3, #1
 8009960:	72fb      	strb	r3, [r7, #11]
      break;
 8009962:	e11e      	b.n	8009ba2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	7c12      	ldrb	r2, [r2, #16]
 8009970:	f107 0108 	add.w	r1, r7, #8
 8009974:	4610      	mov	r0, r2
 8009976:	4798      	blx	r3
 8009978:	60f8      	str	r0, [r7, #12]
      break;
 800997a:	e112      	b.n	8009ba2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	7c1b      	ldrb	r3, [r3, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10d      	bne.n	80099a0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800998a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800998c:	f107 0208 	add.w	r2, r7, #8
 8009990:	4610      	mov	r0, r2
 8009992:	4798      	blx	r3
 8009994:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	3301      	adds	r3, #1
 800999a:	2202      	movs	r2, #2
 800999c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800999e:	e100      	b.n	8009ba2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a8:	f107 0208 	add.w	r2, r7, #8
 80099ac:	4610      	mov	r0, r2
 80099ae:	4798      	blx	r3
 80099b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	3301      	adds	r3, #1
 80099b6:	2202      	movs	r2, #2
 80099b8:	701a      	strb	r2, [r3, #0]
      break;
 80099ba:	e0f2      	b.n	8009ba2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	885b      	ldrh	r3, [r3, #2]
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b05      	cmp	r3, #5
 80099c4:	f200 80ac 	bhi.w	8009b20 <USBD_GetDescriptor+0x258>
 80099c8:	a201      	add	r2, pc, #4	@ (adr r2, 80099d0 <USBD_GetDescriptor+0x108>)
 80099ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ce:	bf00      	nop
 80099d0:	080099e9 	.word	0x080099e9
 80099d4:	08009a1d 	.word	0x08009a1d
 80099d8:	08009a51 	.word	0x08009a51
 80099dc:	08009a85 	.word	0x08009a85
 80099e0:	08009ab9 	.word	0x08009ab9
 80099e4:	08009aed 	.word	0x08009aed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00b      	beq.n	8009a0c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	7c12      	ldrb	r2, [r2, #16]
 8009a00:	f107 0108 	add.w	r1, r7, #8
 8009a04:	4610      	mov	r0, r2
 8009a06:	4798      	blx	r3
 8009a08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a0a:	e091      	b.n	8009b30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a0c:	6839      	ldr	r1, [r7, #0]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 facb 	bl	8009faa <USBD_CtlError>
            err++;
 8009a14:	7afb      	ldrb	r3, [r7, #11]
 8009a16:	3301      	adds	r3, #1
 8009a18:	72fb      	strb	r3, [r7, #11]
          break;
 8009a1a:	e089      	b.n	8009b30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00b      	beq.n	8009a40 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	7c12      	ldrb	r2, [r2, #16]
 8009a34:	f107 0108 	add.w	r1, r7, #8
 8009a38:	4610      	mov	r0, r2
 8009a3a:	4798      	blx	r3
 8009a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a3e:	e077      	b.n	8009b30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fab1 	bl	8009faa <USBD_CtlError>
            err++;
 8009a48:	7afb      	ldrb	r3, [r7, #11]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a4e:	e06f      	b.n	8009b30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00b      	beq.n	8009a74 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	7c12      	ldrb	r2, [r2, #16]
 8009a68:	f107 0108 	add.w	r1, r7, #8
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	4798      	blx	r3
 8009a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a72:	e05d      	b.n	8009b30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fa97 	bl	8009faa <USBD_CtlError>
            err++;
 8009a7c:	7afb      	ldrb	r3, [r7, #11]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	72fb      	strb	r3, [r7, #11]
          break;
 8009a82:	e055      	b.n	8009b30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00b      	beq.n	8009aa8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	7c12      	ldrb	r2, [r2, #16]
 8009a9c:	f107 0108 	add.w	r1, r7, #8
 8009aa0:	4610      	mov	r0, r2
 8009aa2:	4798      	blx	r3
 8009aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aa6:	e043      	b.n	8009b30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fa7d 	bl	8009faa <USBD_CtlError>
            err++;
 8009ab0:	7afb      	ldrb	r3, [r7, #11]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ab6:	e03b      	b.n	8009b30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009abe:	695b      	ldr	r3, [r3, #20]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00b      	beq.n	8009adc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aca:	695b      	ldr	r3, [r3, #20]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	7c12      	ldrb	r2, [r2, #16]
 8009ad0:	f107 0108 	add.w	r1, r7, #8
 8009ad4:	4610      	mov	r0, r2
 8009ad6:	4798      	blx	r3
 8009ad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ada:	e029      	b.n	8009b30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fa63 	bl	8009faa <USBD_CtlError>
            err++;
 8009ae4:	7afb      	ldrb	r3, [r7, #11]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	72fb      	strb	r3, [r7, #11]
          break;
 8009aea:	e021      	b.n	8009b30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00b      	beq.n	8009b10 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	7c12      	ldrb	r2, [r2, #16]
 8009b04:	f107 0108 	add.w	r1, r7, #8
 8009b08:	4610      	mov	r0, r2
 8009b0a:	4798      	blx	r3
 8009b0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b0e:	e00f      	b.n	8009b30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fa49 	bl	8009faa <USBD_CtlError>
            err++;
 8009b18:	7afb      	ldrb	r3, [r7, #11]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b1e:	e007      	b.n	8009b30 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fa41 	bl	8009faa <USBD_CtlError>
          err++;
 8009b28:	7afb      	ldrb	r3, [r7, #11]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009b2e:	bf00      	nop
      }
      break;
 8009b30:	e037      	b.n	8009ba2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	7c1b      	ldrb	r3, [r3, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d109      	bne.n	8009b4e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b42:	f107 0208 	add.w	r2, r7, #8
 8009b46:	4610      	mov	r0, r2
 8009b48:	4798      	blx	r3
 8009b4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b4c:	e029      	b.n	8009ba2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 fa2a 	bl	8009faa <USBD_CtlError>
        err++;
 8009b56:	7afb      	ldrb	r3, [r7, #11]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b5c:	e021      	b.n	8009ba2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	7c1b      	ldrb	r3, [r3, #16]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d10d      	bne.n	8009b82 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b6e:	f107 0208 	add.w	r2, r7, #8
 8009b72:	4610      	mov	r0, r2
 8009b74:	4798      	blx	r3
 8009b76:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	2207      	movs	r2, #7
 8009b7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b80:	e00f      	b.n	8009ba2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fa10 	bl	8009faa <USBD_CtlError>
        err++;
 8009b8a:	7afb      	ldrb	r3, [r7, #11]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	72fb      	strb	r3, [r7, #11]
      break;
 8009b90:	e007      	b.n	8009ba2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009b92:	6839      	ldr	r1, [r7, #0]
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 fa08 	bl	8009faa <USBD_CtlError>
      err++;
 8009b9a:	7afb      	ldrb	r3, [r7, #11]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	72fb      	strb	r3, [r7, #11]
      break;
 8009ba0:	bf00      	nop
  }

  if (err != 0U)
 8009ba2:	7afb      	ldrb	r3, [r7, #11]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d11e      	bne.n	8009be6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	88db      	ldrh	r3, [r3, #6]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d016      	beq.n	8009bde <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009bb0:	893b      	ldrh	r3, [r7, #8]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00e      	beq.n	8009bd4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	88da      	ldrh	r2, [r3, #6]
 8009bba:	893b      	ldrh	r3, [r7, #8]
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	bf28      	it	cs
 8009bc0:	4613      	movcs	r3, r2
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009bc6:	893b      	ldrh	r3, [r7, #8]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	68f9      	ldr	r1, [r7, #12]
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 fa69 	bl	800a0a4 <USBD_CtlSendData>
 8009bd2:	e009      	b.n	8009be8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009bd4:	6839      	ldr	r1, [r7, #0]
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f9e7 	bl	8009faa <USBD_CtlError>
 8009bdc:	e004      	b.n	8009be8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 faba 	bl	800a158 <USBD_CtlSendStatus>
 8009be4:	e000      	b.n	8009be8 <USBD_GetDescriptor+0x320>
    return;
 8009be6:	bf00      	nop
  }
}
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop

08009bf0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	889b      	ldrh	r3, [r3, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d131      	bne.n	8009c66 <USBD_SetAddress+0x76>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	88db      	ldrh	r3, [r3, #6]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d12d      	bne.n	8009c66 <USBD_SetAddress+0x76>
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	885b      	ldrh	r3, [r3, #2]
 8009c0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c10:	d829      	bhi.n	8009c66 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	885b      	ldrh	r3, [r3, #2]
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	2b03      	cmp	r3, #3
 8009c28:	d104      	bne.n	8009c34 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009c2a:	6839      	ldr	r1, [r7, #0]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f9bc 	bl	8009faa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c32:	e01d      	b.n	8009c70 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	7bfa      	ldrb	r2, [r7, #15]
 8009c38:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c3c:	7bfb      	ldrb	r3, [r7, #15]
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 ff39 	bl	800aab8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fa86 	bl	800a158 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c4c:	7bfb      	ldrb	r3, [r7, #15]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d004      	beq.n	8009c5c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2202      	movs	r2, #2
 8009c56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c5a:	e009      	b.n	8009c70 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c64:	e004      	b.n	8009c70 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c66:	6839      	ldr	r1, [r7, #0]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 f99e 	bl	8009faa <USBD_CtlError>
  }
}
 8009c6e:	bf00      	nop
 8009c70:	bf00      	nop
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c82:	2300      	movs	r3, #0
 8009c84:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	885b      	ldrh	r3, [r3, #2]
 8009c8a:	b2da      	uxtb	r2, r3
 8009c8c:	4b4e      	ldr	r3, [pc, #312]	@ (8009dc8 <USBD_SetConfig+0x150>)
 8009c8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c90:	4b4d      	ldr	r3, [pc, #308]	@ (8009dc8 <USBD_SetConfig+0x150>)
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d905      	bls.n	8009ca4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009c98:	6839      	ldr	r1, [r7, #0]
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f985 	bl	8009faa <USBD_CtlError>
    return USBD_FAIL;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	e08c      	b.n	8009dbe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d002      	beq.n	8009cb6 <USBD_SetConfig+0x3e>
 8009cb0:	2b03      	cmp	r3, #3
 8009cb2:	d029      	beq.n	8009d08 <USBD_SetConfig+0x90>
 8009cb4:	e075      	b.n	8009da2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009cb6:	4b44      	ldr	r3, [pc, #272]	@ (8009dc8 <USBD_SetConfig+0x150>)
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d020      	beq.n	8009d00 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009cbe:	4b42      	ldr	r3, [pc, #264]	@ (8009dc8 <USBD_SetConfig+0x150>)
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8009dc8 <USBD_SetConfig+0x150>)
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	4619      	mov	r1, r3
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f7fe ffb9 	bl	8008c46 <USBD_SetClassConfig>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d008      	beq.n	8009cf0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009cde:	6839      	ldr	r1, [r7, #0]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f962 	bl	8009faa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2202      	movs	r2, #2
 8009cea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009cee:	e065      	b.n	8009dbc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fa31 	bl	800a158 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2203      	movs	r2, #3
 8009cfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009cfe:	e05d      	b.n	8009dbc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fa29 	bl	800a158 <USBD_CtlSendStatus>
      break;
 8009d06:	e059      	b.n	8009dbc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009d08:	4b2f      	ldr	r3, [pc, #188]	@ (8009dc8 <USBD_SetConfig+0x150>)
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d112      	bne.n	8009d36 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2202      	movs	r2, #2
 8009d14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009d18:	4b2b      	ldr	r3, [pc, #172]	@ (8009dc8 <USBD_SetConfig+0x150>)
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d22:	4b29      	ldr	r3, [pc, #164]	@ (8009dc8 <USBD_SetConfig+0x150>)
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	4619      	mov	r1, r3
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f7fe ffa8 	bl	8008c7e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fa12 	bl	800a158 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d34:	e042      	b.n	8009dbc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009d36:	4b24      	ldr	r3, [pc, #144]	@ (8009dc8 <USBD_SetConfig+0x150>)
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d02a      	beq.n	8009d9a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f7fe ff96 	bl	8008c7e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d52:	4b1d      	ldr	r3, [pc, #116]	@ (8009dc8 <USBD_SetConfig+0x150>)
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	461a      	mov	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8009dc8 <USBD_SetConfig+0x150>)
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7fe ff6f 	bl	8008c46 <USBD_SetClassConfig>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00f      	beq.n	8009d92 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009d72:	6839      	ldr	r1, [r7, #0]
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 f918 	bl	8009faa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	4619      	mov	r1, r3
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7fe ff7b 	bl	8008c7e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2202      	movs	r2, #2
 8009d8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009d90:	e014      	b.n	8009dbc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f9e0 	bl	800a158 <USBD_CtlSendStatus>
      break;
 8009d98:	e010      	b.n	8009dbc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f9dc 	bl	800a158 <USBD_CtlSendStatus>
      break;
 8009da0:	e00c      	b.n	8009dbc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009da2:	6839      	ldr	r1, [r7, #0]
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f900 	bl	8009faa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009daa:	4b07      	ldr	r3, [pc, #28]	@ (8009dc8 <USBD_SetConfig+0x150>)
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f7fe ff64 	bl	8008c7e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009db6:	2303      	movs	r3, #3
 8009db8:	73fb      	strb	r3, [r7, #15]
      break;
 8009dba:	bf00      	nop
  }

  return ret;
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	200003b8 	.word	0x200003b8

08009dcc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	88db      	ldrh	r3, [r3, #6]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d004      	beq.n	8009de8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009dde:	6839      	ldr	r1, [r7, #0]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f8e2 	bl	8009faa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009de6:	e023      	b.n	8009e30 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	dc02      	bgt.n	8009dfa <USBD_GetConfig+0x2e>
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	dc03      	bgt.n	8009e00 <USBD_GetConfig+0x34>
 8009df8:	e015      	b.n	8009e26 <USBD_GetConfig+0x5a>
 8009dfa:	2b03      	cmp	r3, #3
 8009dfc:	d00b      	beq.n	8009e16 <USBD_GetConfig+0x4a>
 8009dfe:	e012      	b.n	8009e26 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	3308      	adds	r3, #8
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f948 	bl	800a0a4 <USBD_CtlSendData>
        break;
 8009e14:	e00c      	b.n	8009e30 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	3304      	adds	r3, #4
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f940 	bl	800a0a4 <USBD_CtlSendData>
        break;
 8009e24:	e004      	b.n	8009e30 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f8be 	bl	8009faa <USBD_CtlError>
        break;
 8009e2e:	bf00      	nop
}
 8009e30:	bf00      	nop
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d81e      	bhi.n	8009e8e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	88db      	ldrh	r3, [r3, #6]
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d004      	beq.n	8009e62 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e58:	6839      	ldr	r1, [r7, #0]
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 f8a5 	bl	8009faa <USBD_CtlError>
        break;
 8009e60:	e01a      	b.n	8009e98 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d005      	beq.n	8009e7e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	f043 0202 	orr.w	r2, r3, #2
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	330c      	adds	r3, #12
 8009e82:	2202      	movs	r2, #2
 8009e84:	4619      	mov	r1, r3
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f90c 	bl	800a0a4 <USBD_CtlSendData>
      break;
 8009e8c:	e004      	b.n	8009e98 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 f88a 	bl	8009faa <USBD_CtlError>
      break;
 8009e96:	bf00      	nop
  }
}
 8009e98:	bf00      	nop
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	885b      	ldrh	r3, [r3, #2]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d107      	bne.n	8009ec2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f94c 	bl	800a158 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009ec0:	e013      	b.n	8009eea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	885b      	ldrh	r3, [r3, #2]
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d10b      	bne.n	8009ee2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	889b      	ldrh	r3, [r3, #4]
 8009ece:	0a1b      	lsrs	r3, r3, #8
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f93c 	bl	800a158 <USBD_CtlSendStatus>
}
 8009ee0:	e003      	b.n	8009eea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f860 	bl	8009faa <USBD_CtlError>
}
 8009eea:	bf00      	nop
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b082      	sub	sp, #8
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	3b01      	subs	r3, #1
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	d80b      	bhi.n	8009f22 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	885b      	ldrh	r3, [r3, #2]
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d10c      	bne.n	8009f2c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f91c 	bl	800a158 <USBD_CtlSendStatus>
      }
      break;
 8009f20:	e004      	b.n	8009f2c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f22:	6839      	ldr	r1, [r7, #0]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f840 	bl	8009faa <USBD_CtlError>
      break;
 8009f2a:	e000      	b.n	8009f2e <USBD_ClrFeature+0x3c>
      break;
 8009f2c:	bf00      	nop
  }
}
 8009f2e:	bf00      	nop
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b084      	sub	sp, #16
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	781a      	ldrb	r2, [r3, #0]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	781a      	ldrb	r2, [r3, #0]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f7ff fa16 	bl	8009392 <SWAPBYTE>
 8009f66:	4603      	mov	r3, r0
 8009f68:	461a      	mov	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	3301      	adds	r3, #1
 8009f72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	3301      	adds	r3, #1
 8009f78:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f7ff fa09 	bl	8009392 <SWAPBYTE>
 8009f80:	4603      	mov	r3, r0
 8009f82:	461a      	mov	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3301      	adds	r3, #1
 8009f92:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f7ff f9fc 	bl	8009392 <SWAPBYTE>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	80da      	strh	r2, [r3, #6]
}
 8009fa2:	bf00      	nop
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b082      	sub	sp, #8
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fb4:	2180      	movs	r1, #128	@ 0x80
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fd14 	bl	800a9e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 fd10 	bl	800a9e4 <USBD_LL_StallEP>
}
 8009fc4:	bf00      	nop
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d042      	beq.n	800a068 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009fe6:	6938      	ldr	r0, [r7, #16]
 8009fe8:	f000 f842 	bl	800a070 <USBD_GetLen>
 8009fec:	4603      	mov	r3, r0
 8009fee:	3301      	adds	r3, #1
 8009ff0:	005b      	lsls	r3, r3, #1
 8009ff2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ff6:	d808      	bhi.n	800a00a <USBD_GetString+0x3e>
 8009ff8:	6938      	ldr	r0, [r7, #16]
 8009ffa:	f000 f839 	bl	800a070 <USBD_GetLen>
 8009ffe:	4603      	mov	r3, r0
 800a000:	3301      	adds	r3, #1
 800a002:	b29b      	uxth	r3, r3
 800a004:	005b      	lsls	r3, r3, #1
 800a006:	b29a      	uxth	r2, r3
 800a008:	e001      	b.n	800a00e <USBD_GetString+0x42>
 800a00a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a012:	7dfb      	ldrb	r3, [r7, #23]
 800a014:	68ba      	ldr	r2, [r7, #8]
 800a016:	4413      	add	r3, r2
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	7812      	ldrb	r2, [r2, #0]
 800a01c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
 800a020:	3301      	adds	r3, #1
 800a022:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a024:	7dfb      	ldrb	r3, [r7, #23]
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	4413      	add	r3, r2
 800a02a:	2203      	movs	r2, #3
 800a02c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a02e:	7dfb      	ldrb	r3, [r7, #23]
 800a030:	3301      	adds	r3, #1
 800a032:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a034:	e013      	b.n	800a05e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a036:	7dfb      	ldrb	r3, [r7, #23]
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	4413      	add	r3, r2
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	7812      	ldrb	r2, [r2, #0]
 800a040:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	3301      	adds	r3, #1
 800a046:	613b      	str	r3, [r7, #16]
    idx++;
 800a048:	7dfb      	ldrb	r3, [r7, #23]
 800a04a:	3301      	adds	r3, #1
 800a04c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a04e:	7dfb      	ldrb	r3, [r7, #23]
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	4413      	add	r3, r2
 800a054:	2200      	movs	r2, #0
 800a056:	701a      	strb	r2, [r3, #0]
    idx++;
 800a058:	7dfb      	ldrb	r3, [r7, #23]
 800a05a:	3301      	adds	r3, #1
 800a05c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1e7      	bne.n	800a036 <USBD_GetString+0x6a>
 800a066:	e000      	b.n	800a06a <USBD_GetString+0x9e>
    return;
 800a068:	bf00      	nop
  }
}
 800a06a:	3718      	adds	r7, #24
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a078:	2300      	movs	r3, #0
 800a07a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a080:	e005      	b.n	800a08e <USBD_GetLen+0x1e>
  {
    len++;
 800a082:	7bfb      	ldrb	r3, [r7, #15]
 800a084:	3301      	adds	r3, #1
 800a086:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	3301      	adds	r3, #1
 800a08c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1f5      	bne.n	800a082 <USBD_GetLen+0x12>
  }

  return len;
 800a096:	7bfb      	ldrb	r3, [r7, #15]
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3714      	adds	r7, #20
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2202      	movs	r2, #2
 800a0b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	68ba      	ldr	r2, [r7, #8]
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f000 fd13 	bl	800aaf6 <USBD_LL_Transmit>

  return USBD_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b084      	sub	sp, #16
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	60f8      	str	r0, [r7, #12]
 800a0e2:	60b9      	str	r1, [r7, #8]
 800a0e4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f000 fd02 	bl	800aaf6 <USBD_LL_Transmit>

  return USBD_OK;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2203      	movs	r2, #3
 800a10c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	2100      	movs	r1, #0
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f000 fd06 	bl	800ab38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b084      	sub	sp, #16
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	60f8      	str	r0, [r7, #12]
 800a13e:	60b9      	str	r1, [r7, #8]
 800a140:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	68ba      	ldr	r2, [r7, #8]
 800a146:	2100      	movs	r1, #0
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f000 fcf5 	bl	800ab38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2204      	movs	r2, #4
 800a164:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a168:	2300      	movs	r3, #0
 800a16a:	2200      	movs	r2, #0
 800a16c:	2100      	movs	r1, #0
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fcc1 	bl	800aaf6 <USBD_LL_Transmit>

  return USBD_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b082      	sub	sp, #8
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2205      	movs	r2, #5
 800a18a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a18e:	2300      	movs	r3, #0
 800a190:	2200      	movs	r2, #0
 800a192:	2100      	movs	r1, #0
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 fccf 	bl	800ab38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	4912      	ldr	r1, [pc, #72]	@ (800a1f4 <MX_USB_DEVICE_Init+0x50>)
 800a1ac:	4812      	ldr	r0, [pc, #72]	@ (800a1f8 <MX_USB_DEVICE_Init+0x54>)
 800a1ae:	f7fe fccd 	bl	8008b4c <USBD_Init>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d001      	beq.n	800a1bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a1b8:	f7f7 fcd8 	bl	8001b6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a1bc:	490f      	ldr	r1, [pc, #60]	@ (800a1fc <MX_USB_DEVICE_Init+0x58>)
 800a1be:	480e      	ldr	r0, [pc, #56]	@ (800a1f8 <MX_USB_DEVICE_Init+0x54>)
 800a1c0:	f7fe fcf4 	bl	8008bac <USBD_RegisterClass>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d001      	beq.n	800a1ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a1ca:	f7f7 fccf 	bl	8001b6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a1ce:	490c      	ldr	r1, [pc, #48]	@ (800a200 <MX_USB_DEVICE_Init+0x5c>)
 800a1d0:	4809      	ldr	r0, [pc, #36]	@ (800a1f8 <MX_USB_DEVICE_Init+0x54>)
 800a1d2:	f7fe fbeb 	bl	80089ac <USBD_CDC_RegisterInterface>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d001      	beq.n	800a1e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a1dc:	f7f7 fcc6 	bl	8001b6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a1e0:	4805      	ldr	r0, [pc, #20]	@ (800a1f8 <MX_USB_DEVICE_Init+0x54>)
 800a1e2:	f7fe fd19 	bl	8008c18 <USBD_Start>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d001      	beq.n	800a1f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a1ec:	f7f7 fcbe 	bl	8001b6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a1f0:	bf00      	nop
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	200000b0 	.word	0x200000b0
 800a1f8:	200003bc 	.word	0x200003bc
 800a1fc:	2000001c 	.word	0x2000001c
 800a200:	2000009c 	.word	0x2000009c

0800a204 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a208:	2200      	movs	r2, #0
 800a20a:	4905      	ldr	r1, [pc, #20]	@ (800a220 <CDC_Init_FS+0x1c>)
 800a20c:	4805      	ldr	r0, [pc, #20]	@ (800a224 <CDC_Init_FS+0x20>)
 800a20e:	f7fe fbe7 	bl	80089e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a212:	4905      	ldr	r1, [pc, #20]	@ (800a228 <CDC_Init_FS+0x24>)
 800a214:	4803      	ldr	r0, [pc, #12]	@ (800a224 <CDC_Init_FS+0x20>)
 800a216:	f7fe fc05 	bl	8008a24 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a21a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	20000e98 	.word	0x20000e98
 800a224:	200003bc 	.word	0x200003bc
 800a228:	20000698 	.word	0x20000698

0800a22c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a22c:	b480      	push	{r7}
 800a22e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a230:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a232:	4618      	mov	r0, r3
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	4603      	mov	r3, r0
 800a244:	6039      	str	r1, [r7, #0]
 800a246:	71fb      	strb	r3, [r7, #7]
 800a248:	4613      	mov	r3, r2
 800a24a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a24c:	79fb      	ldrb	r3, [r7, #7]
 800a24e:	2b23      	cmp	r3, #35	@ 0x23
 800a250:	d84a      	bhi.n	800a2e8 <CDC_Control_FS+0xac>
 800a252:	a201      	add	r2, pc, #4	@ (adr r2, 800a258 <CDC_Control_FS+0x1c>)
 800a254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a258:	0800a2e9 	.word	0x0800a2e9
 800a25c:	0800a2e9 	.word	0x0800a2e9
 800a260:	0800a2e9 	.word	0x0800a2e9
 800a264:	0800a2e9 	.word	0x0800a2e9
 800a268:	0800a2e9 	.word	0x0800a2e9
 800a26c:	0800a2e9 	.word	0x0800a2e9
 800a270:	0800a2e9 	.word	0x0800a2e9
 800a274:	0800a2e9 	.word	0x0800a2e9
 800a278:	0800a2e9 	.word	0x0800a2e9
 800a27c:	0800a2e9 	.word	0x0800a2e9
 800a280:	0800a2e9 	.word	0x0800a2e9
 800a284:	0800a2e9 	.word	0x0800a2e9
 800a288:	0800a2e9 	.word	0x0800a2e9
 800a28c:	0800a2e9 	.word	0x0800a2e9
 800a290:	0800a2e9 	.word	0x0800a2e9
 800a294:	0800a2e9 	.word	0x0800a2e9
 800a298:	0800a2e9 	.word	0x0800a2e9
 800a29c:	0800a2e9 	.word	0x0800a2e9
 800a2a0:	0800a2e9 	.word	0x0800a2e9
 800a2a4:	0800a2e9 	.word	0x0800a2e9
 800a2a8:	0800a2e9 	.word	0x0800a2e9
 800a2ac:	0800a2e9 	.word	0x0800a2e9
 800a2b0:	0800a2e9 	.word	0x0800a2e9
 800a2b4:	0800a2e9 	.word	0x0800a2e9
 800a2b8:	0800a2e9 	.word	0x0800a2e9
 800a2bc:	0800a2e9 	.word	0x0800a2e9
 800a2c0:	0800a2e9 	.word	0x0800a2e9
 800a2c4:	0800a2e9 	.word	0x0800a2e9
 800a2c8:	0800a2e9 	.word	0x0800a2e9
 800a2cc:	0800a2e9 	.word	0x0800a2e9
 800a2d0:	0800a2e9 	.word	0x0800a2e9
 800a2d4:	0800a2e9 	.word	0x0800a2e9
 800a2d8:	0800a2e9 	.word	0x0800a2e9
 800a2dc:	0800a2e9 	.word	0x0800a2e9
 800a2e0:	0800a2e9 	.word	0x0800a2e9
 800a2e4:	0800a2e9 	.word	0x0800a2e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a2e8:	bf00      	nop
  }

  return (USBD_OK);
 800a2ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a302:	6879      	ldr	r1, [r7, #4]
 800a304:	4805      	ldr	r0, [pc, #20]	@ (800a31c <CDC_Receive_FS+0x24>)
 800a306:	f7fe fb8d 	bl	8008a24 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a30a:	4804      	ldr	r0, [pc, #16]	@ (800a31c <CDC_Receive_FS+0x24>)
 800a30c:	f7fe fbe8 	bl	8008ae0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a310:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	200003bc 	.word	0x200003bc

0800a320 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	460b      	mov	r3, r1
 800a32a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a32c:	2300      	movs	r3, #0
 800a32e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a330:	4b0d      	ldr	r3, [pc, #52]	@ (800a368 <CDC_Transmit_FS+0x48>)
 800a332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a336:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d001      	beq.n	800a346 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a342:	2301      	movs	r3, #1
 800a344:	e00b      	b.n	800a35e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a346:	887b      	ldrh	r3, [r7, #2]
 800a348:	461a      	mov	r2, r3
 800a34a:	6879      	ldr	r1, [r7, #4]
 800a34c:	4806      	ldr	r0, [pc, #24]	@ (800a368 <CDC_Transmit_FS+0x48>)
 800a34e:	f7fe fb47 	bl	80089e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a352:	4805      	ldr	r0, [pc, #20]	@ (800a368 <CDC_Transmit_FS+0x48>)
 800a354:	f7fe fb84 	bl	8008a60 <USBD_CDC_TransmitPacket>
 800a358:	4603      	mov	r3, r0
 800a35a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	200003bc 	.word	0x200003bc

0800a36c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b087      	sub	sp, #28
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	4613      	mov	r3, r2
 800a378:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a37a:	2300      	movs	r3, #0
 800a37c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a37e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a382:	4618      	mov	r0, r3
 800a384:	371c      	adds	r7, #28
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
	...

0800a390 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	6039      	str	r1, [r7, #0]
 800a39a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	2212      	movs	r2, #18
 800a3a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a3a2:	4b03      	ldr	r3, [pc, #12]	@ (800a3b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr
 800a3b0:	200000d0 	.word	0x200000d0

0800a3b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	6039      	str	r1, [r7, #0]
 800a3be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2204      	movs	r2, #4
 800a3c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a3c6:	4b03      	ldr	r3, [pc, #12]	@ (800a3d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr
 800a3d4:	200000f0 	.word	0x200000f0

0800a3d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	4603      	mov	r3, r0
 800a3e0:	6039      	str	r1, [r7, #0]
 800a3e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3e4:	79fb      	ldrb	r3, [r7, #7]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d105      	bne.n	800a3f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	4907      	ldr	r1, [pc, #28]	@ (800a40c <USBD_FS_ProductStrDescriptor+0x34>)
 800a3ee:	4808      	ldr	r0, [pc, #32]	@ (800a410 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3f0:	f7ff fdec 	bl	8009fcc <USBD_GetString>
 800a3f4:	e004      	b.n	800a400 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	4904      	ldr	r1, [pc, #16]	@ (800a40c <USBD_FS_ProductStrDescriptor+0x34>)
 800a3fa:	4805      	ldr	r0, [pc, #20]	@ (800a410 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3fc:	f7ff fde6 	bl	8009fcc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a400:	4b02      	ldr	r3, [pc, #8]	@ (800a40c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a402:	4618      	mov	r0, r3
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	20001698 	.word	0x20001698
 800a410:	0800db08 	.word	0x0800db08

0800a414 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	4603      	mov	r3, r0
 800a41c:	6039      	str	r1, [r7, #0]
 800a41e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a420:	683a      	ldr	r2, [r7, #0]
 800a422:	4904      	ldr	r1, [pc, #16]	@ (800a434 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a424:	4804      	ldr	r0, [pc, #16]	@ (800a438 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a426:	f7ff fdd1 	bl	8009fcc <USBD_GetString>
  return USBD_StrDesc;
 800a42a:	4b02      	ldr	r3, [pc, #8]	@ (800a434 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	20001698 	.word	0x20001698
 800a438:	0800db20 	.word	0x0800db20

0800a43c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	4603      	mov	r3, r0
 800a444:	6039      	str	r1, [r7, #0]
 800a446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	221a      	movs	r2, #26
 800a44c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a44e:	f000 f855 	bl	800a4fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a452:	4b02      	ldr	r3, [pc, #8]	@ (800a45c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a454:	4618      	mov	r0, r3
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	200000f4 	.word	0x200000f4

0800a460 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	4603      	mov	r3, r0
 800a468:	6039      	str	r1, [r7, #0]
 800a46a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a46c:	79fb      	ldrb	r3, [r7, #7]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d105      	bne.n	800a47e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	4907      	ldr	r1, [pc, #28]	@ (800a494 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a476:	4808      	ldr	r0, [pc, #32]	@ (800a498 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a478:	f7ff fda8 	bl	8009fcc <USBD_GetString>
 800a47c:	e004      	b.n	800a488 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a47e:	683a      	ldr	r2, [r7, #0]
 800a480:	4904      	ldr	r1, [pc, #16]	@ (800a494 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a482:	4805      	ldr	r0, [pc, #20]	@ (800a498 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a484:	f7ff fda2 	bl	8009fcc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a488:	4b02      	ldr	r3, [pc, #8]	@ (800a494 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	20001698 	.word	0x20001698
 800a498:	0800db34 	.word	0x0800db34

0800a49c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	6039      	str	r1, [r7, #0]
 800a4a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4a8:	79fb      	ldrb	r3, [r7, #7]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d105      	bne.n	800a4ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4ae:	683a      	ldr	r2, [r7, #0]
 800a4b0:	4907      	ldr	r1, [pc, #28]	@ (800a4d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4b2:	4808      	ldr	r0, [pc, #32]	@ (800a4d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4b4:	f7ff fd8a 	bl	8009fcc <USBD_GetString>
 800a4b8:	e004      	b.n	800a4c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4ba:	683a      	ldr	r2, [r7, #0]
 800a4bc:	4904      	ldr	r1, [pc, #16]	@ (800a4d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4be:	4805      	ldr	r0, [pc, #20]	@ (800a4d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4c0:	f7ff fd84 	bl	8009fcc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4c4:	4b02      	ldr	r3, [pc, #8]	@ (800a4d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	20001698 	.word	0x20001698
 800a4d4:	0800db40 	.word	0x0800db40

0800a4d8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	4603      	mov	r3, r0
 800a4e0:	6039      	str	r1, [r7, #0]
 800a4e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	220c      	movs	r2, #12
 800a4e8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a4ea:	4b03      	ldr	r3, [pc, #12]	@ (800a4f8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr
 800a4f8:	200000e4 	.word	0x200000e4

0800a4fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a502:	4b0f      	ldr	r3, [pc, #60]	@ (800a540 <Get_SerialNum+0x44>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a508:	4b0e      	ldr	r3, [pc, #56]	@ (800a544 <Get_SerialNum+0x48>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a50e:	4b0e      	ldr	r3, [pc, #56]	@ (800a548 <Get_SerialNum+0x4c>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4413      	add	r3, r2
 800a51a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d009      	beq.n	800a536 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a522:	2208      	movs	r2, #8
 800a524:	4909      	ldr	r1, [pc, #36]	@ (800a54c <Get_SerialNum+0x50>)
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 f814 	bl	800a554 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a52c:	2204      	movs	r2, #4
 800a52e:	4908      	ldr	r1, [pc, #32]	@ (800a550 <Get_SerialNum+0x54>)
 800a530:	68b8      	ldr	r0, [r7, #8]
 800a532:	f000 f80f 	bl	800a554 <IntToUnicode>
  }
}
 800a536:	bf00      	nop
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	1fff7a10 	.word	0x1fff7a10
 800a544:	1fff7a14 	.word	0x1fff7a14
 800a548:	1fff7a18 	.word	0x1fff7a18
 800a54c:	200000f6 	.word	0x200000f6
 800a550:	20000106 	.word	0x20000106

0800a554 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a554:	b480      	push	{r7}
 800a556:	b087      	sub	sp, #28
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	4613      	mov	r3, r2
 800a560:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a566:	2300      	movs	r3, #0
 800a568:	75fb      	strb	r3, [r7, #23]
 800a56a:	e027      	b.n	800a5bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	0f1b      	lsrs	r3, r3, #28
 800a570:	2b09      	cmp	r3, #9
 800a572:	d80b      	bhi.n	800a58c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	0f1b      	lsrs	r3, r3, #28
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	7dfb      	ldrb	r3, [r7, #23]
 800a57c:	005b      	lsls	r3, r3, #1
 800a57e:	4619      	mov	r1, r3
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	440b      	add	r3, r1
 800a584:	3230      	adds	r2, #48	@ 0x30
 800a586:	b2d2      	uxtb	r2, r2
 800a588:	701a      	strb	r2, [r3, #0]
 800a58a:	e00a      	b.n	800a5a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	0f1b      	lsrs	r3, r3, #28
 800a590:	b2da      	uxtb	r2, r3
 800a592:	7dfb      	ldrb	r3, [r7, #23]
 800a594:	005b      	lsls	r3, r3, #1
 800a596:	4619      	mov	r1, r3
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	440b      	add	r3, r1
 800a59c:	3237      	adds	r2, #55	@ 0x37
 800a59e:	b2d2      	uxtb	r2, r2
 800a5a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	011b      	lsls	r3, r3, #4
 800a5a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a5a8:	7dfb      	ldrb	r3, [r7, #23]
 800a5aa:	005b      	lsls	r3, r3, #1
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a5b6:	7dfb      	ldrb	r3, [r7, #23]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	75fb      	strb	r3, [r7, #23]
 800a5bc:	7dfa      	ldrb	r2, [r7, #23]
 800a5be:	79fb      	ldrb	r3, [r7, #7]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d3d3      	bcc.n	800a56c <IntToUnicode+0x18>
  }
}
 800a5c4:	bf00      	nop
 800a5c6:	bf00      	nop
 800a5c8:	371c      	adds	r7, #28
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
	...

0800a5d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b0a0      	sub	sp, #128	@ 0x80
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5dc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	601a      	str	r2, [r3, #0]
 800a5e4:	605a      	str	r2, [r3, #4]
 800a5e6:	609a      	str	r2, [r3, #8]
 800a5e8:	60da      	str	r2, [r3, #12]
 800a5ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a5ec:	f107 0310 	add.w	r3, r7, #16
 800a5f0:	225c      	movs	r2, #92	@ 0x5c
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f001 f8e2 	bl	800b7be <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a602:	d149      	bne.n	800a698 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a604:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a608:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800a60a:	2300      	movs	r3, #0
 800a60c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a60e:	f107 0310 	add.w	r3, r7, #16
 800a612:	4618      	mov	r0, r3
 800a614:	f7f9 fc8a 	bl	8003f2c <HAL_RCCEx_PeriphCLKConfig>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d001      	beq.n	800a622 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800a61e:	f7f7 faa5 	bl	8001b6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a622:	2300      	movs	r3, #0
 800a624:	60fb      	str	r3, [r7, #12]
 800a626:	4b1e      	ldr	r3, [pc, #120]	@ (800a6a0 <HAL_PCD_MspInit+0xcc>)
 800a628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a62a:	4a1d      	ldr	r2, [pc, #116]	@ (800a6a0 <HAL_PCD_MspInit+0xcc>)
 800a62c:	f043 0301 	orr.w	r3, r3, #1
 800a630:	6313      	str	r3, [r2, #48]	@ 0x30
 800a632:	4b1b      	ldr	r3, [pc, #108]	@ (800a6a0 <HAL_PCD_MspInit+0xcc>)
 800a634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a636:	f003 0301 	and.w	r3, r3, #1
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a63e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a642:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a644:	2302      	movs	r3, #2
 800a646:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a648:	2300      	movs	r3, #0
 800a64a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a64c:	2303      	movs	r3, #3
 800a64e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a650:	230a      	movs	r3, #10
 800a652:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a654:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a658:	4619      	mov	r1, r3
 800a65a:	4812      	ldr	r0, [pc, #72]	@ (800a6a4 <HAL_PCD_MspInit+0xd0>)
 800a65c:	f7f7 ff00 	bl	8002460 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a660:	4b0f      	ldr	r3, [pc, #60]	@ (800a6a0 <HAL_PCD_MspInit+0xcc>)
 800a662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a664:	4a0e      	ldr	r2, [pc, #56]	@ (800a6a0 <HAL_PCD_MspInit+0xcc>)
 800a666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a66a:	6353      	str	r3, [r2, #52]	@ 0x34
 800a66c:	2300      	movs	r3, #0
 800a66e:	60bb      	str	r3, [r7, #8]
 800a670:	4b0b      	ldr	r3, [pc, #44]	@ (800a6a0 <HAL_PCD_MspInit+0xcc>)
 800a672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a674:	4a0a      	ldr	r2, [pc, #40]	@ (800a6a0 <HAL_PCD_MspInit+0xcc>)
 800a676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a67a:	6453      	str	r3, [r2, #68]	@ 0x44
 800a67c:	4b08      	ldr	r3, [pc, #32]	@ (800a6a0 <HAL_PCD_MspInit+0xcc>)
 800a67e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a684:	60bb      	str	r3, [r7, #8]
 800a686:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a688:	2200      	movs	r2, #0
 800a68a:	2100      	movs	r1, #0
 800a68c:	2043      	movs	r0, #67	@ 0x43
 800a68e:	f7f7 fe1e 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a692:	2043      	movs	r0, #67	@ 0x43
 800a694:	f7f7 fe37 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a698:	bf00      	nop
 800a69a:	3780      	adds	r7, #128	@ 0x80
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	40023800 	.word	0x40023800
 800a6a4:	40020000 	.word	0x40020000

0800a6a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a6bc:	4619      	mov	r1, r3
 800a6be:	4610      	mov	r0, r2
 800a6c0:	f7fe faf7 	bl	8008cb2 <USBD_LL_SetupStage>
}
 800a6c4:	bf00      	nop
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a6de:	78fa      	ldrb	r2, [r7, #3]
 800a6e0:	6879      	ldr	r1, [r7, #4]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	00db      	lsls	r3, r3, #3
 800a6e6:	4413      	add	r3, r2
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	440b      	add	r3, r1
 800a6ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	78fb      	ldrb	r3, [r7, #3]
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	f7fe fb31 	bl	8008d5c <USBD_LL_DataOutStage>
}
 800a6fa:	bf00      	nop
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b082      	sub	sp, #8
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
 800a70a:	460b      	mov	r3, r1
 800a70c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a714:	78fa      	ldrb	r2, [r7, #3]
 800a716:	6879      	ldr	r1, [r7, #4]
 800a718:	4613      	mov	r3, r2
 800a71a:	00db      	lsls	r3, r3, #3
 800a71c:	4413      	add	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	440b      	add	r3, r1
 800a722:	3320      	adds	r3, #32
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	78fb      	ldrb	r3, [r7, #3]
 800a728:	4619      	mov	r1, r3
 800a72a:	f7fe fbca 	bl	8008ec2 <USBD_LL_DataInStage>
}
 800a72e:	bf00      	nop
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b082      	sub	sp, #8
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a744:	4618      	mov	r0, r3
 800a746:	f7fe fd04 	bl	8009152 <USBD_LL_SOF>
}
 800a74a:	bf00      	nop
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b084      	sub	sp, #16
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a75a:	2301      	movs	r3, #1
 800a75c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	79db      	ldrb	r3, [r3, #7]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d102      	bne.n	800a76c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a766:	2300      	movs	r3, #0
 800a768:	73fb      	strb	r3, [r7, #15]
 800a76a:	e008      	b.n	800a77e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	79db      	ldrb	r3, [r3, #7]
 800a770:	2b02      	cmp	r3, #2
 800a772:	d102      	bne.n	800a77a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a774:	2301      	movs	r3, #1
 800a776:	73fb      	strb	r3, [r7, #15]
 800a778:	e001      	b.n	800a77e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a77a:	f7f7 f9f7 	bl	8001b6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a784:	7bfa      	ldrb	r2, [r7, #15]
 800a786:	4611      	mov	r1, r2
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fe fc9e 	bl	80090ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a794:	4618      	mov	r0, r3
 800a796:	f7fe fc46 	bl	8009026 <USBD_LL_Reset>
}
 800a79a:	bf00      	nop
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
	...

0800a7a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fe fc99 	bl	80090ea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	6812      	ldr	r2, [r2, #0]
 800a7c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a7ca:	f043 0301 	orr.w	r3, r3, #1
 800a7ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	7adb      	ldrb	r3, [r3, #11]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d005      	beq.n	800a7e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7d8:	4b04      	ldr	r3, [pc, #16]	@ (800a7ec <HAL_PCD_SuspendCallback+0x48>)
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	4a03      	ldr	r2, [pc, #12]	@ (800a7ec <HAL_PCD_SuspendCallback+0x48>)
 800a7de:	f043 0306 	orr.w	r3, r3, #6
 800a7e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a7e4:	bf00      	nop
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	e000ed00 	.word	0xe000ed00

0800a7f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fe fc8f 	bl	8009122 <USBD_LL_Resume>
}
 800a804:	bf00      	nop
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a81e:	78fa      	ldrb	r2, [r7, #3]
 800a820:	4611      	mov	r1, r2
 800a822:	4618      	mov	r0, r3
 800a824:	f7fe fce7 	bl	80091f6 <USBD_LL_IsoOUTIncomplete>
}
 800a828:	bf00      	nop
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	460b      	mov	r3, r1
 800a83a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a842:	78fa      	ldrb	r2, [r7, #3]
 800a844:	4611      	mov	r1, r2
 800a846:	4618      	mov	r0, r3
 800a848:	f7fe fca3 	bl	8009192 <USBD_LL_IsoINIncomplete>
}
 800a84c:	bf00      	nop
 800a84e:	3708      	adds	r7, #8
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a862:	4618      	mov	r0, r3
 800a864:	f7fe fcf9 	bl	800925a <USBD_LL_DevConnected>
}
 800a868:	bf00      	nop
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fe fcf6 	bl	8009270 <USBD_LL_DevDisconnected>
}
 800a884:	bf00      	nop
 800a886:	3708      	adds	r7, #8
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d13c      	bne.n	800a916 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a89c:	4a20      	ldr	r2, [pc, #128]	@ (800a920 <USBD_LL_Init+0x94>)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a1e      	ldr	r2, [pc, #120]	@ (800a920 <USBD_LL_Init+0x94>)
 800a8a8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a8ac:	4b1c      	ldr	r3, [pc, #112]	@ (800a920 <USBD_LL_Init+0x94>)
 800a8ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a8b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a8b4:	4b1a      	ldr	r3, [pc, #104]	@ (800a920 <USBD_LL_Init+0x94>)
 800a8b6:	2206      	movs	r2, #6
 800a8b8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a8ba:	4b19      	ldr	r3, [pc, #100]	@ (800a920 <USBD_LL_Init+0x94>)
 800a8bc:	2202      	movs	r2, #2
 800a8be:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a8c0:	4b17      	ldr	r3, [pc, #92]	@ (800a920 <USBD_LL_Init+0x94>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a8c6:	4b16      	ldr	r3, [pc, #88]	@ (800a920 <USBD_LL_Init+0x94>)
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a8cc:	4b14      	ldr	r3, [pc, #80]	@ (800a920 <USBD_LL_Init+0x94>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a8d2:	4b13      	ldr	r3, [pc, #76]	@ (800a920 <USBD_LL_Init+0x94>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a8d8:	4b11      	ldr	r3, [pc, #68]	@ (800a920 <USBD_LL_Init+0x94>)
 800a8da:	2200      	movs	r2, #0
 800a8dc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a8de:	4b10      	ldr	r3, [pc, #64]	@ (800a920 <USBD_LL_Init+0x94>)
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a8e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a920 <USBD_LL_Init+0x94>)
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a8ea:	480d      	ldr	r0, [pc, #52]	@ (800a920 <USBD_LL_Init+0x94>)
 800a8ec:	f7f7 ff65 	bl	80027ba <HAL_PCD_Init>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d001      	beq.n	800a8fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a8f6:	f7f7 f939 	bl	8001b6c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a8fa:	2180      	movs	r1, #128	@ 0x80
 800a8fc:	4808      	ldr	r0, [pc, #32]	@ (800a920 <USBD_LL_Init+0x94>)
 800a8fe:	f7f9 f9c6 	bl	8003c8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a902:	2240      	movs	r2, #64	@ 0x40
 800a904:	2100      	movs	r1, #0
 800a906:	4806      	ldr	r0, [pc, #24]	@ (800a920 <USBD_LL_Init+0x94>)
 800a908:	f7f9 f97a 	bl	8003c00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a90c:	2280      	movs	r2, #128	@ 0x80
 800a90e:	2101      	movs	r1, #1
 800a910:	4803      	ldr	r0, [pc, #12]	@ (800a920 <USBD_LL_Init+0x94>)
 800a912:	f7f9 f975 	bl	8003c00 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	20001898 	.word	0x20001898

0800a924 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a930:	2300      	movs	r3, #0
 800a932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7f8 f853 	bl	80029e6 <HAL_PCD_Start>
 800a940:	4603      	mov	r3, r0
 800a942:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a944:	7bfb      	ldrb	r3, [r7, #15]
 800a946:	4618      	mov	r0, r3
 800a948:	f000 f990 	bl	800ac6c <USBD_Get_USB_Status>
 800a94c:	4603      	mov	r3, r0
 800a94e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a950:	7bbb      	ldrb	r3, [r7, #14]
}
 800a952:	4618      	mov	r0, r3
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b084      	sub	sp, #16
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
 800a962:	4608      	mov	r0, r1
 800a964:	4611      	mov	r1, r2
 800a966:	461a      	mov	r2, r3
 800a968:	4603      	mov	r3, r0
 800a96a:	70fb      	strb	r3, [r7, #3]
 800a96c:	460b      	mov	r3, r1
 800a96e:	70bb      	strb	r3, [r7, #2]
 800a970:	4613      	mov	r3, r2
 800a972:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a982:	78bb      	ldrb	r3, [r7, #2]
 800a984:	883a      	ldrh	r2, [r7, #0]
 800a986:	78f9      	ldrb	r1, [r7, #3]
 800a988:	f7f8 fd54 	bl	8003434 <HAL_PCD_EP_Open>
 800a98c:	4603      	mov	r3, r0
 800a98e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a990:	7bfb      	ldrb	r3, [r7, #15]
 800a992:	4618      	mov	r0, r3
 800a994:	f000 f96a 	bl	800ac6c <USBD_Get_USB_Status>
 800a998:	4603      	mov	r3, r0
 800a99a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a99c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b084      	sub	sp, #16
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9c0:	78fa      	ldrb	r2, [r7, #3]
 800a9c2:	4611      	mov	r1, r2
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7f8 fd9f 	bl	8003508 <HAL_PCD_EP_Close>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ce:	7bfb      	ldrb	r3, [r7, #15]
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f000 f94b 	bl	800ac6c <USBD_Get_USB_Status>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9fe:	78fa      	ldrb	r2, [r7, #3]
 800aa00:	4611      	mov	r1, r2
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7f8 fe57 	bl	80036b6 <HAL_PCD_EP_SetStall>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f000 f92c 	bl	800ac6c <USBD_Get_USB_Status>
 800aa14:	4603      	mov	r3, r0
 800aa16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa18:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b084      	sub	sp, #16
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa32:	2300      	movs	r3, #0
 800aa34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa3c:	78fa      	ldrb	r2, [r7, #3]
 800aa3e:	4611      	mov	r1, r2
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7f8 fe9b 	bl	800377c <HAL_PCD_EP_ClrStall>
 800aa46:	4603      	mov	r3, r0
 800aa48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa4a:	7bfb      	ldrb	r3, [r7, #15]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f000 f90d 	bl	800ac6c <USBD_Get_USB_Status>
 800aa52:	4603      	mov	r3, r0
 800aa54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa56:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	460b      	mov	r3, r1
 800aa6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	da0b      	bge.n	800aa94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa7c:	78fb      	ldrb	r3, [r7, #3]
 800aa7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa82:	68f9      	ldr	r1, [r7, #12]
 800aa84:	4613      	mov	r3, r2
 800aa86:	00db      	lsls	r3, r3, #3
 800aa88:	4413      	add	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	440b      	add	r3, r1
 800aa8e:	3316      	adds	r3, #22
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	e00b      	b.n	800aaac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa94:	78fb      	ldrb	r3, [r7, #3]
 800aa96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa9a:	68f9      	ldr	r1, [r7, #12]
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	00db      	lsls	r3, r3, #3
 800aaa0:	4413      	add	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	440b      	add	r3, r1
 800aaa6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800aaaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	460b      	mov	r3, r1
 800aac2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aac4:	2300      	movs	r3, #0
 800aac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aac8:	2300      	movs	r3, #0
 800aaca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aad2:	78fa      	ldrb	r2, [r7, #3]
 800aad4:	4611      	mov	r1, r2
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7f8 fc88 	bl	80033ec <HAL_PCD_SetAddress>
 800aadc:	4603      	mov	r3, r0
 800aade:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aae0:	7bfb      	ldrb	r3, [r7, #15]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f000 f8c2 	bl	800ac6c <USBD_Get_USB_Status>
 800aae8:	4603      	mov	r3, r0
 800aaea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaec:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b086      	sub	sp, #24
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	60f8      	str	r0, [r7, #12]
 800aafe:	607a      	str	r2, [r7, #4]
 800ab00:	603b      	str	r3, [r7, #0]
 800ab02:	460b      	mov	r3, r1
 800ab04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab06:	2300      	movs	r3, #0
 800ab08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ab14:	7af9      	ldrb	r1, [r7, #11]
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	f7f8 fd92 	bl	8003642 <HAL_PCD_EP_Transmit>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab22:	7dfb      	ldrb	r3, [r7, #23]
 800ab24:	4618      	mov	r0, r3
 800ab26:	f000 f8a1 	bl	800ac6c <USBD_Get_USB_Status>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab2e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3718      	adds	r7, #24
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b086      	sub	sp, #24
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	607a      	str	r2, [r7, #4]
 800ab42:	603b      	str	r3, [r7, #0]
 800ab44:	460b      	mov	r3, r1
 800ab46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ab56:	7af9      	ldrb	r1, [r7, #11]
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	f7f8 fd1e 	bl	800359c <HAL_PCD_EP_Receive>
 800ab60:	4603      	mov	r3, r0
 800ab62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab64:	7dfb      	ldrb	r3, [r7, #23]
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 f880 	bl	800ac6c <USBD_Get_USB_Status>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab70:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3718      	adds	r7, #24
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b082      	sub	sp, #8
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
 800ab82:	460b      	mov	r3, r1
 800ab84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab8c:	78fa      	ldrb	r2, [r7, #3]
 800ab8e:	4611      	mov	r1, r2
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7f8 fd3e 	bl	8003612 <HAL_PCD_EP_GetRxCount>
 800ab96:	4603      	mov	r3, r0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3708      	adds	r7, #8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	460b      	mov	r3, r1
 800abaa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800abac:	78fb      	ldrb	r3, [r7, #3]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d002      	beq.n	800abb8 <HAL_PCDEx_LPM_Callback+0x18>
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d01f      	beq.n	800abf6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800abb6:	e03b      	b.n	800ac30 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	7adb      	ldrb	r3, [r3, #11]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d007      	beq.n	800abd0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800abc0:	f7f6 fd36 	bl	8001630 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800abc4:	4b1c      	ldr	r3, [pc, #112]	@ (800ac38 <HAL_PCDEx_LPM_Callback+0x98>)
 800abc6:	691b      	ldr	r3, [r3, #16]
 800abc8:	4a1b      	ldr	r2, [pc, #108]	@ (800ac38 <HAL_PCDEx_LPM_Callback+0x98>)
 800abca:	f023 0306 	bic.w	r3, r3, #6
 800abce:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	6812      	ldr	r2, [r2, #0]
 800abde:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800abe2:	f023 0301 	bic.w	r3, r3, #1
 800abe6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abee:	4618      	mov	r0, r3
 800abf0:	f7fe fa97 	bl	8009122 <USBD_LL_Resume>
    break;
 800abf4:	e01c      	b.n	800ac30 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	6812      	ldr	r2, [r2, #0]
 800ac04:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ac08:	f043 0301 	orr.w	r3, r3, #1
 800ac0c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7fe fa68 	bl	80090ea <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	7adb      	ldrb	r3, [r3, #11]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d005      	beq.n	800ac2e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac22:	4b05      	ldr	r3, [pc, #20]	@ (800ac38 <HAL_PCDEx_LPM_Callback+0x98>)
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	4a04      	ldr	r2, [pc, #16]	@ (800ac38 <HAL_PCDEx_LPM_Callback+0x98>)
 800ac28:	f043 0306 	orr.w	r3, r3, #6
 800ac2c:	6113      	str	r3, [r2, #16]
    break;
 800ac2e:	bf00      	nop
}
 800ac30:	bf00      	nop
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	e000ed00 	.word	0xe000ed00

0800ac3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ac44:	4b03      	ldr	r3, [pc, #12]	@ (800ac54 <USBD_static_malloc+0x18>)
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	370c      	adds	r7, #12
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	20001d7c 	.word	0x20001d7c

0800ac58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]

}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	4603      	mov	r3, r0
 800ac74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac7a:	79fb      	ldrb	r3, [r7, #7]
 800ac7c:	2b03      	cmp	r3, #3
 800ac7e:	d817      	bhi.n	800acb0 <USBD_Get_USB_Status+0x44>
 800ac80:	a201      	add	r2, pc, #4	@ (adr r2, 800ac88 <USBD_Get_USB_Status+0x1c>)
 800ac82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac86:	bf00      	nop
 800ac88:	0800ac99 	.word	0x0800ac99
 800ac8c:	0800ac9f 	.word	0x0800ac9f
 800ac90:	0800aca5 	.word	0x0800aca5
 800ac94:	0800acab 	.word	0x0800acab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac9c:	e00b      	b.n	800acb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac9e:	2303      	movs	r3, #3
 800aca0:	73fb      	strb	r3, [r7, #15]
    break;
 800aca2:	e008      	b.n	800acb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aca4:	2301      	movs	r3, #1
 800aca6:	73fb      	strb	r3, [r7, #15]
    break;
 800aca8:	e005      	b.n	800acb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800acaa:	2303      	movs	r3, #3
 800acac:	73fb      	strb	r3, [r7, #15]
    break;
 800acae:	e002      	b.n	800acb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800acb0:	2303      	movs	r3, #3
 800acb2:	73fb      	strb	r3, [r7, #15]
    break;
 800acb4:	bf00      	nop
  }
  return usb_status;
 800acb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3714      	adds	r7, #20
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <__cvt>:
 800acc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acc8:	ec57 6b10 	vmov	r6, r7, d0
 800accc:	2f00      	cmp	r7, #0
 800acce:	460c      	mov	r4, r1
 800acd0:	4619      	mov	r1, r3
 800acd2:	463b      	mov	r3, r7
 800acd4:	bfbb      	ittet	lt
 800acd6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800acda:	461f      	movlt	r7, r3
 800acdc:	2300      	movge	r3, #0
 800acde:	232d      	movlt	r3, #45	@ 0x2d
 800ace0:	700b      	strb	r3, [r1, #0]
 800ace2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ace4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ace8:	4691      	mov	r9, r2
 800acea:	f023 0820 	bic.w	r8, r3, #32
 800acee:	bfbc      	itt	lt
 800acf0:	4632      	movlt	r2, r6
 800acf2:	4616      	movlt	r6, r2
 800acf4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800acf8:	d005      	beq.n	800ad06 <__cvt+0x42>
 800acfa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800acfe:	d100      	bne.n	800ad02 <__cvt+0x3e>
 800ad00:	3401      	adds	r4, #1
 800ad02:	2102      	movs	r1, #2
 800ad04:	e000      	b.n	800ad08 <__cvt+0x44>
 800ad06:	2103      	movs	r1, #3
 800ad08:	ab03      	add	r3, sp, #12
 800ad0a:	9301      	str	r3, [sp, #4]
 800ad0c:	ab02      	add	r3, sp, #8
 800ad0e:	9300      	str	r3, [sp, #0]
 800ad10:	ec47 6b10 	vmov	d0, r6, r7
 800ad14:	4653      	mov	r3, sl
 800ad16:	4622      	mov	r2, r4
 800ad18:	f000 fe5a 	bl	800b9d0 <_dtoa_r>
 800ad1c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ad20:	4605      	mov	r5, r0
 800ad22:	d119      	bne.n	800ad58 <__cvt+0x94>
 800ad24:	f019 0f01 	tst.w	r9, #1
 800ad28:	d00e      	beq.n	800ad48 <__cvt+0x84>
 800ad2a:	eb00 0904 	add.w	r9, r0, r4
 800ad2e:	2200      	movs	r2, #0
 800ad30:	2300      	movs	r3, #0
 800ad32:	4630      	mov	r0, r6
 800ad34:	4639      	mov	r1, r7
 800ad36:	f7f5 fef7 	bl	8000b28 <__aeabi_dcmpeq>
 800ad3a:	b108      	cbz	r0, 800ad40 <__cvt+0x7c>
 800ad3c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad40:	2230      	movs	r2, #48	@ 0x30
 800ad42:	9b03      	ldr	r3, [sp, #12]
 800ad44:	454b      	cmp	r3, r9
 800ad46:	d31e      	bcc.n	800ad86 <__cvt+0xc2>
 800ad48:	9b03      	ldr	r3, [sp, #12]
 800ad4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad4c:	1b5b      	subs	r3, r3, r5
 800ad4e:	4628      	mov	r0, r5
 800ad50:	6013      	str	r3, [r2, #0]
 800ad52:	b004      	add	sp, #16
 800ad54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad5c:	eb00 0904 	add.w	r9, r0, r4
 800ad60:	d1e5      	bne.n	800ad2e <__cvt+0x6a>
 800ad62:	7803      	ldrb	r3, [r0, #0]
 800ad64:	2b30      	cmp	r3, #48	@ 0x30
 800ad66:	d10a      	bne.n	800ad7e <__cvt+0xba>
 800ad68:	2200      	movs	r2, #0
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	4639      	mov	r1, r7
 800ad70:	f7f5 feda 	bl	8000b28 <__aeabi_dcmpeq>
 800ad74:	b918      	cbnz	r0, 800ad7e <__cvt+0xba>
 800ad76:	f1c4 0401 	rsb	r4, r4, #1
 800ad7a:	f8ca 4000 	str.w	r4, [sl]
 800ad7e:	f8da 3000 	ldr.w	r3, [sl]
 800ad82:	4499      	add	r9, r3
 800ad84:	e7d3      	b.n	800ad2e <__cvt+0x6a>
 800ad86:	1c59      	adds	r1, r3, #1
 800ad88:	9103      	str	r1, [sp, #12]
 800ad8a:	701a      	strb	r2, [r3, #0]
 800ad8c:	e7d9      	b.n	800ad42 <__cvt+0x7e>

0800ad8e <__exponent>:
 800ad8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad90:	2900      	cmp	r1, #0
 800ad92:	bfba      	itte	lt
 800ad94:	4249      	neglt	r1, r1
 800ad96:	232d      	movlt	r3, #45	@ 0x2d
 800ad98:	232b      	movge	r3, #43	@ 0x2b
 800ad9a:	2909      	cmp	r1, #9
 800ad9c:	7002      	strb	r2, [r0, #0]
 800ad9e:	7043      	strb	r3, [r0, #1]
 800ada0:	dd29      	ble.n	800adf6 <__exponent+0x68>
 800ada2:	f10d 0307 	add.w	r3, sp, #7
 800ada6:	461d      	mov	r5, r3
 800ada8:	270a      	movs	r7, #10
 800adaa:	461a      	mov	r2, r3
 800adac:	fbb1 f6f7 	udiv	r6, r1, r7
 800adb0:	fb07 1416 	mls	r4, r7, r6, r1
 800adb4:	3430      	adds	r4, #48	@ 0x30
 800adb6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800adba:	460c      	mov	r4, r1
 800adbc:	2c63      	cmp	r4, #99	@ 0x63
 800adbe:	f103 33ff 	add.w	r3, r3, #4294967295
 800adc2:	4631      	mov	r1, r6
 800adc4:	dcf1      	bgt.n	800adaa <__exponent+0x1c>
 800adc6:	3130      	adds	r1, #48	@ 0x30
 800adc8:	1e94      	subs	r4, r2, #2
 800adca:	f803 1c01 	strb.w	r1, [r3, #-1]
 800adce:	1c41      	adds	r1, r0, #1
 800add0:	4623      	mov	r3, r4
 800add2:	42ab      	cmp	r3, r5
 800add4:	d30a      	bcc.n	800adec <__exponent+0x5e>
 800add6:	f10d 0309 	add.w	r3, sp, #9
 800adda:	1a9b      	subs	r3, r3, r2
 800addc:	42ac      	cmp	r4, r5
 800adde:	bf88      	it	hi
 800ade0:	2300      	movhi	r3, #0
 800ade2:	3302      	adds	r3, #2
 800ade4:	4403      	add	r3, r0
 800ade6:	1a18      	subs	r0, r3, r0
 800ade8:	b003      	add	sp, #12
 800adea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adec:	f813 6b01 	ldrb.w	r6, [r3], #1
 800adf0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800adf4:	e7ed      	b.n	800add2 <__exponent+0x44>
 800adf6:	2330      	movs	r3, #48	@ 0x30
 800adf8:	3130      	adds	r1, #48	@ 0x30
 800adfa:	7083      	strb	r3, [r0, #2]
 800adfc:	70c1      	strb	r1, [r0, #3]
 800adfe:	1d03      	adds	r3, r0, #4
 800ae00:	e7f1      	b.n	800ade6 <__exponent+0x58>
	...

0800ae04 <_printf_float>:
 800ae04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae08:	b08d      	sub	sp, #52	@ 0x34
 800ae0a:	460c      	mov	r4, r1
 800ae0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ae10:	4616      	mov	r6, r2
 800ae12:	461f      	mov	r7, r3
 800ae14:	4605      	mov	r5, r0
 800ae16:	f000 fcdb 	bl	800b7d0 <_localeconv_r>
 800ae1a:	6803      	ldr	r3, [r0, #0]
 800ae1c:	9304      	str	r3, [sp, #16]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7f5 fa56 	bl	80002d0 <strlen>
 800ae24:	2300      	movs	r3, #0
 800ae26:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae28:	f8d8 3000 	ldr.w	r3, [r8]
 800ae2c:	9005      	str	r0, [sp, #20]
 800ae2e:	3307      	adds	r3, #7
 800ae30:	f023 0307 	bic.w	r3, r3, #7
 800ae34:	f103 0208 	add.w	r2, r3, #8
 800ae38:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ae3c:	f8d4 b000 	ldr.w	fp, [r4]
 800ae40:	f8c8 2000 	str.w	r2, [r8]
 800ae44:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ae4c:	9307      	str	r3, [sp, #28]
 800ae4e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ae56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae5a:	4b9c      	ldr	r3, [pc, #624]	@ (800b0cc <_printf_float+0x2c8>)
 800ae5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae60:	f7f5 fe94 	bl	8000b8c <__aeabi_dcmpun>
 800ae64:	bb70      	cbnz	r0, 800aec4 <_printf_float+0xc0>
 800ae66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae6a:	4b98      	ldr	r3, [pc, #608]	@ (800b0cc <_printf_float+0x2c8>)
 800ae6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae70:	f7f5 fe6e 	bl	8000b50 <__aeabi_dcmple>
 800ae74:	bb30      	cbnz	r0, 800aec4 <_printf_float+0xc0>
 800ae76:	2200      	movs	r2, #0
 800ae78:	2300      	movs	r3, #0
 800ae7a:	4640      	mov	r0, r8
 800ae7c:	4649      	mov	r1, r9
 800ae7e:	f7f5 fe5d 	bl	8000b3c <__aeabi_dcmplt>
 800ae82:	b110      	cbz	r0, 800ae8a <_printf_float+0x86>
 800ae84:	232d      	movs	r3, #45	@ 0x2d
 800ae86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae8a:	4a91      	ldr	r2, [pc, #580]	@ (800b0d0 <_printf_float+0x2cc>)
 800ae8c:	4b91      	ldr	r3, [pc, #580]	@ (800b0d4 <_printf_float+0x2d0>)
 800ae8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ae92:	bf94      	ite	ls
 800ae94:	4690      	movls	r8, r2
 800ae96:	4698      	movhi	r8, r3
 800ae98:	2303      	movs	r3, #3
 800ae9a:	6123      	str	r3, [r4, #16]
 800ae9c:	f02b 0304 	bic.w	r3, fp, #4
 800aea0:	6023      	str	r3, [r4, #0]
 800aea2:	f04f 0900 	mov.w	r9, #0
 800aea6:	9700      	str	r7, [sp, #0]
 800aea8:	4633      	mov	r3, r6
 800aeaa:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aeac:	4621      	mov	r1, r4
 800aeae:	4628      	mov	r0, r5
 800aeb0:	f000 f9d2 	bl	800b258 <_printf_common>
 800aeb4:	3001      	adds	r0, #1
 800aeb6:	f040 808d 	bne.w	800afd4 <_printf_float+0x1d0>
 800aeba:	f04f 30ff 	mov.w	r0, #4294967295
 800aebe:	b00d      	add	sp, #52	@ 0x34
 800aec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aec4:	4642      	mov	r2, r8
 800aec6:	464b      	mov	r3, r9
 800aec8:	4640      	mov	r0, r8
 800aeca:	4649      	mov	r1, r9
 800aecc:	f7f5 fe5e 	bl	8000b8c <__aeabi_dcmpun>
 800aed0:	b140      	cbz	r0, 800aee4 <_printf_float+0xe0>
 800aed2:	464b      	mov	r3, r9
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	bfbc      	itt	lt
 800aed8:	232d      	movlt	r3, #45	@ 0x2d
 800aeda:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aede:	4a7e      	ldr	r2, [pc, #504]	@ (800b0d8 <_printf_float+0x2d4>)
 800aee0:	4b7e      	ldr	r3, [pc, #504]	@ (800b0dc <_printf_float+0x2d8>)
 800aee2:	e7d4      	b.n	800ae8e <_printf_float+0x8a>
 800aee4:	6863      	ldr	r3, [r4, #4]
 800aee6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800aeea:	9206      	str	r2, [sp, #24]
 800aeec:	1c5a      	adds	r2, r3, #1
 800aeee:	d13b      	bne.n	800af68 <_printf_float+0x164>
 800aef0:	2306      	movs	r3, #6
 800aef2:	6063      	str	r3, [r4, #4]
 800aef4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800aef8:	2300      	movs	r3, #0
 800aefa:	6022      	str	r2, [r4, #0]
 800aefc:	9303      	str	r3, [sp, #12]
 800aefe:	ab0a      	add	r3, sp, #40	@ 0x28
 800af00:	e9cd a301 	strd	sl, r3, [sp, #4]
 800af04:	ab09      	add	r3, sp, #36	@ 0x24
 800af06:	9300      	str	r3, [sp, #0]
 800af08:	6861      	ldr	r1, [r4, #4]
 800af0a:	ec49 8b10 	vmov	d0, r8, r9
 800af0e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800af12:	4628      	mov	r0, r5
 800af14:	f7ff fed6 	bl	800acc4 <__cvt>
 800af18:	9b06      	ldr	r3, [sp, #24]
 800af1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af1c:	2b47      	cmp	r3, #71	@ 0x47
 800af1e:	4680      	mov	r8, r0
 800af20:	d129      	bne.n	800af76 <_printf_float+0x172>
 800af22:	1cc8      	adds	r0, r1, #3
 800af24:	db02      	blt.n	800af2c <_printf_float+0x128>
 800af26:	6863      	ldr	r3, [r4, #4]
 800af28:	4299      	cmp	r1, r3
 800af2a:	dd41      	ble.n	800afb0 <_printf_float+0x1ac>
 800af2c:	f1aa 0a02 	sub.w	sl, sl, #2
 800af30:	fa5f fa8a 	uxtb.w	sl, sl
 800af34:	3901      	subs	r1, #1
 800af36:	4652      	mov	r2, sl
 800af38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800af3c:	9109      	str	r1, [sp, #36]	@ 0x24
 800af3e:	f7ff ff26 	bl	800ad8e <__exponent>
 800af42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af44:	1813      	adds	r3, r2, r0
 800af46:	2a01      	cmp	r2, #1
 800af48:	4681      	mov	r9, r0
 800af4a:	6123      	str	r3, [r4, #16]
 800af4c:	dc02      	bgt.n	800af54 <_printf_float+0x150>
 800af4e:	6822      	ldr	r2, [r4, #0]
 800af50:	07d2      	lsls	r2, r2, #31
 800af52:	d501      	bpl.n	800af58 <_printf_float+0x154>
 800af54:	3301      	adds	r3, #1
 800af56:	6123      	str	r3, [r4, #16]
 800af58:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d0a2      	beq.n	800aea6 <_printf_float+0xa2>
 800af60:	232d      	movs	r3, #45	@ 0x2d
 800af62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af66:	e79e      	b.n	800aea6 <_printf_float+0xa2>
 800af68:	9a06      	ldr	r2, [sp, #24]
 800af6a:	2a47      	cmp	r2, #71	@ 0x47
 800af6c:	d1c2      	bne.n	800aef4 <_printf_float+0xf0>
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1c0      	bne.n	800aef4 <_printf_float+0xf0>
 800af72:	2301      	movs	r3, #1
 800af74:	e7bd      	b.n	800aef2 <_printf_float+0xee>
 800af76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800af7a:	d9db      	bls.n	800af34 <_printf_float+0x130>
 800af7c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800af80:	d118      	bne.n	800afb4 <_printf_float+0x1b0>
 800af82:	2900      	cmp	r1, #0
 800af84:	6863      	ldr	r3, [r4, #4]
 800af86:	dd0b      	ble.n	800afa0 <_printf_float+0x19c>
 800af88:	6121      	str	r1, [r4, #16]
 800af8a:	b913      	cbnz	r3, 800af92 <_printf_float+0x18e>
 800af8c:	6822      	ldr	r2, [r4, #0]
 800af8e:	07d0      	lsls	r0, r2, #31
 800af90:	d502      	bpl.n	800af98 <_printf_float+0x194>
 800af92:	3301      	adds	r3, #1
 800af94:	440b      	add	r3, r1
 800af96:	6123      	str	r3, [r4, #16]
 800af98:	65a1      	str	r1, [r4, #88]	@ 0x58
 800af9a:	f04f 0900 	mov.w	r9, #0
 800af9e:	e7db      	b.n	800af58 <_printf_float+0x154>
 800afa0:	b913      	cbnz	r3, 800afa8 <_printf_float+0x1a4>
 800afa2:	6822      	ldr	r2, [r4, #0]
 800afa4:	07d2      	lsls	r2, r2, #31
 800afa6:	d501      	bpl.n	800afac <_printf_float+0x1a8>
 800afa8:	3302      	adds	r3, #2
 800afaa:	e7f4      	b.n	800af96 <_printf_float+0x192>
 800afac:	2301      	movs	r3, #1
 800afae:	e7f2      	b.n	800af96 <_printf_float+0x192>
 800afb0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800afb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afb6:	4299      	cmp	r1, r3
 800afb8:	db05      	blt.n	800afc6 <_printf_float+0x1c2>
 800afba:	6823      	ldr	r3, [r4, #0]
 800afbc:	6121      	str	r1, [r4, #16]
 800afbe:	07d8      	lsls	r0, r3, #31
 800afc0:	d5ea      	bpl.n	800af98 <_printf_float+0x194>
 800afc2:	1c4b      	adds	r3, r1, #1
 800afc4:	e7e7      	b.n	800af96 <_printf_float+0x192>
 800afc6:	2900      	cmp	r1, #0
 800afc8:	bfd4      	ite	le
 800afca:	f1c1 0202 	rsble	r2, r1, #2
 800afce:	2201      	movgt	r2, #1
 800afd0:	4413      	add	r3, r2
 800afd2:	e7e0      	b.n	800af96 <_printf_float+0x192>
 800afd4:	6823      	ldr	r3, [r4, #0]
 800afd6:	055a      	lsls	r2, r3, #21
 800afd8:	d407      	bmi.n	800afea <_printf_float+0x1e6>
 800afda:	6923      	ldr	r3, [r4, #16]
 800afdc:	4642      	mov	r2, r8
 800afde:	4631      	mov	r1, r6
 800afe0:	4628      	mov	r0, r5
 800afe2:	47b8      	blx	r7
 800afe4:	3001      	adds	r0, #1
 800afe6:	d12b      	bne.n	800b040 <_printf_float+0x23c>
 800afe8:	e767      	b.n	800aeba <_printf_float+0xb6>
 800afea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800afee:	f240 80dd 	bls.w	800b1ac <_printf_float+0x3a8>
 800aff2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aff6:	2200      	movs	r2, #0
 800aff8:	2300      	movs	r3, #0
 800affa:	f7f5 fd95 	bl	8000b28 <__aeabi_dcmpeq>
 800affe:	2800      	cmp	r0, #0
 800b000:	d033      	beq.n	800b06a <_printf_float+0x266>
 800b002:	4a37      	ldr	r2, [pc, #220]	@ (800b0e0 <_printf_float+0x2dc>)
 800b004:	2301      	movs	r3, #1
 800b006:	4631      	mov	r1, r6
 800b008:	4628      	mov	r0, r5
 800b00a:	47b8      	blx	r7
 800b00c:	3001      	adds	r0, #1
 800b00e:	f43f af54 	beq.w	800aeba <_printf_float+0xb6>
 800b012:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b016:	4543      	cmp	r3, r8
 800b018:	db02      	blt.n	800b020 <_printf_float+0x21c>
 800b01a:	6823      	ldr	r3, [r4, #0]
 800b01c:	07d8      	lsls	r0, r3, #31
 800b01e:	d50f      	bpl.n	800b040 <_printf_float+0x23c>
 800b020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b024:	4631      	mov	r1, r6
 800b026:	4628      	mov	r0, r5
 800b028:	47b8      	blx	r7
 800b02a:	3001      	adds	r0, #1
 800b02c:	f43f af45 	beq.w	800aeba <_printf_float+0xb6>
 800b030:	f04f 0900 	mov.w	r9, #0
 800b034:	f108 38ff 	add.w	r8, r8, #4294967295
 800b038:	f104 0a1a 	add.w	sl, r4, #26
 800b03c:	45c8      	cmp	r8, r9
 800b03e:	dc09      	bgt.n	800b054 <_printf_float+0x250>
 800b040:	6823      	ldr	r3, [r4, #0]
 800b042:	079b      	lsls	r3, r3, #30
 800b044:	f100 8103 	bmi.w	800b24e <_printf_float+0x44a>
 800b048:	68e0      	ldr	r0, [r4, #12]
 800b04a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b04c:	4298      	cmp	r0, r3
 800b04e:	bfb8      	it	lt
 800b050:	4618      	movlt	r0, r3
 800b052:	e734      	b.n	800aebe <_printf_float+0xba>
 800b054:	2301      	movs	r3, #1
 800b056:	4652      	mov	r2, sl
 800b058:	4631      	mov	r1, r6
 800b05a:	4628      	mov	r0, r5
 800b05c:	47b8      	blx	r7
 800b05e:	3001      	adds	r0, #1
 800b060:	f43f af2b 	beq.w	800aeba <_printf_float+0xb6>
 800b064:	f109 0901 	add.w	r9, r9, #1
 800b068:	e7e8      	b.n	800b03c <_printf_float+0x238>
 800b06a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	dc39      	bgt.n	800b0e4 <_printf_float+0x2e0>
 800b070:	4a1b      	ldr	r2, [pc, #108]	@ (800b0e0 <_printf_float+0x2dc>)
 800b072:	2301      	movs	r3, #1
 800b074:	4631      	mov	r1, r6
 800b076:	4628      	mov	r0, r5
 800b078:	47b8      	blx	r7
 800b07a:	3001      	adds	r0, #1
 800b07c:	f43f af1d 	beq.w	800aeba <_printf_float+0xb6>
 800b080:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b084:	ea59 0303 	orrs.w	r3, r9, r3
 800b088:	d102      	bne.n	800b090 <_printf_float+0x28c>
 800b08a:	6823      	ldr	r3, [r4, #0]
 800b08c:	07d9      	lsls	r1, r3, #31
 800b08e:	d5d7      	bpl.n	800b040 <_printf_float+0x23c>
 800b090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b094:	4631      	mov	r1, r6
 800b096:	4628      	mov	r0, r5
 800b098:	47b8      	blx	r7
 800b09a:	3001      	adds	r0, #1
 800b09c:	f43f af0d 	beq.w	800aeba <_printf_float+0xb6>
 800b0a0:	f04f 0a00 	mov.w	sl, #0
 800b0a4:	f104 0b1a 	add.w	fp, r4, #26
 800b0a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0aa:	425b      	negs	r3, r3
 800b0ac:	4553      	cmp	r3, sl
 800b0ae:	dc01      	bgt.n	800b0b4 <_printf_float+0x2b0>
 800b0b0:	464b      	mov	r3, r9
 800b0b2:	e793      	b.n	800afdc <_printf_float+0x1d8>
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	465a      	mov	r2, fp
 800b0b8:	4631      	mov	r1, r6
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	47b8      	blx	r7
 800b0be:	3001      	adds	r0, #1
 800b0c0:	f43f aefb 	beq.w	800aeba <_printf_float+0xb6>
 800b0c4:	f10a 0a01 	add.w	sl, sl, #1
 800b0c8:	e7ee      	b.n	800b0a8 <_printf_float+0x2a4>
 800b0ca:	bf00      	nop
 800b0cc:	7fefffff 	.word	0x7fefffff
 800b0d0:	0800db68 	.word	0x0800db68
 800b0d4:	0800db6c 	.word	0x0800db6c
 800b0d8:	0800db70 	.word	0x0800db70
 800b0dc:	0800db74 	.word	0x0800db74
 800b0e0:	0800db78 	.word	0x0800db78
 800b0e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b0e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b0ea:	4553      	cmp	r3, sl
 800b0ec:	bfa8      	it	ge
 800b0ee:	4653      	movge	r3, sl
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	4699      	mov	r9, r3
 800b0f4:	dc36      	bgt.n	800b164 <_printf_float+0x360>
 800b0f6:	f04f 0b00 	mov.w	fp, #0
 800b0fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0fe:	f104 021a 	add.w	r2, r4, #26
 800b102:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b104:	9306      	str	r3, [sp, #24]
 800b106:	eba3 0309 	sub.w	r3, r3, r9
 800b10a:	455b      	cmp	r3, fp
 800b10c:	dc31      	bgt.n	800b172 <_printf_float+0x36e>
 800b10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b110:	459a      	cmp	sl, r3
 800b112:	dc3a      	bgt.n	800b18a <_printf_float+0x386>
 800b114:	6823      	ldr	r3, [r4, #0]
 800b116:	07da      	lsls	r2, r3, #31
 800b118:	d437      	bmi.n	800b18a <_printf_float+0x386>
 800b11a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b11c:	ebaa 0903 	sub.w	r9, sl, r3
 800b120:	9b06      	ldr	r3, [sp, #24]
 800b122:	ebaa 0303 	sub.w	r3, sl, r3
 800b126:	4599      	cmp	r9, r3
 800b128:	bfa8      	it	ge
 800b12a:	4699      	movge	r9, r3
 800b12c:	f1b9 0f00 	cmp.w	r9, #0
 800b130:	dc33      	bgt.n	800b19a <_printf_float+0x396>
 800b132:	f04f 0800 	mov.w	r8, #0
 800b136:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b13a:	f104 0b1a 	add.w	fp, r4, #26
 800b13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b140:	ebaa 0303 	sub.w	r3, sl, r3
 800b144:	eba3 0309 	sub.w	r3, r3, r9
 800b148:	4543      	cmp	r3, r8
 800b14a:	f77f af79 	ble.w	800b040 <_printf_float+0x23c>
 800b14e:	2301      	movs	r3, #1
 800b150:	465a      	mov	r2, fp
 800b152:	4631      	mov	r1, r6
 800b154:	4628      	mov	r0, r5
 800b156:	47b8      	blx	r7
 800b158:	3001      	adds	r0, #1
 800b15a:	f43f aeae 	beq.w	800aeba <_printf_float+0xb6>
 800b15e:	f108 0801 	add.w	r8, r8, #1
 800b162:	e7ec      	b.n	800b13e <_printf_float+0x33a>
 800b164:	4642      	mov	r2, r8
 800b166:	4631      	mov	r1, r6
 800b168:	4628      	mov	r0, r5
 800b16a:	47b8      	blx	r7
 800b16c:	3001      	adds	r0, #1
 800b16e:	d1c2      	bne.n	800b0f6 <_printf_float+0x2f2>
 800b170:	e6a3      	b.n	800aeba <_printf_float+0xb6>
 800b172:	2301      	movs	r3, #1
 800b174:	4631      	mov	r1, r6
 800b176:	4628      	mov	r0, r5
 800b178:	9206      	str	r2, [sp, #24]
 800b17a:	47b8      	blx	r7
 800b17c:	3001      	adds	r0, #1
 800b17e:	f43f ae9c 	beq.w	800aeba <_printf_float+0xb6>
 800b182:	9a06      	ldr	r2, [sp, #24]
 800b184:	f10b 0b01 	add.w	fp, fp, #1
 800b188:	e7bb      	b.n	800b102 <_printf_float+0x2fe>
 800b18a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b18e:	4631      	mov	r1, r6
 800b190:	4628      	mov	r0, r5
 800b192:	47b8      	blx	r7
 800b194:	3001      	adds	r0, #1
 800b196:	d1c0      	bne.n	800b11a <_printf_float+0x316>
 800b198:	e68f      	b.n	800aeba <_printf_float+0xb6>
 800b19a:	9a06      	ldr	r2, [sp, #24]
 800b19c:	464b      	mov	r3, r9
 800b19e:	4442      	add	r2, r8
 800b1a0:	4631      	mov	r1, r6
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	47b8      	blx	r7
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	d1c3      	bne.n	800b132 <_printf_float+0x32e>
 800b1aa:	e686      	b.n	800aeba <_printf_float+0xb6>
 800b1ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b1b0:	f1ba 0f01 	cmp.w	sl, #1
 800b1b4:	dc01      	bgt.n	800b1ba <_printf_float+0x3b6>
 800b1b6:	07db      	lsls	r3, r3, #31
 800b1b8:	d536      	bpl.n	800b228 <_printf_float+0x424>
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	4642      	mov	r2, r8
 800b1be:	4631      	mov	r1, r6
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	47b8      	blx	r7
 800b1c4:	3001      	adds	r0, #1
 800b1c6:	f43f ae78 	beq.w	800aeba <_printf_float+0xb6>
 800b1ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1ce:	4631      	mov	r1, r6
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	47b8      	blx	r7
 800b1d4:	3001      	adds	r0, #1
 800b1d6:	f43f ae70 	beq.w	800aeba <_printf_float+0xb6>
 800b1da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b1de:	2200      	movs	r2, #0
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1e6:	f7f5 fc9f 	bl	8000b28 <__aeabi_dcmpeq>
 800b1ea:	b9c0      	cbnz	r0, 800b21e <_printf_float+0x41a>
 800b1ec:	4653      	mov	r3, sl
 800b1ee:	f108 0201 	add.w	r2, r8, #1
 800b1f2:	4631      	mov	r1, r6
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	47b8      	blx	r7
 800b1f8:	3001      	adds	r0, #1
 800b1fa:	d10c      	bne.n	800b216 <_printf_float+0x412>
 800b1fc:	e65d      	b.n	800aeba <_printf_float+0xb6>
 800b1fe:	2301      	movs	r3, #1
 800b200:	465a      	mov	r2, fp
 800b202:	4631      	mov	r1, r6
 800b204:	4628      	mov	r0, r5
 800b206:	47b8      	blx	r7
 800b208:	3001      	adds	r0, #1
 800b20a:	f43f ae56 	beq.w	800aeba <_printf_float+0xb6>
 800b20e:	f108 0801 	add.w	r8, r8, #1
 800b212:	45d0      	cmp	r8, sl
 800b214:	dbf3      	blt.n	800b1fe <_printf_float+0x3fa>
 800b216:	464b      	mov	r3, r9
 800b218:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b21c:	e6df      	b.n	800afde <_printf_float+0x1da>
 800b21e:	f04f 0800 	mov.w	r8, #0
 800b222:	f104 0b1a 	add.w	fp, r4, #26
 800b226:	e7f4      	b.n	800b212 <_printf_float+0x40e>
 800b228:	2301      	movs	r3, #1
 800b22a:	4642      	mov	r2, r8
 800b22c:	e7e1      	b.n	800b1f2 <_printf_float+0x3ee>
 800b22e:	2301      	movs	r3, #1
 800b230:	464a      	mov	r2, r9
 800b232:	4631      	mov	r1, r6
 800b234:	4628      	mov	r0, r5
 800b236:	47b8      	blx	r7
 800b238:	3001      	adds	r0, #1
 800b23a:	f43f ae3e 	beq.w	800aeba <_printf_float+0xb6>
 800b23e:	f108 0801 	add.w	r8, r8, #1
 800b242:	68e3      	ldr	r3, [r4, #12]
 800b244:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b246:	1a5b      	subs	r3, r3, r1
 800b248:	4543      	cmp	r3, r8
 800b24a:	dcf0      	bgt.n	800b22e <_printf_float+0x42a>
 800b24c:	e6fc      	b.n	800b048 <_printf_float+0x244>
 800b24e:	f04f 0800 	mov.w	r8, #0
 800b252:	f104 0919 	add.w	r9, r4, #25
 800b256:	e7f4      	b.n	800b242 <_printf_float+0x43e>

0800b258 <_printf_common>:
 800b258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b25c:	4616      	mov	r6, r2
 800b25e:	4698      	mov	r8, r3
 800b260:	688a      	ldr	r2, [r1, #8]
 800b262:	690b      	ldr	r3, [r1, #16]
 800b264:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b268:	4293      	cmp	r3, r2
 800b26a:	bfb8      	it	lt
 800b26c:	4613      	movlt	r3, r2
 800b26e:	6033      	str	r3, [r6, #0]
 800b270:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b274:	4607      	mov	r7, r0
 800b276:	460c      	mov	r4, r1
 800b278:	b10a      	cbz	r2, 800b27e <_printf_common+0x26>
 800b27a:	3301      	adds	r3, #1
 800b27c:	6033      	str	r3, [r6, #0]
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	0699      	lsls	r1, r3, #26
 800b282:	bf42      	ittt	mi
 800b284:	6833      	ldrmi	r3, [r6, #0]
 800b286:	3302      	addmi	r3, #2
 800b288:	6033      	strmi	r3, [r6, #0]
 800b28a:	6825      	ldr	r5, [r4, #0]
 800b28c:	f015 0506 	ands.w	r5, r5, #6
 800b290:	d106      	bne.n	800b2a0 <_printf_common+0x48>
 800b292:	f104 0a19 	add.w	sl, r4, #25
 800b296:	68e3      	ldr	r3, [r4, #12]
 800b298:	6832      	ldr	r2, [r6, #0]
 800b29a:	1a9b      	subs	r3, r3, r2
 800b29c:	42ab      	cmp	r3, r5
 800b29e:	dc26      	bgt.n	800b2ee <_printf_common+0x96>
 800b2a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2a4:	6822      	ldr	r2, [r4, #0]
 800b2a6:	3b00      	subs	r3, #0
 800b2a8:	bf18      	it	ne
 800b2aa:	2301      	movne	r3, #1
 800b2ac:	0692      	lsls	r2, r2, #26
 800b2ae:	d42b      	bmi.n	800b308 <_printf_common+0xb0>
 800b2b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2b4:	4641      	mov	r1, r8
 800b2b6:	4638      	mov	r0, r7
 800b2b8:	47c8      	blx	r9
 800b2ba:	3001      	adds	r0, #1
 800b2bc:	d01e      	beq.n	800b2fc <_printf_common+0xa4>
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	6922      	ldr	r2, [r4, #16]
 800b2c2:	f003 0306 	and.w	r3, r3, #6
 800b2c6:	2b04      	cmp	r3, #4
 800b2c8:	bf02      	ittt	eq
 800b2ca:	68e5      	ldreq	r5, [r4, #12]
 800b2cc:	6833      	ldreq	r3, [r6, #0]
 800b2ce:	1aed      	subeq	r5, r5, r3
 800b2d0:	68a3      	ldr	r3, [r4, #8]
 800b2d2:	bf0c      	ite	eq
 800b2d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2d8:	2500      	movne	r5, #0
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	bfc4      	itt	gt
 800b2de:	1a9b      	subgt	r3, r3, r2
 800b2e0:	18ed      	addgt	r5, r5, r3
 800b2e2:	2600      	movs	r6, #0
 800b2e4:	341a      	adds	r4, #26
 800b2e6:	42b5      	cmp	r5, r6
 800b2e8:	d11a      	bne.n	800b320 <_printf_common+0xc8>
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	e008      	b.n	800b300 <_printf_common+0xa8>
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	4652      	mov	r2, sl
 800b2f2:	4641      	mov	r1, r8
 800b2f4:	4638      	mov	r0, r7
 800b2f6:	47c8      	blx	r9
 800b2f8:	3001      	adds	r0, #1
 800b2fa:	d103      	bne.n	800b304 <_printf_common+0xac>
 800b2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b304:	3501      	adds	r5, #1
 800b306:	e7c6      	b.n	800b296 <_printf_common+0x3e>
 800b308:	18e1      	adds	r1, r4, r3
 800b30a:	1c5a      	adds	r2, r3, #1
 800b30c:	2030      	movs	r0, #48	@ 0x30
 800b30e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b312:	4422      	add	r2, r4
 800b314:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b318:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b31c:	3302      	adds	r3, #2
 800b31e:	e7c7      	b.n	800b2b0 <_printf_common+0x58>
 800b320:	2301      	movs	r3, #1
 800b322:	4622      	mov	r2, r4
 800b324:	4641      	mov	r1, r8
 800b326:	4638      	mov	r0, r7
 800b328:	47c8      	blx	r9
 800b32a:	3001      	adds	r0, #1
 800b32c:	d0e6      	beq.n	800b2fc <_printf_common+0xa4>
 800b32e:	3601      	adds	r6, #1
 800b330:	e7d9      	b.n	800b2e6 <_printf_common+0x8e>
	...

0800b334 <_printf_i>:
 800b334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b338:	7e0f      	ldrb	r7, [r1, #24]
 800b33a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b33c:	2f78      	cmp	r7, #120	@ 0x78
 800b33e:	4691      	mov	r9, r2
 800b340:	4680      	mov	r8, r0
 800b342:	460c      	mov	r4, r1
 800b344:	469a      	mov	sl, r3
 800b346:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b34a:	d807      	bhi.n	800b35c <_printf_i+0x28>
 800b34c:	2f62      	cmp	r7, #98	@ 0x62
 800b34e:	d80a      	bhi.n	800b366 <_printf_i+0x32>
 800b350:	2f00      	cmp	r7, #0
 800b352:	f000 80d2 	beq.w	800b4fa <_printf_i+0x1c6>
 800b356:	2f58      	cmp	r7, #88	@ 0x58
 800b358:	f000 80b9 	beq.w	800b4ce <_printf_i+0x19a>
 800b35c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b360:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b364:	e03a      	b.n	800b3dc <_printf_i+0xa8>
 800b366:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b36a:	2b15      	cmp	r3, #21
 800b36c:	d8f6      	bhi.n	800b35c <_printf_i+0x28>
 800b36e:	a101      	add	r1, pc, #4	@ (adr r1, 800b374 <_printf_i+0x40>)
 800b370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b374:	0800b3cd 	.word	0x0800b3cd
 800b378:	0800b3e1 	.word	0x0800b3e1
 800b37c:	0800b35d 	.word	0x0800b35d
 800b380:	0800b35d 	.word	0x0800b35d
 800b384:	0800b35d 	.word	0x0800b35d
 800b388:	0800b35d 	.word	0x0800b35d
 800b38c:	0800b3e1 	.word	0x0800b3e1
 800b390:	0800b35d 	.word	0x0800b35d
 800b394:	0800b35d 	.word	0x0800b35d
 800b398:	0800b35d 	.word	0x0800b35d
 800b39c:	0800b35d 	.word	0x0800b35d
 800b3a0:	0800b4e1 	.word	0x0800b4e1
 800b3a4:	0800b40b 	.word	0x0800b40b
 800b3a8:	0800b49b 	.word	0x0800b49b
 800b3ac:	0800b35d 	.word	0x0800b35d
 800b3b0:	0800b35d 	.word	0x0800b35d
 800b3b4:	0800b503 	.word	0x0800b503
 800b3b8:	0800b35d 	.word	0x0800b35d
 800b3bc:	0800b40b 	.word	0x0800b40b
 800b3c0:	0800b35d 	.word	0x0800b35d
 800b3c4:	0800b35d 	.word	0x0800b35d
 800b3c8:	0800b4a3 	.word	0x0800b4a3
 800b3cc:	6833      	ldr	r3, [r6, #0]
 800b3ce:	1d1a      	adds	r2, r3, #4
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	6032      	str	r2, [r6, #0]
 800b3d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e09d      	b.n	800b51c <_printf_i+0x1e8>
 800b3e0:	6833      	ldr	r3, [r6, #0]
 800b3e2:	6820      	ldr	r0, [r4, #0]
 800b3e4:	1d19      	adds	r1, r3, #4
 800b3e6:	6031      	str	r1, [r6, #0]
 800b3e8:	0606      	lsls	r6, r0, #24
 800b3ea:	d501      	bpl.n	800b3f0 <_printf_i+0xbc>
 800b3ec:	681d      	ldr	r5, [r3, #0]
 800b3ee:	e003      	b.n	800b3f8 <_printf_i+0xc4>
 800b3f0:	0645      	lsls	r5, r0, #25
 800b3f2:	d5fb      	bpl.n	800b3ec <_printf_i+0xb8>
 800b3f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3f8:	2d00      	cmp	r5, #0
 800b3fa:	da03      	bge.n	800b404 <_printf_i+0xd0>
 800b3fc:	232d      	movs	r3, #45	@ 0x2d
 800b3fe:	426d      	negs	r5, r5
 800b400:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b404:	4859      	ldr	r0, [pc, #356]	@ (800b56c <_printf_i+0x238>)
 800b406:	230a      	movs	r3, #10
 800b408:	e011      	b.n	800b42e <_printf_i+0xfa>
 800b40a:	6821      	ldr	r1, [r4, #0]
 800b40c:	6833      	ldr	r3, [r6, #0]
 800b40e:	0608      	lsls	r0, r1, #24
 800b410:	f853 5b04 	ldr.w	r5, [r3], #4
 800b414:	d402      	bmi.n	800b41c <_printf_i+0xe8>
 800b416:	0649      	lsls	r1, r1, #25
 800b418:	bf48      	it	mi
 800b41a:	b2ad      	uxthmi	r5, r5
 800b41c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b41e:	4853      	ldr	r0, [pc, #332]	@ (800b56c <_printf_i+0x238>)
 800b420:	6033      	str	r3, [r6, #0]
 800b422:	bf14      	ite	ne
 800b424:	230a      	movne	r3, #10
 800b426:	2308      	moveq	r3, #8
 800b428:	2100      	movs	r1, #0
 800b42a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b42e:	6866      	ldr	r6, [r4, #4]
 800b430:	60a6      	str	r6, [r4, #8]
 800b432:	2e00      	cmp	r6, #0
 800b434:	bfa2      	ittt	ge
 800b436:	6821      	ldrge	r1, [r4, #0]
 800b438:	f021 0104 	bicge.w	r1, r1, #4
 800b43c:	6021      	strge	r1, [r4, #0]
 800b43e:	b90d      	cbnz	r5, 800b444 <_printf_i+0x110>
 800b440:	2e00      	cmp	r6, #0
 800b442:	d04b      	beq.n	800b4dc <_printf_i+0x1a8>
 800b444:	4616      	mov	r6, r2
 800b446:	fbb5 f1f3 	udiv	r1, r5, r3
 800b44a:	fb03 5711 	mls	r7, r3, r1, r5
 800b44e:	5dc7      	ldrb	r7, [r0, r7]
 800b450:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b454:	462f      	mov	r7, r5
 800b456:	42bb      	cmp	r3, r7
 800b458:	460d      	mov	r5, r1
 800b45a:	d9f4      	bls.n	800b446 <_printf_i+0x112>
 800b45c:	2b08      	cmp	r3, #8
 800b45e:	d10b      	bne.n	800b478 <_printf_i+0x144>
 800b460:	6823      	ldr	r3, [r4, #0]
 800b462:	07df      	lsls	r7, r3, #31
 800b464:	d508      	bpl.n	800b478 <_printf_i+0x144>
 800b466:	6923      	ldr	r3, [r4, #16]
 800b468:	6861      	ldr	r1, [r4, #4]
 800b46a:	4299      	cmp	r1, r3
 800b46c:	bfde      	ittt	le
 800b46e:	2330      	movle	r3, #48	@ 0x30
 800b470:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b474:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b478:	1b92      	subs	r2, r2, r6
 800b47a:	6122      	str	r2, [r4, #16]
 800b47c:	f8cd a000 	str.w	sl, [sp]
 800b480:	464b      	mov	r3, r9
 800b482:	aa03      	add	r2, sp, #12
 800b484:	4621      	mov	r1, r4
 800b486:	4640      	mov	r0, r8
 800b488:	f7ff fee6 	bl	800b258 <_printf_common>
 800b48c:	3001      	adds	r0, #1
 800b48e:	d14a      	bne.n	800b526 <_printf_i+0x1f2>
 800b490:	f04f 30ff 	mov.w	r0, #4294967295
 800b494:	b004      	add	sp, #16
 800b496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b49a:	6823      	ldr	r3, [r4, #0]
 800b49c:	f043 0320 	orr.w	r3, r3, #32
 800b4a0:	6023      	str	r3, [r4, #0]
 800b4a2:	4833      	ldr	r0, [pc, #204]	@ (800b570 <_printf_i+0x23c>)
 800b4a4:	2778      	movs	r7, #120	@ 0x78
 800b4a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	6831      	ldr	r1, [r6, #0]
 800b4ae:	061f      	lsls	r7, r3, #24
 800b4b0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4b4:	d402      	bmi.n	800b4bc <_printf_i+0x188>
 800b4b6:	065f      	lsls	r7, r3, #25
 800b4b8:	bf48      	it	mi
 800b4ba:	b2ad      	uxthmi	r5, r5
 800b4bc:	6031      	str	r1, [r6, #0]
 800b4be:	07d9      	lsls	r1, r3, #31
 800b4c0:	bf44      	itt	mi
 800b4c2:	f043 0320 	orrmi.w	r3, r3, #32
 800b4c6:	6023      	strmi	r3, [r4, #0]
 800b4c8:	b11d      	cbz	r5, 800b4d2 <_printf_i+0x19e>
 800b4ca:	2310      	movs	r3, #16
 800b4cc:	e7ac      	b.n	800b428 <_printf_i+0xf4>
 800b4ce:	4827      	ldr	r0, [pc, #156]	@ (800b56c <_printf_i+0x238>)
 800b4d0:	e7e9      	b.n	800b4a6 <_printf_i+0x172>
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	f023 0320 	bic.w	r3, r3, #32
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	e7f6      	b.n	800b4ca <_printf_i+0x196>
 800b4dc:	4616      	mov	r6, r2
 800b4de:	e7bd      	b.n	800b45c <_printf_i+0x128>
 800b4e0:	6833      	ldr	r3, [r6, #0]
 800b4e2:	6825      	ldr	r5, [r4, #0]
 800b4e4:	6961      	ldr	r1, [r4, #20]
 800b4e6:	1d18      	adds	r0, r3, #4
 800b4e8:	6030      	str	r0, [r6, #0]
 800b4ea:	062e      	lsls	r6, r5, #24
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	d501      	bpl.n	800b4f4 <_printf_i+0x1c0>
 800b4f0:	6019      	str	r1, [r3, #0]
 800b4f2:	e002      	b.n	800b4fa <_printf_i+0x1c6>
 800b4f4:	0668      	lsls	r0, r5, #25
 800b4f6:	d5fb      	bpl.n	800b4f0 <_printf_i+0x1bc>
 800b4f8:	8019      	strh	r1, [r3, #0]
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	6123      	str	r3, [r4, #16]
 800b4fe:	4616      	mov	r6, r2
 800b500:	e7bc      	b.n	800b47c <_printf_i+0x148>
 800b502:	6833      	ldr	r3, [r6, #0]
 800b504:	1d1a      	adds	r2, r3, #4
 800b506:	6032      	str	r2, [r6, #0]
 800b508:	681e      	ldr	r6, [r3, #0]
 800b50a:	6862      	ldr	r2, [r4, #4]
 800b50c:	2100      	movs	r1, #0
 800b50e:	4630      	mov	r0, r6
 800b510:	f7f4 fe8e 	bl	8000230 <memchr>
 800b514:	b108      	cbz	r0, 800b51a <_printf_i+0x1e6>
 800b516:	1b80      	subs	r0, r0, r6
 800b518:	6060      	str	r0, [r4, #4]
 800b51a:	6863      	ldr	r3, [r4, #4]
 800b51c:	6123      	str	r3, [r4, #16]
 800b51e:	2300      	movs	r3, #0
 800b520:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b524:	e7aa      	b.n	800b47c <_printf_i+0x148>
 800b526:	6923      	ldr	r3, [r4, #16]
 800b528:	4632      	mov	r2, r6
 800b52a:	4649      	mov	r1, r9
 800b52c:	4640      	mov	r0, r8
 800b52e:	47d0      	blx	sl
 800b530:	3001      	adds	r0, #1
 800b532:	d0ad      	beq.n	800b490 <_printf_i+0x15c>
 800b534:	6823      	ldr	r3, [r4, #0]
 800b536:	079b      	lsls	r3, r3, #30
 800b538:	d413      	bmi.n	800b562 <_printf_i+0x22e>
 800b53a:	68e0      	ldr	r0, [r4, #12]
 800b53c:	9b03      	ldr	r3, [sp, #12]
 800b53e:	4298      	cmp	r0, r3
 800b540:	bfb8      	it	lt
 800b542:	4618      	movlt	r0, r3
 800b544:	e7a6      	b.n	800b494 <_printf_i+0x160>
 800b546:	2301      	movs	r3, #1
 800b548:	4632      	mov	r2, r6
 800b54a:	4649      	mov	r1, r9
 800b54c:	4640      	mov	r0, r8
 800b54e:	47d0      	blx	sl
 800b550:	3001      	adds	r0, #1
 800b552:	d09d      	beq.n	800b490 <_printf_i+0x15c>
 800b554:	3501      	adds	r5, #1
 800b556:	68e3      	ldr	r3, [r4, #12]
 800b558:	9903      	ldr	r1, [sp, #12]
 800b55a:	1a5b      	subs	r3, r3, r1
 800b55c:	42ab      	cmp	r3, r5
 800b55e:	dcf2      	bgt.n	800b546 <_printf_i+0x212>
 800b560:	e7eb      	b.n	800b53a <_printf_i+0x206>
 800b562:	2500      	movs	r5, #0
 800b564:	f104 0619 	add.w	r6, r4, #25
 800b568:	e7f5      	b.n	800b556 <_printf_i+0x222>
 800b56a:	bf00      	nop
 800b56c:	0800db7a 	.word	0x0800db7a
 800b570:	0800db8b 	.word	0x0800db8b

0800b574 <std>:
 800b574:	2300      	movs	r3, #0
 800b576:	b510      	push	{r4, lr}
 800b578:	4604      	mov	r4, r0
 800b57a:	e9c0 3300 	strd	r3, r3, [r0]
 800b57e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b582:	6083      	str	r3, [r0, #8]
 800b584:	8181      	strh	r1, [r0, #12]
 800b586:	6643      	str	r3, [r0, #100]	@ 0x64
 800b588:	81c2      	strh	r2, [r0, #14]
 800b58a:	6183      	str	r3, [r0, #24]
 800b58c:	4619      	mov	r1, r3
 800b58e:	2208      	movs	r2, #8
 800b590:	305c      	adds	r0, #92	@ 0x5c
 800b592:	f000 f914 	bl	800b7be <memset>
 800b596:	4b0d      	ldr	r3, [pc, #52]	@ (800b5cc <std+0x58>)
 800b598:	6263      	str	r3, [r4, #36]	@ 0x24
 800b59a:	4b0d      	ldr	r3, [pc, #52]	@ (800b5d0 <std+0x5c>)
 800b59c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b59e:	4b0d      	ldr	r3, [pc, #52]	@ (800b5d4 <std+0x60>)
 800b5a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b5a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b5d8 <std+0x64>)
 800b5a4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b5a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b5dc <std+0x68>)
 800b5a8:	6224      	str	r4, [r4, #32]
 800b5aa:	429c      	cmp	r4, r3
 800b5ac:	d006      	beq.n	800b5bc <std+0x48>
 800b5ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b5b2:	4294      	cmp	r4, r2
 800b5b4:	d002      	beq.n	800b5bc <std+0x48>
 800b5b6:	33d0      	adds	r3, #208	@ 0xd0
 800b5b8:	429c      	cmp	r4, r3
 800b5ba:	d105      	bne.n	800b5c8 <std+0x54>
 800b5bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5c4:	f000 b978 	b.w	800b8b8 <__retarget_lock_init_recursive>
 800b5c8:	bd10      	pop	{r4, pc}
 800b5ca:	bf00      	nop
 800b5cc:	0800b739 	.word	0x0800b739
 800b5d0:	0800b75b 	.word	0x0800b75b
 800b5d4:	0800b793 	.word	0x0800b793
 800b5d8:	0800b7b7 	.word	0x0800b7b7
 800b5dc:	20001f9c 	.word	0x20001f9c

0800b5e0 <stdio_exit_handler>:
 800b5e0:	4a02      	ldr	r2, [pc, #8]	@ (800b5ec <stdio_exit_handler+0xc>)
 800b5e2:	4903      	ldr	r1, [pc, #12]	@ (800b5f0 <stdio_exit_handler+0x10>)
 800b5e4:	4803      	ldr	r0, [pc, #12]	@ (800b5f4 <stdio_exit_handler+0x14>)
 800b5e6:	f000 b869 	b.w	800b6bc <_fwalk_sglue>
 800b5ea:	bf00      	nop
 800b5ec:	20000110 	.word	0x20000110
 800b5f0:	0800d215 	.word	0x0800d215
 800b5f4:	20000120 	.word	0x20000120

0800b5f8 <cleanup_stdio>:
 800b5f8:	6841      	ldr	r1, [r0, #4]
 800b5fa:	4b0c      	ldr	r3, [pc, #48]	@ (800b62c <cleanup_stdio+0x34>)
 800b5fc:	4299      	cmp	r1, r3
 800b5fe:	b510      	push	{r4, lr}
 800b600:	4604      	mov	r4, r0
 800b602:	d001      	beq.n	800b608 <cleanup_stdio+0x10>
 800b604:	f001 fe06 	bl	800d214 <_fflush_r>
 800b608:	68a1      	ldr	r1, [r4, #8]
 800b60a:	4b09      	ldr	r3, [pc, #36]	@ (800b630 <cleanup_stdio+0x38>)
 800b60c:	4299      	cmp	r1, r3
 800b60e:	d002      	beq.n	800b616 <cleanup_stdio+0x1e>
 800b610:	4620      	mov	r0, r4
 800b612:	f001 fdff 	bl	800d214 <_fflush_r>
 800b616:	68e1      	ldr	r1, [r4, #12]
 800b618:	4b06      	ldr	r3, [pc, #24]	@ (800b634 <cleanup_stdio+0x3c>)
 800b61a:	4299      	cmp	r1, r3
 800b61c:	d004      	beq.n	800b628 <cleanup_stdio+0x30>
 800b61e:	4620      	mov	r0, r4
 800b620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b624:	f001 bdf6 	b.w	800d214 <_fflush_r>
 800b628:	bd10      	pop	{r4, pc}
 800b62a:	bf00      	nop
 800b62c:	20001f9c 	.word	0x20001f9c
 800b630:	20002004 	.word	0x20002004
 800b634:	2000206c 	.word	0x2000206c

0800b638 <global_stdio_init.part.0>:
 800b638:	b510      	push	{r4, lr}
 800b63a:	4b0b      	ldr	r3, [pc, #44]	@ (800b668 <global_stdio_init.part.0+0x30>)
 800b63c:	4c0b      	ldr	r4, [pc, #44]	@ (800b66c <global_stdio_init.part.0+0x34>)
 800b63e:	4a0c      	ldr	r2, [pc, #48]	@ (800b670 <global_stdio_init.part.0+0x38>)
 800b640:	601a      	str	r2, [r3, #0]
 800b642:	4620      	mov	r0, r4
 800b644:	2200      	movs	r2, #0
 800b646:	2104      	movs	r1, #4
 800b648:	f7ff ff94 	bl	800b574 <std>
 800b64c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b650:	2201      	movs	r2, #1
 800b652:	2109      	movs	r1, #9
 800b654:	f7ff ff8e 	bl	800b574 <std>
 800b658:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b65c:	2202      	movs	r2, #2
 800b65e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b662:	2112      	movs	r1, #18
 800b664:	f7ff bf86 	b.w	800b574 <std>
 800b668:	200020d4 	.word	0x200020d4
 800b66c:	20001f9c 	.word	0x20001f9c
 800b670:	0800b5e1 	.word	0x0800b5e1

0800b674 <__sfp_lock_acquire>:
 800b674:	4801      	ldr	r0, [pc, #4]	@ (800b67c <__sfp_lock_acquire+0x8>)
 800b676:	f000 b920 	b.w	800b8ba <__retarget_lock_acquire_recursive>
 800b67a:	bf00      	nop
 800b67c:	200020dd 	.word	0x200020dd

0800b680 <__sfp_lock_release>:
 800b680:	4801      	ldr	r0, [pc, #4]	@ (800b688 <__sfp_lock_release+0x8>)
 800b682:	f000 b91b 	b.w	800b8bc <__retarget_lock_release_recursive>
 800b686:	bf00      	nop
 800b688:	200020dd 	.word	0x200020dd

0800b68c <__sinit>:
 800b68c:	b510      	push	{r4, lr}
 800b68e:	4604      	mov	r4, r0
 800b690:	f7ff fff0 	bl	800b674 <__sfp_lock_acquire>
 800b694:	6a23      	ldr	r3, [r4, #32]
 800b696:	b11b      	cbz	r3, 800b6a0 <__sinit+0x14>
 800b698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b69c:	f7ff bff0 	b.w	800b680 <__sfp_lock_release>
 800b6a0:	4b04      	ldr	r3, [pc, #16]	@ (800b6b4 <__sinit+0x28>)
 800b6a2:	6223      	str	r3, [r4, #32]
 800b6a4:	4b04      	ldr	r3, [pc, #16]	@ (800b6b8 <__sinit+0x2c>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1f5      	bne.n	800b698 <__sinit+0xc>
 800b6ac:	f7ff ffc4 	bl	800b638 <global_stdio_init.part.0>
 800b6b0:	e7f2      	b.n	800b698 <__sinit+0xc>
 800b6b2:	bf00      	nop
 800b6b4:	0800b5f9 	.word	0x0800b5f9
 800b6b8:	200020d4 	.word	0x200020d4

0800b6bc <_fwalk_sglue>:
 800b6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6c0:	4607      	mov	r7, r0
 800b6c2:	4688      	mov	r8, r1
 800b6c4:	4614      	mov	r4, r2
 800b6c6:	2600      	movs	r6, #0
 800b6c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6cc:	f1b9 0901 	subs.w	r9, r9, #1
 800b6d0:	d505      	bpl.n	800b6de <_fwalk_sglue+0x22>
 800b6d2:	6824      	ldr	r4, [r4, #0]
 800b6d4:	2c00      	cmp	r4, #0
 800b6d6:	d1f7      	bne.n	800b6c8 <_fwalk_sglue+0xc>
 800b6d8:	4630      	mov	r0, r6
 800b6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6de:	89ab      	ldrh	r3, [r5, #12]
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d907      	bls.n	800b6f4 <_fwalk_sglue+0x38>
 800b6e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	d003      	beq.n	800b6f4 <_fwalk_sglue+0x38>
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	4638      	mov	r0, r7
 800b6f0:	47c0      	blx	r8
 800b6f2:	4306      	orrs	r6, r0
 800b6f4:	3568      	adds	r5, #104	@ 0x68
 800b6f6:	e7e9      	b.n	800b6cc <_fwalk_sglue+0x10>

0800b6f8 <siprintf>:
 800b6f8:	b40e      	push	{r1, r2, r3}
 800b6fa:	b500      	push	{lr}
 800b6fc:	b09c      	sub	sp, #112	@ 0x70
 800b6fe:	ab1d      	add	r3, sp, #116	@ 0x74
 800b700:	9002      	str	r0, [sp, #8]
 800b702:	9006      	str	r0, [sp, #24]
 800b704:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b708:	4809      	ldr	r0, [pc, #36]	@ (800b730 <siprintf+0x38>)
 800b70a:	9107      	str	r1, [sp, #28]
 800b70c:	9104      	str	r1, [sp, #16]
 800b70e:	4909      	ldr	r1, [pc, #36]	@ (800b734 <siprintf+0x3c>)
 800b710:	f853 2b04 	ldr.w	r2, [r3], #4
 800b714:	9105      	str	r1, [sp, #20]
 800b716:	6800      	ldr	r0, [r0, #0]
 800b718:	9301      	str	r3, [sp, #4]
 800b71a:	a902      	add	r1, sp, #8
 800b71c:	f001 fbfa 	bl	800cf14 <_svfiprintf_r>
 800b720:	9b02      	ldr	r3, [sp, #8]
 800b722:	2200      	movs	r2, #0
 800b724:	701a      	strb	r2, [r3, #0]
 800b726:	b01c      	add	sp, #112	@ 0x70
 800b728:	f85d eb04 	ldr.w	lr, [sp], #4
 800b72c:	b003      	add	sp, #12
 800b72e:	4770      	bx	lr
 800b730:	2000011c 	.word	0x2000011c
 800b734:	ffff0208 	.word	0xffff0208

0800b738 <__sread>:
 800b738:	b510      	push	{r4, lr}
 800b73a:	460c      	mov	r4, r1
 800b73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b740:	f000 f86c 	bl	800b81c <_read_r>
 800b744:	2800      	cmp	r0, #0
 800b746:	bfab      	itete	ge
 800b748:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b74a:	89a3      	ldrhlt	r3, [r4, #12]
 800b74c:	181b      	addge	r3, r3, r0
 800b74e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b752:	bfac      	ite	ge
 800b754:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b756:	81a3      	strhlt	r3, [r4, #12]
 800b758:	bd10      	pop	{r4, pc}

0800b75a <__swrite>:
 800b75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b75e:	461f      	mov	r7, r3
 800b760:	898b      	ldrh	r3, [r1, #12]
 800b762:	05db      	lsls	r3, r3, #23
 800b764:	4605      	mov	r5, r0
 800b766:	460c      	mov	r4, r1
 800b768:	4616      	mov	r6, r2
 800b76a:	d505      	bpl.n	800b778 <__swrite+0x1e>
 800b76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b770:	2302      	movs	r3, #2
 800b772:	2200      	movs	r2, #0
 800b774:	f000 f840 	bl	800b7f8 <_lseek_r>
 800b778:	89a3      	ldrh	r3, [r4, #12]
 800b77a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b77e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b782:	81a3      	strh	r3, [r4, #12]
 800b784:	4632      	mov	r2, r6
 800b786:	463b      	mov	r3, r7
 800b788:	4628      	mov	r0, r5
 800b78a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b78e:	f000 b857 	b.w	800b840 <_write_r>

0800b792 <__sseek>:
 800b792:	b510      	push	{r4, lr}
 800b794:	460c      	mov	r4, r1
 800b796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b79a:	f000 f82d 	bl	800b7f8 <_lseek_r>
 800b79e:	1c43      	adds	r3, r0, #1
 800b7a0:	89a3      	ldrh	r3, [r4, #12]
 800b7a2:	bf15      	itete	ne
 800b7a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b7a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b7aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b7ae:	81a3      	strheq	r3, [r4, #12]
 800b7b0:	bf18      	it	ne
 800b7b2:	81a3      	strhne	r3, [r4, #12]
 800b7b4:	bd10      	pop	{r4, pc}

0800b7b6 <__sclose>:
 800b7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ba:	f000 b80d 	b.w	800b7d8 <_close_r>

0800b7be <memset>:
 800b7be:	4402      	add	r2, r0
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d100      	bne.n	800b7c8 <memset+0xa>
 800b7c6:	4770      	bx	lr
 800b7c8:	f803 1b01 	strb.w	r1, [r3], #1
 800b7cc:	e7f9      	b.n	800b7c2 <memset+0x4>
	...

0800b7d0 <_localeconv_r>:
 800b7d0:	4800      	ldr	r0, [pc, #0]	@ (800b7d4 <_localeconv_r+0x4>)
 800b7d2:	4770      	bx	lr
 800b7d4:	2000025c 	.word	0x2000025c

0800b7d8 <_close_r>:
 800b7d8:	b538      	push	{r3, r4, r5, lr}
 800b7da:	4d06      	ldr	r5, [pc, #24]	@ (800b7f4 <_close_r+0x1c>)
 800b7dc:	2300      	movs	r3, #0
 800b7de:	4604      	mov	r4, r0
 800b7e0:	4608      	mov	r0, r1
 800b7e2:	602b      	str	r3, [r5, #0]
 800b7e4:	f7f6 fb5c 	bl	8001ea0 <_close>
 800b7e8:	1c43      	adds	r3, r0, #1
 800b7ea:	d102      	bne.n	800b7f2 <_close_r+0x1a>
 800b7ec:	682b      	ldr	r3, [r5, #0]
 800b7ee:	b103      	cbz	r3, 800b7f2 <_close_r+0x1a>
 800b7f0:	6023      	str	r3, [r4, #0]
 800b7f2:	bd38      	pop	{r3, r4, r5, pc}
 800b7f4:	200020d8 	.word	0x200020d8

0800b7f8 <_lseek_r>:
 800b7f8:	b538      	push	{r3, r4, r5, lr}
 800b7fa:	4d07      	ldr	r5, [pc, #28]	@ (800b818 <_lseek_r+0x20>)
 800b7fc:	4604      	mov	r4, r0
 800b7fe:	4608      	mov	r0, r1
 800b800:	4611      	mov	r1, r2
 800b802:	2200      	movs	r2, #0
 800b804:	602a      	str	r2, [r5, #0]
 800b806:	461a      	mov	r2, r3
 800b808:	f7f6 fb71 	bl	8001eee <_lseek>
 800b80c:	1c43      	adds	r3, r0, #1
 800b80e:	d102      	bne.n	800b816 <_lseek_r+0x1e>
 800b810:	682b      	ldr	r3, [r5, #0]
 800b812:	b103      	cbz	r3, 800b816 <_lseek_r+0x1e>
 800b814:	6023      	str	r3, [r4, #0]
 800b816:	bd38      	pop	{r3, r4, r5, pc}
 800b818:	200020d8 	.word	0x200020d8

0800b81c <_read_r>:
 800b81c:	b538      	push	{r3, r4, r5, lr}
 800b81e:	4d07      	ldr	r5, [pc, #28]	@ (800b83c <_read_r+0x20>)
 800b820:	4604      	mov	r4, r0
 800b822:	4608      	mov	r0, r1
 800b824:	4611      	mov	r1, r2
 800b826:	2200      	movs	r2, #0
 800b828:	602a      	str	r2, [r5, #0]
 800b82a:	461a      	mov	r2, r3
 800b82c:	f7f6 faff 	bl	8001e2e <_read>
 800b830:	1c43      	adds	r3, r0, #1
 800b832:	d102      	bne.n	800b83a <_read_r+0x1e>
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	b103      	cbz	r3, 800b83a <_read_r+0x1e>
 800b838:	6023      	str	r3, [r4, #0]
 800b83a:	bd38      	pop	{r3, r4, r5, pc}
 800b83c:	200020d8 	.word	0x200020d8

0800b840 <_write_r>:
 800b840:	b538      	push	{r3, r4, r5, lr}
 800b842:	4d07      	ldr	r5, [pc, #28]	@ (800b860 <_write_r+0x20>)
 800b844:	4604      	mov	r4, r0
 800b846:	4608      	mov	r0, r1
 800b848:	4611      	mov	r1, r2
 800b84a:	2200      	movs	r2, #0
 800b84c:	602a      	str	r2, [r5, #0]
 800b84e:	461a      	mov	r2, r3
 800b850:	f7f6 fb0a 	bl	8001e68 <_write>
 800b854:	1c43      	adds	r3, r0, #1
 800b856:	d102      	bne.n	800b85e <_write_r+0x1e>
 800b858:	682b      	ldr	r3, [r5, #0]
 800b85a:	b103      	cbz	r3, 800b85e <_write_r+0x1e>
 800b85c:	6023      	str	r3, [r4, #0]
 800b85e:	bd38      	pop	{r3, r4, r5, pc}
 800b860:	200020d8 	.word	0x200020d8

0800b864 <__errno>:
 800b864:	4b01      	ldr	r3, [pc, #4]	@ (800b86c <__errno+0x8>)
 800b866:	6818      	ldr	r0, [r3, #0]
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	2000011c 	.word	0x2000011c

0800b870 <__libc_init_array>:
 800b870:	b570      	push	{r4, r5, r6, lr}
 800b872:	4d0d      	ldr	r5, [pc, #52]	@ (800b8a8 <__libc_init_array+0x38>)
 800b874:	4c0d      	ldr	r4, [pc, #52]	@ (800b8ac <__libc_init_array+0x3c>)
 800b876:	1b64      	subs	r4, r4, r5
 800b878:	10a4      	asrs	r4, r4, #2
 800b87a:	2600      	movs	r6, #0
 800b87c:	42a6      	cmp	r6, r4
 800b87e:	d109      	bne.n	800b894 <__libc_init_array+0x24>
 800b880:	4d0b      	ldr	r5, [pc, #44]	@ (800b8b0 <__libc_init_array+0x40>)
 800b882:	4c0c      	ldr	r4, [pc, #48]	@ (800b8b4 <__libc_init_array+0x44>)
 800b884:	f002 f864 	bl	800d950 <_init>
 800b888:	1b64      	subs	r4, r4, r5
 800b88a:	10a4      	asrs	r4, r4, #2
 800b88c:	2600      	movs	r6, #0
 800b88e:	42a6      	cmp	r6, r4
 800b890:	d105      	bne.n	800b89e <__libc_init_array+0x2e>
 800b892:	bd70      	pop	{r4, r5, r6, pc}
 800b894:	f855 3b04 	ldr.w	r3, [r5], #4
 800b898:	4798      	blx	r3
 800b89a:	3601      	adds	r6, #1
 800b89c:	e7ee      	b.n	800b87c <__libc_init_array+0xc>
 800b89e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8a2:	4798      	blx	r3
 800b8a4:	3601      	adds	r6, #1
 800b8a6:	e7f2      	b.n	800b88e <__libc_init_array+0x1e>
 800b8a8:	0800dee0 	.word	0x0800dee0
 800b8ac:	0800dee0 	.word	0x0800dee0
 800b8b0:	0800dee0 	.word	0x0800dee0
 800b8b4:	0800dee4 	.word	0x0800dee4

0800b8b8 <__retarget_lock_init_recursive>:
 800b8b8:	4770      	bx	lr

0800b8ba <__retarget_lock_acquire_recursive>:
 800b8ba:	4770      	bx	lr

0800b8bc <__retarget_lock_release_recursive>:
 800b8bc:	4770      	bx	lr

0800b8be <quorem>:
 800b8be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c2:	6903      	ldr	r3, [r0, #16]
 800b8c4:	690c      	ldr	r4, [r1, #16]
 800b8c6:	42a3      	cmp	r3, r4
 800b8c8:	4607      	mov	r7, r0
 800b8ca:	db7e      	blt.n	800b9ca <quorem+0x10c>
 800b8cc:	3c01      	subs	r4, #1
 800b8ce:	f101 0814 	add.w	r8, r1, #20
 800b8d2:	00a3      	lsls	r3, r4, #2
 800b8d4:	f100 0514 	add.w	r5, r0, #20
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8de:	9301      	str	r3, [sp, #4]
 800b8e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b8e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b8f0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b8f4:	d32e      	bcc.n	800b954 <quorem+0x96>
 800b8f6:	f04f 0a00 	mov.w	sl, #0
 800b8fa:	46c4      	mov	ip, r8
 800b8fc:	46ae      	mov	lr, r5
 800b8fe:	46d3      	mov	fp, sl
 800b900:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b904:	b298      	uxth	r0, r3
 800b906:	fb06 a000 	mla	r0, r6, r0, sl
 800b90a:	0c02      	lsrs	r2, r0, #16
 800b90c:	0c1b      	lsrs	r3, r3, #16
 800b90e:	fb06 2303 	mla	r3, r6, r3, r2
 800b912:	f8de 2000 	ldr.w	r2, [lr]
 800b916:	b280      	uxth	r0, r0
 800b918:	b292      	uxth	r2, r2
 800b91a:	1a12      	subs	r2, r2, r0
 800b91c:	445a      	add	r2, fp
 800b91e:	f8de 0000 	ldr.w	r0, [lr]
 800b922:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b926:	b29b      	uxth	r3, r3
 800b928:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b92c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b930:	b292      	uxth	r2, r2
 800b932:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b936:	45e1      	cmp	r9, ip
 800b938:	f84e 2b04 	str.w	r2, [lr], #4
 800b93c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b940:	d2de      	bcs.n	800b900 <quorem+0x42>
 800b942:	9b00      	ldr	r3, [sp, #0]
 800b944:	58eb      	ldr	r3, [r5, r3]
 800b946:	b92b      	cbnz	r3, 800b954 <quorem+0x96>
 800b948:	9b01      	ldr	r3, [sp, #4]
 800b94a:	3b04      	subs	r3, #4
 800b94c:	429d      	cmp	r5, r3
 800b94e:	461a      	mov	r2, r3
 800b950:	d32f      	bcc.n	800b9b2 <quorem+0xf4>
 800b952:	613c      	str	r4, [r7, #16]
 800b954:	4638      	mov	r0, r7
 800b956:	f001 f979 	bl	800cc4c <__mcmp>
 800b95a:	2800      	cmp	r0, #0
 800b95c:	db25      	blt.n	800b9aa <quorem+0xec>
 800b95e:	4629      	mov	r1, r5
 800b960:	2000      	movs	r0, #0
 800b962:	f858 2b04 	ldr.w	r2, [r8], #4
 800b966:	f8d1 c000 	ldr.w	ip, [r1]
 800b96a:	fa1f fe82 	uxth.w	lr, r2
 800b96e:	fa1f f38c 	uxth.w	r3, ip
 800b972:	eba3 030e 	sub.w	r3, r3, lr
 800b976:	4403      	add	r3, r0
 800b978:	0c12      	lsrs	r2, r2, #16
 800b97a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b97e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b982:	b29b      	uxth	r3, r3
 800b984:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b988:	45c1      	cmp	r9, r8
 800b98a:	f841 3b04 	str.w	r3, [r1], #4
 800b98e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b992:	d2e6      	bcs.n	800b962 <quorem+0xa4>
 800b994:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b998:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b99c:	b922      	cbnz	r2, 800b9a8 <quorem+0xea>
 800b99e:	3b04      	subs	r3, #4
 800b9a0:	429d      	cmp	r5, r3
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	d30b      	bcc.n	800b9be <quorem+0x100>
 800b9a6:	613c      	str	r4, [r7, #16]
 800b9a8:	3601      	adds	r6, #1
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	b003      	add	sp, #12
 800b9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b2:	6812      	ldr	r2, [r2, #0]
 800b9b4:	3b04      	subs	r3, #4
 800b9b6:	2a00      	cmp	r2, #0
 800b9b8:	d1cb      	bne.n	800b952 <quorem+0x94>
 800b9ba:	3c01      	subs	r4, #1
 800b9bc:	e7c6      	b.n	800b94c <quorem+0x8e>
 800b9be:	6812      	ldr	r2, [r2, #0]
 800b9c0:	3b04      	subs	r3, #4
 800b9c2:	2a00      	cmp	r2, #0
 800b9c4:	d1ef      	bne.n	800b9a6 <quorem+0xe8>
 800b9c6:	3c01      	subs	r4, #1
 800b9c8:	e7ea      	b.n	800b9a0 <quorem+0xe2>
 800b9ca:	2000      	movs	r0, #0
 800b9cc:	e7ee      	b.n	800b9ac <quorem+0xee>
	...

0800b9d0 <_dtoa_r>:
 800b9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d4:	69c7      	ldr	r7, [r0, #28]
 800b9d6:	b099      	sub	sp, #100	@ 0x64
 800b9d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b9dc:	ec55 4b10 	vmov	r4, r5, d0
 800b9e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b9e2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b9e4:	4683      	mov	fp, r0
 800b9e6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b9e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b9ea:	b97f      	cbnz	r7, 800ba0c <_dtoa_r+0x3c>
 800b9ec:	2010      	movs	r0, #16
 800b9ee:	f000 fdfd 	bl	800c5ec <malloc>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b9f8:	b920      	cbnz	r0, 800ba04 <_dtoa_r+0x34>
 800b9fa:	4ba7      	ldr	r3, [pc, #668]	@ (800bc98 <_dtoa_r+0x2c8>)
 800b9fc:	21ef      	movs	r1, #239	@ 0xef
 800b9fe:	48a7      	ldr	r0, [pc, #668]	@ (800bc9c <_dtoa_r+0x2cc>)
 800ba00:	f001 fc68 	bl	800d2d4 <__assert_func>
 800ba04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ba08:	6007      	str	r7, [r0, #0]
 800ba0a:	60c7      	str	r7, [r0, #12]
 800ba0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ba10:	6819      	ldr	r1, [r3, #0]
 800ba12:	b159      	cbz	r1, 800ba2c <_dtoa_r+0x5c>
 800ba14:	685a      	ldr	r2, [r3, #4]
 800ba16:	604a      	str	r2, [r1, #4]
 800ba18:	2301      	movs	r3, #1
 800ba1a:	4093      	lsls	r3, r2
 800ba1c:	608b      	str	r3, [r1, #8]
 800ba1e:	4658      	mov	r0, fp
 800ba20:	f000 feda 	bl	800c7d8 <_Bfree>
 800ba24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	601a      	str	r2, [r3, #0]
 800ba2c:	1e2b      	subs	r3, r5, #0
 800ba2e:	bfb9      	ittee	lt
 800ba30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ba34:	9303      	strlt	r3, [sp, #12]
 800ba36:	2300      	movge	r3, #0
 800ba38:	6033      	strge	r3, [r6, #0]
 800ba3a:	9f03      	ldr	r7, [sp, #12]
 800ba3c:	4b98      	ldr	r3, [pc, #608]	@ (800bca0 <_dtoa_r+0x2d0>)
 800ba3e:	bfbc      	itt	lt
 800ba40:	2201      	movlt	r2, #1
 800ba42:	6032      	strlt	r2, [r6, #0]
 800ba44:	43bb      	bics	r3, r7
 800ba46:	d112      	bne.n	800ba6e <_dtoa_r+0x9e>
 800ba48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ba4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ba4e:	6013      	str	r3, [r2, #0]
 800ba50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba54:	4323      	orrs	r3, r4
 800ba56:	f000 854d 	beq.w	800c4f4 <_dtoa_r+0xb24>
 800ba5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bcb4 <_dtoa_r+0x2e4>
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 854f 	beq.w	800c504 <_dtoa_r+0xb34>
 800ba66:	f10a 0303 	add.w	r3, sl, #3
 800ba6a:	f000 bd49 	b.w	800c500 <_dtoa_r+0xb30>
 800ba6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba72:	2200      	movs	r2, #0
 800ba74:	ec51 0b17 	vmov	r0, r1, d7
 800ba78:	2300      	movs	r3, #0
 800ba7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ba7e:	f7f5 f853 	bl	8000b28 <__aeabi_dcmpeq>
 800ba82:	4680      	mov	r8, r0
 800ba84:	b158      	cbz	r0, 800ba9e <_dtoa_r+0xce>
 800ba86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ba88:	2301      	movs	r3, #1
 800ba8a:	6013      	str	r3, [r2, #0]
 800ba8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba8e:	b113      	cbz	r3, 800ba96 <_dtoa_r+0xc6>
 800ba90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ba92:	4b84      	ldr	r3, [pc, #528]	@ (800bca4 <_dtoa_r+0x2d4>)
 800ba94:	6013      	str	r3, [r2, #0]
 800ba96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bcb8 <_dtoa_r+0x2e8>
 800ba9a:	f000 bd33 	b.w	800c504 <_dtoa_r+0xb34>
 800ba9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800baa2:	aa16      	add	r2, sp, #88	@ 0x58
 800baa4:	a917      	add	r1, sp, #92	@ 0x5c
 800baa6:	4658      	mov	r0, fp
 800baa8:	f001 f980 	bl	800cdac <__d2b>
 800baac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bab0:	4681      	mov	r9, r0
 800bab2:	2e00      	cmp	r6, #0
 800bab4:	d077      	beq.n	800bba6 <_dtoa_r+0x1d6>
 800bab6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bab8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800babc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bac4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bac8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bacc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bad0:	4619      	mov	r1, r3
 800bad2:	2200      	movs	r2, #0
 800bad4:	4b74      	ldr	r3, [pc, #464]	@ (800bca8 <_dtoa_r+0x2d8>)
 800bad6:	f7f4 fc07 	bl	80002e8 <__aeabi_dsub>
 800bada:	a369      	add	r3, pc, #420	@ (adr r3, 800bc80 <_dtoa_r+0x2b0>)
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	f7f4 fdba 	bl	8000658 <__aeabi_dmul>
 800bae4:	a368      	add	r3, pc, #416	@ (adr r3, 800bc88 <_dtoa_r+0x2b8>)
 800bae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baea:	f7f4 fbff 	bl	80002ec <__adddf3>
 800baee:	4604      	mov	r4, r0
 800baf0:	4630      	mov	r0, r6
 800baf2:	460d      	mov	r5, r1
 800baf4:	f7f4 fd46 	bl	8000584 <__aeabi_i2d>
 800baf8:	a365      	add	r3, pc, #404	@ (adr r3, 800bc90 <_dtoa_r+0x2c0>)
 800bafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafe:	f7f4 fdab 	bl	8000658 <__aeabi_dmul>
 800bb02:	4602      	mov	r2, r0
 800bb04:	460b      	mov	r3, r1
 800bb06:	4620      	mov	r0, r4
 800bb08:	4629      	mov	r1, r5
 800bb0a:	f7f4 fbef 	bl	80002ec <__adddf3>
 800bb0e:	4604      	mov	r4, r0
 800bb10:	460d      	mov	r5, r1
 800bb12:	f7f5 f851 	bl	8000bb8 <__aeabi_d2iz>
 800bb16:	2200      	movs	r2, #0
 800bb18:	4607      	mov	r7, r0
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	4629      	mov	r1, r5
 800bb20:	f7f5 f80c 	bl	8000b3c <__aeabi_dcmplt>
 800bb24:	b140      	cbz	r0, 800bb38 <_dtoa_r+0x168>
 800bb26:	4638      	mov	r0, r7
 800bb28:	f7f4 fd2c 	bl	8000584 <__aeabi_i2d>
 800bb2c:	4622      	mov	r2, r4
 800bb2e:	462b      	mov	r3, r5
 800bb30:	f7f4 fffa 	bl	8000b28 <__aeabi_dcmpeq>
 800bb34:	b900      	cbnz	r0, 800bb38 <_dtoa_r+0x168>
 800bb36:	3f01      	subs	r7, #1
 800bb38:	2f16      	cmp	r7, #22
 800bb3a:	d851      	bhi.n	800bbe0 <_dtoa_r+0x210>
 800bb3c:	4b5b      	ldr	r3, [pc, #364]	@ (800bcac <_dtoa_r+0x2dc>)
 800bb3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb4a:	f7f4 fff7 	bl	8000b3c <__aeabi_dcmplt>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d048      	beq.n	800bbe4 <_dtoa_r+0x214>
 800bb52:	3f01      	subs	r7, #1
 800bb54:	2300      	movs	r3, #0
 800bb56:	9312      	str	r3, [sp, #72]	@ 0x48
 800bb58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bb5a:	1b9b      	subs	r3, r3, r6
 800bb5c:	1e5a      	subs	r2, r3, #1
 800bb5e:	bf44      	itt	mi
 800bb60:	f1c3 0801 	rsbmi	r8, r3, #1
 800bb64:	2300      	movmi	r3, #0
 800bb66:	9208      	str	r2, [sp, #32]
 800bb68:	bf54      	ite	pl
 800bb6a:	f04f 0800 	movpl.w	r8, #0
 800bb6e:	9308      	strmi	r3, [sp, #32]
 800bb70:	2f00      	cmp	r7, #0
 800bb72:	db39      	blt.n	800bbe8 <_dtoa_r+0x218>
 800bb74:	9b08      	ldr	r3, [sp, #32]
 800bb76:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bb78:	443b      	add	r3, r7
 800bb7a:	9308      	str	r3, [sp, #32]
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb82:	2b09      	cmp	r3, #9
 800bb84:	d864      	bhi.n	800bc50 <_dtoa_r+0x280>
 800bb86:	2b05      	cmp	r3, #5
 800bb88:	bfc4      	itt	gt
 800bb8a:	3b04      	subgt	r3, #4
 800bb8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bb8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb90:	f1a3 0302 	sub.w	r3, r3, #2
 800bb94:	bfcc      	ite	gt
 800bb96:	2400      	movgt	r4, #0
 800bb98:	2401      	movle	r4, #1
 800bb9a:	2b03      	cmp	r3, #3
 800bb9c:	d863      	bhi.n	800bc66 <_dtoa_r+0x296>
 800bb9e:	e8df f003 	tbb	[pc, r3]
 800bba2:	372a      	.short	0x372a
 800bba4:	5535      	.short	0x5535
 800bba6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bbaa:	441e      	add	r6, r3
 800bbac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bbb0:	2b20      	cmp	r3, #32
 800bbb2:	bfc1      	itttt	gt
 800bbb4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bbb8:	409f      	lslgt	r7, r3
 800bbba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bbbe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bbc2:	bfd6      	itet	le
 800bbc4:	f1c3 0320 	rsble	r3, r3, #32
 800bbc8:	ea47 0003 	orrgt.w	r0, r7, r3
 800bbcc:	fa04 f003 	lslle.w	r0, r4, r3
 800bbd0:	f7f4 fcc8 	bl	8000564 <__aeabi_ui2d>
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bbda:	3e01      	subs	r6, #1
 800bbdc:	9214      	str	r2, [sp, #80]	@ 0x50
 800bbde:	e777      	b.n	800bad0 <_dtoa_r+0x100>
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e7b8      	b.n	800bb56 <_dtoa_r+0x186>
 800bbe4:	9012      	str	r0, [sp, #72]	@ 0x48
 800bbe6:	e7b7      	b.n	800bb58 <_dtoa_r+0x188>
 800bbe8:	427b      	negs	r3, r7
 800bbea:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbec:	2300      	movs	r3, #0
 800bbee:	eba8 0807 	sub.w	r8, r8, r7
 800bbf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bbf4:	e7c4      	b.n	800bb80 <_dtoa_r+0x1b0>
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bbfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	dc35      	bgt.n	800bc6c <_dtoa_r+0x29c>
 800bc00:	2301      	movs	r3, #1
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	9307      	str	r3, [sp, #28]
 800bc06:	461a      	mov	r2, r3
 800bc08:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc0a:	e00b      	b.n	800bc24 <_dtoa_r+0x254>
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e7f3      	b.n	800bbf8 <_dtoa_r+0x228>
 800bc10:	2300      	movs	r3, #0
 800bc12:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc16:	18fb      	adds	r3, r7, r3
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	9307      	str	r3, [sp, #28]
 800bc20:	bfb8      	it	lt
 800bc22:	2301      	movlt	r3, #1
 800bc24:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bc28:	2100      	movs	r1, #0
 800bc2a:	2204      	movs	r2, #4
 800bc2c:	f102 0514 	add.w	r5, r2, #20
 800bc30:	429d      	cmp	r5, r3
 800bc32:	d91f      	bls.n	800bc74 <_dtoa_r+0x2a4>
 800bc34:	6041      	str	r1, [r0, #4]
 800bc36:	4658      	mov	r0, fp
 800bc38:	f000 fd8e 	bl	800c758 <_Balloc>
 800bc3c:	4682      	mov	sl, r0
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	d13c      	bne.n	800bcbc <_dtoa_r+0x2ec>
 800bc42:	4b1b      	ldr	r3, [pc, #108]	@ (800bcb0 <_dtoa_r+0x2e0>)
 800bc44:	4602      	mov	r2, r0
 800bc46:	f240 11af 	movw	r1, #431	@ 0x1af
 800bc4a:	e6d8      	b.n	800b9fe <_dtoa_r+0x2e>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e7e0      	b.n	800bc12 <_dtoa_r+0x242>
 800bc50:	2401      	movs	r4, #1
 800bc52:	2300      	movs	r3, #0
 800bc54:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc56:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bc58:	f04f 33ff 	mov.w	r3, #4294967295
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	9307      	str	r3, [sp, #28]
 800bc60:	2200      	movs	r2, #0
 800bc62:	2312      	movs	r3, #18
 800bc64:	e7d0      	b.n	800bc08 <_dtoa_r+0x238>
 800bc66:	2301      	movs	r3, #1
 800bc68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc6a:	e7f5      	b.n	800bc58 <_dtoa_r+0x288>
 800bc6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	9307      	str	r3, [sp, #28]
 800bc72:	e7d7      	b.n	800bc24 <_dtoa_r+0x254>
 800bc74:	3101      	adds	r1, #1
 800bc76:	0052      	lsls	r2, r2, #1
 800bc78:	e7d8      	b.n	800bc2c <_dtoa_r+0x25c>
 800bc7a:	bf00      	nop
 800bc7c:	f3af 8000 	nop.w
 800bc80:	636f4361 	.word	0x636f4361
 800bc84:	3fd287a7 	.word	0x3fd287a7
 800bc88:	8b60c8b3 	.word	0x8b60c8b3
 800bc8c:	3fc68a28 	.word	0x3fc68a28
 800bc90:	509f79fb 	.word	0x509f79fb
 800bc94:	3fd34413 	.word	0x3fd34413
 800bc98:	0800dba9 	.word	0x0800dba9
 800bc9c:	0800dbc0 	.word	0x0800dbc0
 800bca0:	7ff00000 	.word	0x7ff00000
 800bca4:	0800db79 	.word	0x0800db79
 800bca8:	3ff80000 	.word	0x3ff80000
 800bcac:	0800dcb8 	.word	0x0800dcb8
 800bcb0:	0800dc18 	.word	0x0800dc18
 800bcb4:	0800dba5 	.word	0x0800dba5
 800bcb8:	0800db78 	.word	0x0800db78
 800bcbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bcc0:	6018      	str	r0, [r3, #0]
 800bcc2:	9b07      	ldr	r3, [sp, #28]
 800bcc4:	2b0e      	cmp	r3, #14
 800bcc6:	f200 80a4 	bhi.w	800be12 <_dtoa_r+0x442>
 800bcca:	2c00      	cmp	r4, #0
 800bccc:	f000 80a1 	beq.w	800be12 <_dtoa_r+0x442>
 800bcd0:	2f00      	cmp	r7, #0
 800bcd2:	dd33      	ble.n	800bd3c <_dtoa_r+0x36c>
 800bcd4:	4bad      	ldr	r3, [pc, #692]	@ (800bf8c <_dtoa_r+0x5bc>)
 800bcd6:	f007 020f 	and.w	r2, r7, #15
 800bcda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcde:	ed93 7b00 	vldr	d7, [r3]
 800bce2:	05f8      	lsls	r0, r7, #23
 800bce4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bce8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bcec:	d516      	bpl.n	800bd1c <_dtoa_r+0x34c>
 800bcee:	4ba8      	ldr	r3, [pc, #672]	@ (800bf90 <_dtoa_r+0x5c0>)
 800bcf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bcf8:	f7f4 fdd8 	bl	80008ac <__aeabi_ddiv>
 800bcfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd00:	f004 040f 	and.w	r4, r4, #15
 800bd04:	2603      	movs	r6, #3
 800bd06:	4da2      	ldr	r5, [pc, #648]	@ (800bf90 <_dtoa_r+0x5c0>)
 800bd08:	b954      	cbnz	r4, 800bd20 <_dtoa_r+0x350>
 800bd0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd12:	f7f4 fdcb 	bl	80008ac <__aeabi_ddiv>
 800bd16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd1a:	e028      	b.n	800bd6e <_dtoa_r+0x39e>
 800bd1c:	2602      	movs	r6, #2
 800bd1e:	e7f2      	b.n	800bd06 <_dtoa_r+0x336>
 800bd20:	07e1      	lsls	r1, r4, #31
 800bd22:	d508      	bpl.n	800bd36 <_dtoa_r+0x366>
 800bd24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd28:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd2c:	f7f4 fc94 	bl	8000658 <__aeabi_dmul>
 800bd30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd34:	3601      	adds	r6, #1
 800bd36:	1064      	asrs	r4, r4, #1
 800bd38:	3508      	adds	r5, #8
 800bd3a:	e7e5      	b.n	800bd08 <_dtoa_r+0x338>
 800bd3c:	f000 80d2 	beq.w	800bee4 <_dtoa_r+0x514>
 800bd40:	427c      	negs	r4, r7
 800bd42:	4b92      	ldr	r3, [pc, #584]	@ (800bf8c <_dtoa_r+0x5bc>)
 800bd44:	4d92      	ldr	r5, [pc, #584]	@ (800bf90 <_dtoa_r+0x5c0>)
 800bd46:	f004 020f 	and.w	r2, r4, #15
 800bd4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd56:	f7f4 fc7f 	bl	8000658 <__aeabi_dmul>
 800bd5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd5e:	1124      	asrs	r4, r4, #4
 800bd60:	2300      	movs	r3, #0
 800bd62:	2602      	movs	r6, #2
 800bd64:	2c00      	cmp	r4, #0
 800bd66:	f040 80b2 	bne.w	800bece <_dtoa_r+0x4fe>
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1d3      	bne.n	800bd16 <_dtoa_r+0x346>
 800bd6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bd70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	f000 80b7 	beq.w	800bee8 <_dtoa_r+0x518>
 800bd7a:	4b86      	ldr	r3, [pc, #536]	@ (800bf94 <_dtoa_r+0x5c4>)
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	4620      	mov	r0, r4
 800bd80:	4629      	mov	r1, r5
 800bd82:	f7f4 fedb 	bl	8000b3c <__aeabi_dcmplt>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	f000 80ae 	beq.w	800bee8 <_dtoa_r+0x518>
 800bd8c:	9b07      	ldr	r3, [sp, #28]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f000 80aa 	beq.w	800bee8 <_dtoa_r+0x518>
 800bd94:	9b00      	ldr	r3, [sp, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	dd37      	ble.n	800be0a <_dtoa_r+0x43a>
 800bd9a:	1e7b      	subs	r3, r7, #1
 800bd9c:	9304      	str	r3, [sp, #16]
 800bd9e:	4620      	mov	r0, r4
 800bda0:	4b7d      	ldr	r3, [pc, #500]	@ (800bf98 <_dtoa_r+0x5c8>)
 800bda2:	2200      	movs	r2, #0
 800bda4:	4629      	mov	r1, r5
 800bda6:	f7f4 fc57 	bl	8000658 <__aeabi_dmul>
 800bdaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdae:	9c00      	ldr	r4, [sp, #0]
 800bdb0:	3601      	adds	r6, #1
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	f7f4 fbe6 	bl	8000584 <__aeabi_i2d>
 800bdb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdbc:	f7f4 fc4c 	bl	8000658 <__aeabi_dmul>
 800bdc0:	4b76      	ldr	r3, [pc, #472]	@ (800bf9c <_dtoa_r+0x5cc>)
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f7f4 fa92 	bl	80002ec <__adddf3>
 800bdc8:	4605      	mov	r5, r0
 800bdca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bdce:	2c00      	cmp	r4, #0
 800bdd0:	f040 808d 	bne.w	800beee <_dtoa_r+0x51e>
 800bdd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdd8:	4b71      	ldr	r3, [pc, #452]	@ (800bfa0 <_dtoa_r+0x5d0>)
 800bdda:	2200      	movs	r2, #0
 800bddc:	f7f4 fa84 	bl	80002e8 <__aeabi_dsub>
 800bde0:	4602      	mov	r2, r0
 800bde2:	460b      	mov	r3, r1
 800bde4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bde8:	462a      	mov	r2, r5
 800bdea:	4633      	mov	r3, r6
 800bdec:	f7f4 fec4 	bl	8000b78 <__aeabi_dcmpgt>
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	f040 828b 	bne.w	800c30c <_dtoa_r+0x93c>
 800bdf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdfa:	462a      	mov	r2, r5
 800bdfc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800be00:	f7f4 fe9c 	bl	8000b3c <__aeabi_dcmplt>
 800be04:	2800      	cmp	r0, #0
 800be06:	f040 8128 	bne.w	800c05a <_dtoa_r+0x68a>
 800be0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800be0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800be12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800be14:	2b00      	cmp	r3, #0
 800be16:	f2c0 815a 	blt.w	800c0ce <_dtoa_r+0x6fe>
 800be1a:	2f0e      	cmp	r7, #14
 800be1c:	f300 8157 	bgt.w	800c0ce <_dtoa_r+0x6fe>
 800be20:	4b5a      	ldr	r3, [pc, #360]	@ (800bf8c <_dtoa_r+0x5bc>)
 800be22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be26:	ed93 7b00 	vldr	d7, [r3]
 800be2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	ed8d 7b00 	vstr	d7, [sp]
 800be32:	da03      	bge.n	800be3c <_dtoa_r+0x46c>
 800be34:	9b07      	ldr	r3, [sp, #28]
 800be36:	2b00      	cmp	r3, #0
 800be38:	f340 8101 	ble.w	800c03e <_dtoa_r+0x66e>
 800be3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800be40:	4656      	mov	r6, sl
 800be42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be46:	4620      	mov	r0, r4
 800be48:	4629      	mov	r1, r5
 800be4a:	f7f4 fd2f 	bl	80008ac <__aeabi_ddiv>
 800be4e:	f7f4 feb3 	bl	8000bb8 <__aeabi_d2iz>
 800be52:	4680      	mov	r8, r0
 800be54:	f7f4 fb96 	bl	8000584 <__aeabi_i2d>
 800be58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be5c:	f7f4 fbfc 	bl	8000658 <__aeabi_dmul>
 800be60:	4602      	mov	r2, r0
 800be62:	460b      	mov	r3, r1
 800be64:	4620      	mov	r0, r4
 800be66:	4629      	mov	r1, r5
 800be68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800be6c:	f7f4 fa3c 	bl	80002e8 <__aeabi_dsub>
 800be70:	f806 4b01 	strb.w	r4, [r6], #1
 800be74:	9d07      	ldr	r5, [sp, #28]
 800be76:	eba6 040a 	sub.w	r4, r6, sl
 800be7a:	42a5      	cmp	r5, r4
 800be7c:	4602      	mov	r2, r0
 800be7e:	460b      	mov	r3, r1
 800be80:	f040 8117 	bne.w	800c0b2 <_dtoa_r+0x6e2>
 800be84:	f7f4 fa32 	bl	80002ec <__adddf3>
 800be88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be8c:	4604      	mov	r4, r0
 800be8e:	460d      	mov	r5, r1
 800be90:	f7f4 fe72 	bl	8000b78 <__aeabi_dcmpgt>
 800be94:	2800      	cmp	r0, #0
 800be96:	f040 80f9 	bne.w	800c08c <_dtoa_r+0x6bc>
 800be9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be9e:	4620      	mov	r0, r4
 800bea0:	4629      	mov	r1, r5
 800bea2:	f7f4 fe41 	bl	8000b28 <__aeabi_dcmpeq>
 800bea6:	b118      	cbz	r0, 800beb0 <_dtoa_r+0x4e0>
 800bea8:	f018 0f01 	tst.w	r8, #1
 800beac:	f040 80ee 	bne.w	800c08c <_dtoa_r+0x6bc>
 800beb0:	4649      	mov	r1, r9
 800beb2:	4658      	mov	r0, fp
 800beb4:	f000 fc90 	bl	800c7d8 <_Bfree>
 800beb8:	2300      	movs	r3, #0
 800beba:	7033      	strb	r3, [r6, #0]
 800bebc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bebe:	3701      	adds	r7, #1
 800bec0:	601f      	str	r7, [r3, #0]
 800bec2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f000 831d 	beq.w	800c504 <_dtoa_r+0xb34>
 800beca:	601e      	str	r6, [r3, #0]
 800becc:	e31a      	b.n	800c504 <_dtoa_r+0xb34>
 800bece:	07e2      	lsls	r2, r4, #31
 800bed0:	d505      	bpl.n	800bede <_dtoa_r+0x50e>
 800bed2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bed6:	f7f4 fbbf 	bl	8000658 <__aeabi_dmul>
 800beda:	3601      	adds	r6, #1
 800bedc:	2301      	movs	r3, #1
 800bede:	1064      	asrs	r4, r4, #1
 800bee0:	3508      	adds	r5, #8
 800bee2:	e73f      	b.n	800bd64 <_dtoa_r+0x394>
 800bee4:	2602      	movs	r6, #2
 800bee6:	e742      	b.n	800bd6e <_dtoa_r+0x39e>
 800bee8:	9c07      	ldr	r4, [sp, #28]
 800beea:	9704      	str	r7, [sp, #16]
 800beec:	e761      	b.n	800bdb2 <_dtoa_r+0x3e2>
 800beee:	4b27      	ldr	r3, [pc, #156]	@ (800bf8c <_dtoa_r+0x5bc>)
 800bef0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bef2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bef6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800befa:	4454      	add	r4, sl
 800befc:	2900      	cmp	r1, #0
 800befe:	d053      	beq.n	800bfa8 <_dtoa_r+0x5d8>
 800bf00:	4928      	ldr	r1, [pc, #160]	@ (800bfa4 <_dtoa_r+0x5d4>)
 800bf02:	2000      	movs	r0, #0
 800bf04:	f7f4 fcd2 	bl	80008ac <__aeabi_ddiv>
 800bf08:	4633      	mov	r3, r6
 800bf0a:	462a      	mov	r2, r5
 800bf0c:	f7f4 f9ec 	bl	80002e8 <__aeabi_dsub>
 800bf10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bf14:	4656      	mov	r6, sl
 800bf16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf1a:	f7f4 fe4d 	bl	8000bb8 <__aeabi_d2iz>
 800bf1e:	4605      	mov	r5, r0
 800bf20:	f7f4 fb30 	bl	8000584 <__aeabi_i2d>
 800bf24:	4602      	mov	r2, r0
 800bf26:	460b      	mov	r3, r1
 800bf28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf2c:	f7f4 f9dc 	bl	80002e8 <__aeabi_dsub>
 800bf30:	3530      	adds	r5, #48	@ 0x30
 800bf32:	4602      	mov	r2, r0
 800bf34:	460b      	mov	r3, r1
 800bf36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf3a:	f806 5b01 	strb.w	r5, [r6], #1
 800bf3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bf42:	f7f4 fdfb 	bl	8000b3c <__aeabi_dcmplt>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d171      	bne.n	800c02e <_dtoa_r+0x65e>
 800bf4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf4e:	4911      	ldr	r1, [pc, #68]	@ (800bf94 <_dtoa_r+0x5c4>)
 800bf50:	2000      	movs	r0, #0
 800bf52:	f7f4 f9c9 	bl	80002e8 <__aeabi_dsub>
 800bf56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bf5a:	f7f4 fdef 	bl	8000b3c <__aeabi_dcmplt>
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	f040 8095 	bne.w	800c08e <_dtoa_r+0x6be>
 800bf64:	42a6      	cmp	r6, r4
 800bf66:	f43f af50 	beq.w	800be0a <_dtoa_r+0x43a>
 800bf6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bf6e:	4b0a      	ldr	r3, [pc, #40]	@ (800bf98 <_dtoa_r+0x5c8>)
 800bf70:	2200      	movs	r2, #0
 800bf72:	f7f4 fb71 	bl	8000658 <__aeabi_dmul>
 800bf76:	4b08      	ldr	r3, [pc, #32]	@ (800bf98 <_dtoa_r+0x5c8>)
 800bf78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf82:	f7f4 fb69 	bl	8000658 <__aeabi_dmul>
 800bf86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf8a:	e7c4      	b.n	800bf16 <_dtoa_r+0x546>
 800bf8c:	0800dcb8 	.word	0x0800dcb8
 800bf90:	0800dc90 	.word	0x0800dc90
 800bf94:	3ff00000 	.word	0x3ff00000
 800bf98:	40240000 	.word	0x40240000
 800bf9c:	401c0000 	.word	0x401c0000
 800bfa0:	40140000 	.word	0x40140000
 800bfa4:	3fe00000 	.word	0x3fe00000
 800bfa8:	4631      	mov	r1, r6
 800bfaa:	4628      	mov	r0, r5
 800bfac:	f7f4 fb54 	bl	8000658 <__aeabi_dmul>
 800bfb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bfb4:	9415      	str	r4, [sp, #84]	@ 0x54
 800bfb6:	4656      	mov	r6, sl
 800bfb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfbc:	f7f4 fdfc 	bl	8000bb8 <__aeabi_d2iz>
 800bfc0:	4605      	mov	r5, r0
 800bfc2:	f7f4 fadf 	bl	8000584 <__aeabi_i2d>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	460b      	mov	r3, r1
 800bfca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfce:	f7f4 f98b 	bl	80002e8 <__aeabi_dsub>
 800bfd2:	3530      	adds	r5, #48	@ 0x30
 800bfd4:	f806 5b01 	strb.w	r5, [r6], #1
 800bfd8:	4602      	mov	r2, r0
 800bfda:	460b      	mov	r3, r1
 800bfdc:	42a6      	cmp	r6, r4
 800bfde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfe2:	f04f 0200 	mov.w	r2, #0
 800bfe6:	d124      	bne.n	800c032 <_dtoa_r+0x662>
 800bfe8:	4bac      	ldr	r3, [pc, #688]	@ (800c29c <_dtoa_r+0x8cc>)
 800bfea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bfee:	f7f4 f97d 	bl	80002ec <__adddf3>
 800bff2:	4602      	mov	r2, r0
 800bff4:	460b      	mov	r3, r1
 800bff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bffa:	f7f4 fdbd 	bl	8000b78 <__aeabi_dcmpgt>
 800bffe:	2800      	cmp	r0, #0
 800c000:	d145      	bne.n	800c08e <_dtoa_r+0x6be>
 800c002:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c006:	49a5      	ldr	r1, [pc, #660]	@ (800c29c <_dtoa_r+0x8cc>)
 800c008:	2000      	movs	r0, #0
 800c00a:	f7f4 f96d 	bl	80002e8 <__aeabi_dsub>
 800c00e:	4602      	mov	r2, r0
 800c010:	460b      	mov	r3, r1
 800c012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c016:	f7f4 fd91 	bl	8000b3c <__aeabi_dcmplt>
 800c01a:	2800      	cmp	r0, #0
 800c01c:	f43f aef5 	beq.w	800be0a <_dtoa_r+0x43a>
 800c020:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c022:	1e73      	subs	r3, r6, #1
 800c024:	9315      	str	r3, [sp, #84]	@ 0x54
 800c026:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c02a:	2b30      	cmp	r3, #48	@ 0x30
 800c02c:	d0f8      	beq.n	800c020 <_dtoa_r+0x650>
 800c02e:	9f04      	ldr	r7, [sp, #16]
 800c030:	e73e      	b.n	800beb0 <_dtoa_r+0x4e0>
 800c032:	4b9b      	ldr	r3, [pc, #620]	@ (800c2a0 <_dtoa_r+0x8d0>)
 800c034:	f7f4 fb10 	bl	8000658 <__aeabi_dmul>
 800c038:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c03c:	e7bc      	b.n	800bfb8 <_dtoa_r+0x5e8>
 800c03e:	d10c      	bne.n	800c05a <_dtoa_r+0x68a>
 800c040:	4b98      	ldr	r3, [pc, #608]	@ (800c2a4 <_dtoa_r+0x8d4>)
 800c042:	2200      	movs	r2, #0
 800c044:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c048:	f7f4 fb06 	bl	8000658 <__aeabi_dmul>
 800c04c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c050:	f7f4 fd88 	bl	8000b64 <__aeabi_dcmpge>
 800c054:	2800      	cmp	r0, #0
 800c056:	f000 8157 	beq.w	800c308 <_dtoa_r+0x938>
 800c05a:	2400      	movs	r4, #0
 800c05c:	4625      	mov	r5, r4
 800c05e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c060:	43db      	mvns	r3, r3
 800c062:	9304      	str	r3, [sp, #16]
 800c064:	4656      	mov	r6, sl
 800c066:	2700      	movs	r7, #0
 800c068:	4621      	mov	r1, r4
 800c06a:	4658      	mov	r0, fp
 800c06c:	f000 fbb4 	bl	800c7d8 <_Bfree>
 800c070:	2d00      	cmp	r5, #0
 800c072:	d0dc      	beq.n	800c02e <_dtoa_r+0x65e>
 800c074:	b12f      	cbz	r7, 800c082 <_dtoa_r+0x6b2>
 800c076:	42af      	cmp	r7, r5
 800c078:	d003      	beq.n	800c082 <_dtoa_r+0x6b2>
 800c07a:	4639      	mov	r1, r7
 800c07c:	4658      	mov	r0, fp
 800c07e:	f000 fbab 	bl	800c7d8 <_Bfree>
 800c082:	4629      	mov	r1, r5
 800c084:	4658      	mov	r0, fp
 800c086:	f000 fba7 	bl	800c7d8 <_Bfree>
 800c08a:	e7d0      	b.n	800c02e <_dtoa_r+0x65e>
 800c08c:	9704      	str	r7, [sp, #16]
 800c08e:	4633      	mov	r3, r6
 800c090:	461e      	mov	r6, r3
 800c092:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c096:	2a39      	cmp	r2, #57	@ 0x39
 800c098:	d107      	bne.n	800c0aa <_dtoa_r+0x6da>
 800c09a:	459a      	cmp	sl, r3
 800c09c:	d1f8      	bne.n	800c090 <_dtoa_r+0x6c0>
 800c09e:	9a04      	ldr	r2, [sp, #16]
 800c0a0:	3201      	adds	r2, #1
 800c0a2:	9204      	str	r2, [sp, #16]
 800c0a4:	2230      	movs	r2, #48	@ 0x30
 800c0a6:	f88a 2000 	strb.w	r2, [sl]
 800c0aa:	781a      	ldrb	r2, [r3, #0]
 800c0ac:	3201      	adds	r2, #1
 800c0ae:	701a      	strb	r2, [r3, #0]
 800c0b0:	e7bd      	b.n	800c02e <_dtoa_r+0x65e>
 800c0b2:	4b7b      	ldr	r3, [pc, #492]	@ (800c2a0 <_dtoa_r+0x8d0>)
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f7f4 facf 	bl	8000658 <__aeabi_dmul>
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	2300      	movs	r3, #0
 800c0be:	4604      	mov	r4, r0
 800c0c0:	460d      	mov	r5, r1
 800c0c2:	f7f4 fd31 	bl	8000b28 <__aeabi_dcmpeq>
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	f43f aebb 	beq.w	800be42 <_dtoa_r+0x472>
 800c0cc:	e6f0      	b.n	800beb0 <_dtoa_r+0x4e0>
 800c0ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c0d0:	2a00      	cmp	r2, #0
 800c0d2:	f000 80db 	beq.w	800c28c <_dtoa_r+0x8bc>
 800c0d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0d8:	2a01      	cmp	r2, #1
 800c0da:	f300 80bf 	bgt.w	800c25c <_dtoa_r+0x88c>
 800c0de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c0e0:	2a00      	cmp	r2, #0
 800c0e2:	f000 80b7 	beq.w	800c254 <_dtoa_r+0x884>
 800c0e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c0ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c0ec:	4646      	mov	r6, r8
 800c0ee:	9a08      	ldr	r2, [sp, #32]
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	441a      	add	r2, r3
 800c0f4:	4658      	mov	r0, fp
 800c0f6:	4498      	add	r8, r3
 800c0f8:	9208      	str	r2, [sp, #32]
 800c0fa:	f000 fc21 	bl	800c940 <__i2b>
 800c0fe:	4605      	mov	r5, r0
 800c100:	b15e      	cbz	r6, 800c11a <_dtoa_r+0x74a>
 800c102:	9b08      	ldr	r3, [sp, #32]
 800c104:	2b00      	cmp	r3, #0
 800c106:	dd08      	ble.n	800c11a <_dtoa_r+0x74a>
 800c108:	42b3      	cmp	r3, r6
 800c10a:	9a08      	ldr	r2, [sp, #32]
 800c10c:	bfa8      	it	ge
 800c10e:	4633      	movge	r3, r6
 800c110:	eba8 0803 	sub.w	r8, r8, r3
 800c114:	1af6      	subs	r6, r6, r3
 800c116:	1ad3      	subs	r3, r2, r3
 800c118:	9308      	str	r3, [sp, #32]
 800c11a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c11c:	b1f3      	cbz	r3, 800c15c <_dtoa_r+0x78c>
 800c11e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c120:	2b00      	cmp	r3, #0
 800c122:	f000 80b7 	beq.w	800c294 <_dtoa_r+0x8c4>
 800c126:	b18c      	cbz	r4, 800c14c <_dtoa_r+0x77c>
 800c128:	4629      	mov	r1, r5
 800c12a:	4622      	mov	r2, r4
 800c12c:	4658      	mov	r0, fp
 800c12e:	f000 fcc7 	bl	800cac0 <__pow5mult>
 800c132:	464a      	mov	r2, r9
 800c134:	4601      	mov	r1, r0
 800c136:	4605      	mov	r5, r0
 800c138:	4658      	mov	r0, fp
 800c13a:	f000 fc17 	bl	800c96c <__multiply>
 800c13e:	4649      	mov	r1, r9
 800c140:	9004      	str	r0, [sp, #16]
 800c142:	4658      	mov	r0, fp
 800c144:	f000 fb48 	bl	800c7d8 <_Bfree>
 800c148:	9b04      	ldr	r3, [sp, #16]
 800c14a:	4699      	mov	r9, r3
 800c14c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c14e:	1b1a      	subs	r2, r3, r4
 800c150:	d004      	beq.n	800c15c <_dtoa_r+0x78c>
 800c152:	4649      	mov	r1, r9
 800c154:	4658      	mov	r0, fp
 800c156:	f000 fcb3 	bl	800cac0 <__pow5mult>
 800c15a:	4681      	mov	r9, r0
 800c15c:	2101      	movs	r1, #1
 800c15e:	4658      	mov	r0, fp
 800c160:	f000 fbee 	bl	800c940 <__i2b>
 800c164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c166:	4604      	mov	r4, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f000 81cf 	beq.w	800c50c <_dtoa_r+0xb3c>
 800c16e:	461a      	mov	r2, r3
 800c170:	4601      	mov	r1, r0
 800c172:	4658      	mov	r0, fp
 800c174:	f000 fca4 	bl	800cac0 <__pow5mult>
 800c178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	4604      	mov	r4, r0
 800c17e:	f300 8095 	bgt.w	800c2ac <_dtoa_r+0x8dc>
 800c182:	9b02      	ldr	r3, [sp, #8]
 800c184:	2b00      	cmp	r3, #0
 800c186:	f040 8087 	bne.w	800c298 <_dtoa_r+0x8c8>
 800c18a:	9b03      	ldr	r3, [sp, #12]
 800c18c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c190:	2b00      	cmp	r3, #0
 800c192:	f040 8089 	bne.w	800c2a8 <_dtoa_r+0x8d8>
 800c196:	9b03      	ldr	r3, [sp, #12]
 800c198:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c19c:	0d1b      	lsrs	r3, r3, #20
 800c19e:	051b      	lsls	r3, r3, #20
 800c1a0:	b12b      	cbz	r3, 800c1ae <_dtoa_r+0x7de>
 800c1a2:	9b08      	ldr	r3, [sp, #32]
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	9308      	str	r3, [sp, #32]
 800c1a8:	f108 0801 	add.w	r8, r8, #1
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	f000 81b0 	beq.w	800c518 <_dtoa_r+0xb48>
 800c1b8:	6923      	ldr	r3, [r4, #16]
 800c1ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c1be:	6918      	ldr	r0, [r3, #16]
 800c1c0:	f000 fb72 	bl	800c8a8 <__hi0bits>
 800c1c4:	f1c0 0020 	rsb	r0, r0, #32
 800c1c8:	9b08      	ldr	r3, [sp, #32]
 800c1ca:	4418      	add	r0, r3
 800c1cc:	f010 001f 	ands.w	r0, r0, #31
 800c1d0:	d077      	beq.n	800c2c2 <_dtoa_r+0x8f2>
 800c1d2:	f1c0 0320 	rsb	r3, r0, #32
 800c1d6:	2b04      	cmp	r3, #4
 800c1d8:	dd6b      	ble.n	800c2b2 <_dtoa_r+0x8e2>
 800c1da:	9b08      	ldr	r3, [sp, #32]
 800c1dc:	f1c0 001c 	rsb	r0, r0, #28
 800c1e0:	4403      	add	r3, r0
 800c1e2:	4480      	add	r8, r0
 800c1e4:	4406      	add	r6, r0
 800c1e6:	9308      	str	r3, [sp, #32]
 800c1e8:	f1b8 0f00 	cmp.w	r8, #0
 800c1ec:	dd05      	ble.n	800c1fa <_dtoa_r+0x82a>
 800c1ee:	4649      	mov	r1, r9
 800c1f0:	4642      	mov	r2, r8
 800c1f2:	4658      	mov	r0, fp
 800c1f4:	f000 fcbe 	bl	800cb74 <__lshift>
 800c1f8:	4681      	mov	r9, r0
 800c1fa:	9b08      	ldr	r3, [sp, #32]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	dd05      	ble.n	800c20c <_dtoa_r+0x83c>
 800c200:	4621      	mov	r1, r4
 800c202:	461a      	mov	r2, r3
 800c204:	4658      	mov	r0, fp
 800c206:	f000 fcb5 	bl	800cb74 <__lshift>
 800c20a:	4604      	mov	r4, r0
 800c20c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d059      	beq.n	800c2c6 <_dtoa_r+0x8f6>
 800c212:	4621      	mov	r1, r4
 800c214:	4648      	mov	r0, r9
 800c216:	f000 fd19 	bl	800cc4c <__mcmp>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	da53      	bge.n	800c2c6 <_dtoa_r+0x8f6>
 800c21e:	1e7b      	subs	r3, r7, #1
 800c220:	9304      	str	r3, [sp, #16]
 800c222:	4649      	mov	r1, r9
 800c224:	2300      	movs	r3, #0
 800c226:	220a      	movs	r2, #10
 800c228:	4658      	mov	r0, fp
 800c22a:	f000 faf7 	bl	800c81c <__multadd>
 800c22e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c230:	4681      	mov	r9, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	f000 8172 	beq.w	800c51c <_dtoa_r+0xb4c>
 800c238:	2300      	movs	r3, #0
 800c23a:	4629      	mov	r1, r5
 800c23c:	220a      	movs	r2, #10
 800c23e:	4658      	mov	r0, fp
 800c240:	f000 faec 	bl	800c81c <__multadd>
 800c244:	9b00      	ldr	r3, [sp, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	4605      	mov	r5, r0
 800c24a:	dc67      	bgt.n	800c31c <_dtoa_r+0x94c>
 800c24c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c24e:	2b02      	cmp	r3, #2
 800c250:	dc41      	bgt.n	800c2d6 <_dtoa_r+0x906>
 800c252:	e063      	b.n	800c31c <_dtoa_r+0x94c>
 800c254:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c256:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c25a:	e746      	b.n	800c0ea <_dtoa_r+0x71a>
 800c25c:	9b07      	ldr	r3, [sp, #28]
 800c25e:	1e5c      	subs	r4, r3, #1
 800c260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c262:	42a3      	cmp	r3, r4
 800c264:	bfbf      	itttt	lt
 800c266:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c268:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c26a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c26c:	1ae3      	sublt	r3, r4, r3
 800c26e:	bfb4      	ite	lt
 800c270:	18d2      	addlt	r2, r2, r3
 800c272:	1b1c      	subge	r4, r3, r4
 800c274:	9b07      	ldr	r3, [sp, #28]
 800c276:	bfbc      	itt	lt
 800c278:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c27a:	2400      	movlt	r4, #0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	bfb5      	itete	lt
 800c280:	eba8 0603 	sublt.w	r6, r8, r3
 800c284:	9b07      	ldrge	r3, [sp, #28]
 800c286:	2300      	movlt	r3, #0
 800c288:	4646      	movge	r6, r8
 800c28a:	e730      	b.n	800c0ee <_dtoa_r+0x71e>
 800c28c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c28e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c290:	4646      	mov	r6, r8
 800c292:	e735      	b.n	800c100 <_dtoa_r+0x730>
 800c294:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c296:	e75c      	b.n	800c152 <_dtoa_r+0x782>
 800c298:	2300      	movs	r3, #0
 800c29a:	e788      	b.n	800c1ae <_dtoa_r+0x7de>
 800c29c:	3fe00000 	.word	0x3fe00000
 800c2a0:	40240000 	.word	0x40240000
 800c2a4:	40140000 	.word	0x40140000
 800c2a8:	9b02      	ldr	r3, [sp, #8]
 800c2aa:	e780      	b.n	800c1ae <_dtoa_r+0x7de>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2b0:	e782      	b.n	800c1b8 <_dtoa_r+0x7e8>
 800c2b2:	d099      	beq.n	800c1e8 <_dtoa_r+0x818>
 800c2b4:	9a08      	ldr	r2, [sp, #32]
 800c2b6:	331c      	adds	r3, #28
 800c2b8:	441a      	add	r2, r3
 800c2ba:	4498      	add	r8, r3
 800c2bc:	441e      	add	r6, r3
 800c2be:	9208      	str	r2, [sp, #32]
 800c2c0:	e792      	b.n	800c1e8 <_dtoa_r+0x818>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	e7f6      	b.n	800c2b4 <_dtoa_r+0x8e4>
 800c2c6:	9b07      	ldr	r3, [sp, #28]
 800c2c8:	9704      	str	r7, [sp, #16]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	dc20      	bgt.n	800c310 <_dtoa_r+0x940>
 800c2ce:	9300      	str	r3, [sp, #0]
 800c2d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	dd1e      	ble.n	800c314 <_dtoa_r+0x944>
 800c2d6:	9b00      	ldr	r3, [sp, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	f47f aec0 	bne.w	800c05e <_dtoa_r+0x68e>
 800c2de:	4621      	mov	r1, r4
 800c2e0:	2205      	movs	r2, #5
 800c2e2:	4658      	mov	r0, fp
 800c2e4:	f000 fa9a 	bl	800c81c <__multadd>
 800c2e8:	4601      	mov	r1, r0
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	4648      	mov	r0, r9
 800c2ee:	f000 fcad 	bl	800cc4c <__mcmp>
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	f77f aeb3 	ble.w	800c05e <_dtoa_r+0x68e>
 800c2f8:	4656      	mov	r6, sl
 800c2fa:	2331      	movs	r3, #49	@ 0x31
 800c2fc:	f806 3b01 	strb.w	r3, [r6], #1
 800c300:	9b04      	ldr	r3, [sp, #16]
 800c302:	3301      	adds	r3, #1
 800c304:	9304      	str	r3, [sp, #16]
 800c306:	e6ae      	b.n	800c066 <_dtoa_r+0x696>
 800c308:	9c07      	ldr	r4, [sp, #28]
 800c30a:	9704      	str	r7, [sp, #16]
 800c30c:	4625      	mov	r5, r4
 800c30e:	e7f3      	b.n	800c2f8 <_dtoa_r+0x928>
 800c310:	9b07      	ldr	r3, [sp, #28]
 800c312:	9300      	str	r3, [sp, #0]
 800c314:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c316:	2b00      	cmp	r3, #0
 800c318:	f000 8104 	beq.w	800c524 <_dtoa_r+0xb54>
 800c31c:	2e00      	cmp	r6, #0
 800c31e:	dd05      	ble.n	800c32c <_dtoa_r+0x95c>
 800c320:	4629      	mov	r1, r5
 800c322:	4632      	mov	r2, r6
 800c324:	4658      	mov	r0, fp
 800c326:	f000 fc25 	bl	800cb74 <__lshift>
 800c32a:	4605      	mov	r5, r0
 800c32c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d05a      	beq.n	800c3e8 <_dtoa_r+0xa18>
 800c332:	6869      	ldr	r1, [r5, #4]
 800c334:	4658      	mov	r0, fp
 800c336:	f000 fa0f 	bl	800c758 <_Balloc>
 800c33a:	4606      	mov	r6, r0
 800c33c:	b928      	cbnz	r0, 800c34a <_dtoa_r+0x97a>
 800c33e:	4b84      	ldr	r3, [pc, #528]	@ (800c550 <_dtoa_r+0xb80>)
 800c340:	4602      	mov	r2, r0
 800c342:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c346:	f7ff bb5a 	b.w	800b9fe <_dtoa_r+0x2e>
 800c34a:	692a      	ldr	r2, [r5, #16]
 800c34c:	3202      	adds	r2, #2
 800c34e:	0092      	lsls	r2, r2, #2
 800c350:	f105 010c 	add.w	r1, r5, #12
 800c354:	300c      	adds	r0, #12
 800c356:	f000 ffaf 	bl	800d2b8 <memcpy>
 800c35a:	2201      	movs	r2, #1
 800c35c:	4631      	mov	r1, r6
 800c35e:	4658      	mov	r0, fp
 800c360:	f000 fc08 	bl	800cb74 <__lshift>
 800c364:	f10a 0301 	add.w	r3, sl, #1
 800c368:	9307      	str	r3, [sp, #28]
 800c36a:	9b00      	ldr	r3, [sp, #0]
 800c36c:	4453      	add	r3, sl
 800c36e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c370:	9b02      	ldr	r3, [sp, #8]
 800c372:	f003 0301 	and.w	r3, r3, #1
 800c376:	462f      	mov	r7, r5
 800c378:	930a      	str	r3, [sp, #40]	@ 0x28
 800c37a:	4605      	mov	r5, r0
 800c37c:	9b07      	ldr	r3, [sp, #28]
 800c37e:	4621      	mov	r1, r4
 800c380:	3b01      	subs	r3, #1
 800c382:	4648      	mov	r0, r9
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	f7ff fa9a 	bl	800b8be <quorem>
 800c38a:	4639      	mov	r1, r7
 800c38c:	9002      	str	r0, [sp, #8]
 800c38e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c392:	4648      	mov	r0, r9
 800c394:	f000 fc5a 	bl	800cc4c <__mcmp>
 800c398:	462a      	mov	r2, r5
 800c39a:	9008      	str	r0, [sp, #32]
 800c39c:	4621      	mov	r1, r4
 800c39e:	4658      	mov	r0, fp
 800c3a0:	f000 fc70 	bl	800cc84 <__mdiff>
 800c3a4:	68c2      	ldr	r2, [r0, #12]
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	bb02      	cbnz	r2, 800c3ec <_dtoa_r+0xa1c>
 800c3aa:	4601      	mov	r1, r0
 800c3ac:	4648      	mov	r0, r9
 800c3ae:	f000 fc4d 	bl	800cc4c <__mcmp>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	4631      	mov	r1, r6
 800c3b6:	4658      	mov	r0, fp
 800c3b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c3ba:	f000 fa0d 	bl	800c7d8 <_Bfree>
 800c3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3c2:	9e07      	ldr	r6, [sp, #28]
 800c3c4:	ea43 0102 	orr.w	r1, r3, r2
 800c3c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3ca:	4319      	orrs	r1, r3
 800c3cc:	d110      	bne.n	800c3f0 <_dtoa_r+0xa20>
 800c3ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c3d2:	d029      	beq.n	800c428 <_dtoa_r+0xa58>
 800c3d4:	9b08      	ldr	r3, [sp, #32]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	dd02      	ble.n	800c3e0 <_dtoa_r+0xa10>
 800c3da:	9b02      	ldr	r3, [sp, #8]
 800c3dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c3e0:	9b00      	ldr	r3, [sp, #0]
 800c3e2:	f883 8000 	strb.w	r8, [r3]
 800c3e6:	e63f      	b.n	800c068 <_dtoa_r+0x698>
 800c3e8:	4628      	mov	r0, r5
 800c3ea:	e7bb      	b.n	800c364 <_dtoa_r+0x994>
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	e7e1      	b.n	800c3b4 <_dtoa_r+0x9e4>
 800c3f0:	9b08      	ldr	r3, [sp, #32]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	db04      	blt.n	800c400 <_dtoa_r+0xa30>
 800c3f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3f8:	430b      	orrs	r3, r1
 800c3fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c3fc:	430b      	orrs	r3, r1
 800c3fe:	d120      	bne.n	800c442 <_dtoa_r+0xa72>
 800c400:	2a00      	cmp	r2, #0
 800c402:	dded      	ble.n	800c3e0 <_dtoa_r+0xa10>
 800c404:	4649      	mov	r1, r9
 800c406:	2201      	movs	r2, #1
 800c408:	4658      	mov	r0, fp
 800c40a:	f000 fbb3 	bl	800cb74 <__lshift>
 800c40e:	4621      	mov	r1, r4
 800c410:	4681      	mov	r9, r0
 800c412:	f000 fc1b 	bl	800cc4c <__mcmp>
 800c416:	2800      	cmp	r0, #0
 800c418:	dc03      	bgt.n	800c422 <_dtoa_r+0xa52>
 800c41a:	d1e1      	bne.n	800c3e0 <_dtoa_r+0xa10>
 800c41c:	f018 0f01 	tst.w	r8, #1
 800c420:	d0de      	beq.n	800c3e0 <_dtoa_r+0xa10>
 800c422:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c426:	d1d8      	bne.n	800c3da <_dtoa_r+0xa0a>
 800c428:	9a00      	ldr	r2, [sp, #0]
 800c42a:	2339      	movs	r3, #57	@ 0x39
 800c42c:	7013      	strb	r3, [r2, #0]
 800c42e:	4633      	mov	r3, r6
 800c430:	461e      	mov	r6, r3
 800c432:	3b01      	subs	r3, #1
 800c434:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c438:	2a39      	cmp	r2, #57	@ 0x39
 800c43a:	d052      	beq.n	800c4e2 <_dtoa_r+0xb12>
 800c43c:	3201      	adds	r2, #1
 800c43e:	701a      	strb	r2, [r3, #0]
 800c440:	e612      	b.n	800c068 <_dtoa_r+0x698>
 800c442:	2a00      	cmp	r2, #0
 800c444:	dd07      	ble.n	800c456 <_dtoa_r+0xa86>
 800c446:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c44a:	d0ed      	beq.n	800c428 <_dtoa_r+0xa58>
 800c44c:	9a00      	ldr	r2, [sp, #0]
 800c44e:	f108 0301 	add.w	r3, r8, #1
 800c452:	7013      	strb	r3, [r2, #0]
 800c454:	e608      	b.n	800c068 <_dtoa_r+0x698>
 800c456:	9b07      	ldr	r3, [sp, #28]
 800c458:	9a07      	ldr	r2, [sp, #28]
 800c45a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c45e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c460:	4293      	cmp	r3, r2
 800c462:	d028      	beq.n	800c4b6 <_dtoa_r+0xae6>
 800c464:	4649      	mov	r1, r9
 800c466:	2300      	movs	r3, #0
 800c468:	220a      	movs	r2, #10
 800c46a:	4658      	mov	r0, fp
 800c46c:	f000 f9d6 	bl	800c81c <__multadd>
 800c470:	42af      	cmp	r7, r5
 800c472:	4681      	mov	r9, r0
 800c474:	f04f 0300 	mov.w	r3, #0
 800c478:	f04f 020a 	mov.w	r2, #10
 800c47c:	4639      	mov	r1, r7
 800c47e:	4658      	mov	r0, fp
 800c480:	d107      	bne.n	800c492 <_dtoa_r+0xac2>
 800c482:	f000 f9cb 	bl	800c81c <__multadd>
 800c486:	4607      	mov	r7, r0
 800c488:	4605      	mov	r5, r0
 800c48a:	9b07      	ldr	r3, [sp, #28]
 800c48c:	3301      	adds	r3, #1
 800c48e:	9307      	str	r3, [sp, #28]
 800c490:	e774      	b.n	800c37c <_dtoa_r+0x9ac>
 800c492:	f000 f9c3 	bl	800c81c <__multadd>
 800c496:	4629      	mov	r1, r5
 800c498:	4607      	mov	r7, r0
 800c49a:	2300      	movs	r3, #0
 800c49c:	220a      	movs	r2, #10
 800c49e:	4658      	mov	r0, fp
 800c4a0:	f000 f9bc 	bl	800c81c <__multadd>
 800c4a4:	4605      	mov	r5, r0
 800c4a6:	e7f0      	b.n	800c48a <_dtoa_r+0xaba>
 800c4a8:	9b00      	ldr	r3, [sp, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	bfcc      	ite	gt
 800c4ae:	461e      	movgt	r6, r3
 800c4b0:	2601      	movle	r6, #1
 800c4b2:	4456      	add	r6, sl
 800c4b4:	2700      	movs	r7, #0
 800c4b6:	4649      	mov	r1, r9
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	4658      	mov	r0, fp
 800c4bc:	f000 fb5a 	bl	800cb74 <__lshift>
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	4681      	mov	r9, r0
 800c4c4:	f000 fbc2 	bl	800cc4c <__mcmp>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	dcb0      	bgt.n	800c42e <_dtoa_r+0xa5e>
 800c4cc:	d102      	bne.n	800c4d4 <_dtoa_r+0xb04>
 800c4ce:	f018 0f01 	tst.w	r8, #1
 800c4d2:	d1ac      	bne.n	800c42e <_dtoa_r+0xa5e>
 800c4d4:	4633      	mov	r3, r6
 800c4d6:	461e      	mov	r6, r3
 800c4d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4dc:	2a30      	cmp	r2, #48	@ 0x30
 800c4de:	d0fa      	beq.n	800c4d6 <_dtoa_r+0xb06>
 800c4e0:	e5c2      	b.n	800c068 <_dtoa_r+0x698>
 800c4e2:	459a      	cmp	sl, r3
 800c4e4:	d1a4      	bne.n	800c430 <_dtoa_r+0xa60>
 800c4e6:	9b04      	ldr	r3, [sp, #16]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	9304      	str	r3, [sp, #16]
 800c4ec:	2331      	movs	r3, #49	@ 0x31
 800c4ee:	f88a 3000 	strb.w	r3, [sl]
 800c4f2:	e5b9      	b.n	800c068 <_dtoa_r+0x698>
 800c4f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c4f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c554 <_dtoa_r+0xb84>
 800c4fa:	b11b      	cbz	r3, 800c504 <_dtoa_r+0xb34>
 800c4fc:	f10a 0308 	add.w	r3, sl, #8
 800c500:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c502:	6013      	str	r3, [r2, #0]
 800c504:	4650      	mov	r0, sl
 800c506:	b019      	add	sp, #100	@ 0x64
 800c508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c50e:	2b01      	cmp	r3, #1
 800c510:	f77f ae37 	ble.w	800c182 <_dtoa_r+0x7b2>
 800c514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c516:	930a      	str	r3, [sp, #40]	@ 0x28
 800c518:	2001      	movs	r0, #1
 800c51a:	e655      	b.n	800c1c8 <_dtoa_r+0x7f8>
 800c51c:	9b00      	ldr	r3, [sp, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	f77f aed6 	ble.w	800c2d0 <_dtoa_r+0x900>
 800c524:	4656      	mov	r6, sl
 800c526:	4621      	mov	r1, r4
 800c528:	4648      	mov	r0, r9
 800c52a:	f7ff f9c8 	bl	800b8be <quorem>
 800c52e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c532:	f806 8b01 	strb.w	r8, [r6], #1
 800c536:	9b00      	ldr	r3, [sp, #0]
 800c538:	eba6 020a 	sub.w	r2, r6, sl
 800c53c:	4293      	cmp	r3, r2
 800c53e:	ddb3      	ble.n	800c4a8 <_dtoa_r+0xad8>
 800c540:	4649      	mov	r1, r9
 800c542:	2300      	movs	r3, #0
 800c544:	220a      	movs	r2, #10
 800c546:	4658      	mov	r0, fp
 800c548:	f000 f968 	bl	800c81c <__multadd>
 800c54c:	4681      	mov	r9, r0
 800c54e:	e7ea      	b.n	800c526 <_dtoa_r+0xb56>
 800c550:	0800dc18 	.word	0x0800dc18
 800c554:	0800db9c 	.word	0x0800db9c

0800c558 <_free_r>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	4605      	mov	r5, r0
 800c55c:	2900      	cmp	r1, #0
 800c55e:	d041      	beq.n	800c5e4 <_free_r+0x8c>
 800c560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c564:	1f0c      	subs	r4, r1, #4
 800c566:	2b00      	cmp	r3, #0
 800c568:	bfb8      	it	lt
 800c56a:	18e4      	addlt	r4, r4, r3
 800c56c:	f000 f8e8 	bl	800c740 <__malloc_lock>
 800c570:	4a1d      	ldr	r2, [pc, #116]	@ (800c5e8 <_free_r+0x90>)
 800c572:	6813      	ldr	r3, [r2, #0]
 800c574:	b933      	cbnz	r3, 800c584 <_free_r+0x2c>
 800c576:	6063      	str	r3, [r4, #4]
 800c578:	6014      	str	r4, [r2, #0]
 800c57a:	4628      	mov	r0, r5
 800c57c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c580:	f000 b8e4 	b.w	800c74c <__malloc_unlock>
 800c584:	42a3      	cmp	r3, r4
 800c586:	d908      	bls.n	800c59a <_free_r+0x42>
 800c588:	6820      	ldr	r0, [r4, #0]
 800c58a:	1821      	adds	r1, r4, r0
 800c58c:	428b      	cmp	r3, r1
 800c58e:	bf01      	itttt	eq
 800c590:	6819      	ldreq	r1, [r3, #0]
 800c592:	685b      	ldreq	r3, [r3, #4]
 800c594:	1809      	addeq	r1, r1, r0
 800c596:	6021      	streq	r1, [r4, #0]
 800c598:	e7ed      	b.n	800c576 <_free_r+0x1e>
 800c59a:	461a      	mov	r2, r3
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	b10b      	cbz	r3, 800c5a4 <_free_r+0x4c>
 800c5a0:	42a3      	cmp	r3, r4
 800c5a2:	d9fa      	bls.n	800c59a <_free_r+0x42>
 800c5a4:	6811      	ldr	r1, [r2, #0]
 800c5a6:	1850      	adds	r0, r2, r1
 800c5a8:	42a0      	cmp	r0, r4
 800c5aa:	d10b      	bne.n	800c5c4 <_free_r+0x6c>
 800c5ac:	6820      	ldr	r0, [r4, #0]
 800c5ae:	4401      	add	r1, r0
 800c5b0:	1850      	adds	r0, r2, r1
 800c5b2:	4283      	cmp	r3, r0
 800c5b4:	6011      	str	r1, [r2, #0]
 800c5b6:	d1e0      	bne.n	800c57a <_free_r+0x22>
 800c5b8:	6818      	ldr	r0, [r3, #0]
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	6053      	str	r3, [r2, #4]
 800c5be:	4408      	add	r0, r1
 800c5c0:	6010      	str	r0, [r2, #0]
 800c5c2:	e7da      	b.n	800c57a <_free_r+0x22>
 800c5c4:	d902      	bls.n	800c5cc <_free_r+0x74>
 800c5c6:	230c      	movs	r3, #12
 800c5c8:	602b      	str	r3, [r5, #0]
 800c5ca:	e7d6      	b.n	800c57a <_free_r+0x22>
 800c5cc:	6820      	ldr	r0, [r4, #0]
 800c5ce:	1821      	adds	r1, r4, r0
 800c5d0:	428b      	cmp	r3, r1
 800c5d2:	bf04      	itt	eq
 800c5d4:	6819      	ldreq	r1, [r3, #0]
 800c5d6:	685b      	ldreq	r3, [r3, #4]
 800c5d8:	6063      	str	r3, [r4, #4]
 800c5da:	bf04      	itt	eq
 800c5dc:	1809      	addeq	r1, r1, r0
 800c5de:	6021      	streq	r1, [r4, #0]
 800c5e0:	6054      	str	r4, [r2, #4]
 800c5e2:	e7ca      	b.n	800c57a <_free_r+0x22>
 800c5e4:	bd38      	pop	{r3, r4, r5, pc}
 800c5e6:	bf00      	nop
 800c5e8:	200020e4 	.word	0x200020e4

0800c5ec <malloc>:
 800c5ec:	4b02      	ldr	r3, [pc, #8]	@ (800c5f8 <malloc+0xc>)
 800c5ee:	4601      	mov	r1, r0
 800c5f0:	6818      	ldr	r0, [r3, #0]
 800c5f2:	f000 b825 	b.w	800c640 <_malloc_r>
 800c5f6:	bf00      	nop
 800c5f8:	2000011c 	.word	0x2000011c

0800c5fc <sbrk_aligned>:
 800c5fc:	b570      	push	{r4, r5, r6, lr}
 800c5fe:	4e0f      	ldr	r6, [pc, #60]	@ (800c63c <sbrk_aligned+0x40>)
 800c600:	460c      	mov	r4, r1
 800c602:	6831      	ldr	r1, [r6, #0]
 800c604:	4605      	mov	r5, r0
 800c606:	b911      	cbnz	r1, 800c60e <sbrk_aligned+0x12>
 800c608:	f000 fe46 	bl	800d298 <_sbrk_r>
 800c60c:	6030      	str	r0, [r6, #0]
 800c60e:	4621      	mov	r1, r4
 800c610:	4628      	mov	r0, r5
 800c612:	f000 fe41 	bl	800d298 <_sbrk_r>
 800c616:	1c43      	adds	r3, r0, #1
 800c618:	d103      	bne.n	800c622 <sbrk_aligned+0x26>
 800c61a:	f04f 34ff 	mov.w	r4, #4294967295
 800c61e:	4620      	mov	r0, r4
 800c620:	bd70      	pop	{r4, r5, r6, pc}
 800c622:	1cc4      	adds	r4, r0, #3
 800c624:	f024 0403 	bic.w	r4, r4, #3
 800c628:	42a0      	cmp	r0, r4
 800c62a:	d0f8      	beq.n	800c61e <sbrk_aligned+0x22>
 800c62c:	1a21      	subs	r1, r4, r0
 800c62e:	4628      	mov	r0, r5
 800c630:	f000 fe32 	bl	800d298 <_sbrk_r>
 800c634:	3001      	adds	r0, #1
 800c636:	d1f2      	bne.n	800c61e <sbrk_aligned+0x22>
 800c638:	e7ef      	b.n	800c61a <sbrk_aligned+0x1e>
 800c63a:	bf00      	nop
 800c63c:	200020e0 	.word	0x200020e0

0800c640 <_malloc_r>:
 800c640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c644:	1ccd      	adds	r5, r1, #3
 800c646:	f025 0503 	bic.w	r5, r5, #3
 800c64a:	3508      	adds	r5, #8
 800c64c:	2d0c      	cmp	r5, #12
 800c64e:	bf38      	it	cc
 800c650:	250c      	movcc	r5, #12
 800c652:	2d00      	cmp	r5, #0
 800c654:	4606      	mov	r6, r0
 800c656:	db01      	blt.n	800c65c <_malloc_r+0x1c>
 800c658:	42a9      	cmp	r1, r5
 800c65a:	d904      	bls.n	800c666 <_malloc_r+0x26>
 800c65c:	230c      	movs	r3, #12
 800c65e:	6033      	str	r3, [r6, #0]
 800c660:	2000      	movs	r0, #0
 800c662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c666:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c73c <_malloc_r+0xfc>
 800c66a:	f000 f869 	bl	800c740 <__malloc_lock>
 800c66e:	f8d8 3000 	ldr.w	r3, [r8]
 800c672:	461c      	mov	r4, r3
 800c674:	bb44      	cbnz	r4, 800c6c8 <_malloc_r+0x88>
 800c676:	4629      	mov	r1, r5
 800c678:	4630      	mov	r0, r6
 800c67a:	f7ff ffbf 	bl	800c5fc <sbrk_aligned>
 800c67e:	1c43      	adds	r3, r0, #1
 800c680:	4604      	mov	r4, r0
 800c682:	d158      	bne.n	800c736 <_malloc_r+0xf6>
 800c684:	f8d8 4000 	ldr.w	r4, [r8]
 800c688:	4627      	mov	r7, r4
 800c68a:	2f00      	cmp	r7, #0
 800c68c:	d143      	bne.n	800c716 <_malloc_r+0xd6>
 800c68e:	2c00      	cmp	r4, #0
 800c690:	d04b      	beq.n	800c72a <_malloc_r+0xea>
 800c692:	6823      	ldr	r3, [r4, #0]
 800c694:	4639      	mov	r1, r7
 800c696:	4630      	mov	r0, r6
 800c698:	eb04 0903 	add.w	r9, r4, r3
 800c69c:	f000 fdfc 	bl	800d298 <_sbrk_r>
 800c6a0:	4581      	cmp	r9, r0
 800c6a2:	d142      	bne.n	800c72a <_malloc_r+0xea>
 800c6a4:	6821      	ldr	r1, [r4, #0]
 800c6a6:	1a6d      	subs	r5, r5, r1
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	f7ff ffa6 	bl	800c5fc <sbrk_aligned>
 800c6b0:	3001      	adds	r0, #1
 800c6b2:	d03a      	beq.n	800c72a <_malloc_r+0xea>
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	442b      	add	r3, r5
 800c6b8:	6023      	str	r3, [r4, #0]
 800c6ba:	f8d8 3000 	ldr.w	r3, [r8]
 800c6be:	685a      	ldr	r2, [r3, #4]
 800c6c0:	bb62      	cbnz	r2, 800c71c <_malloc_r+0xdc>
 800c6c2:	f8c8 7000 	str.w	r7, [r8]
 800c6c6:	e00f      	b.n	800c6e8 <_malloc_r+0xa8>
 800c6c8:	6822      	ldr	r2, [r4, #0]
 800c6ca:	1b52      	subs	r2, r2, r5
 800c6cc:	d420      	bmi.n	800c710 <_malloc_r+0xd0>
 800c6ce:	2a0b      	cmp	r2, #11
 800c6d0:	d917      	bls.n	800c702 <_malloc_r+0xc2>
 800c6d2:	1961      	adds	r1, r4, r5
 800c6d4:	42a3      	cmp	r3, r4
 800c6d6:	6025      	str	r5, [r4, #0]
 800c6d8:	bf18      	it	ne
 800c6da:	6059      	strne	r1, [r3, #4]
 800c6dc:	6863      	ldr	r3, [r4, #4]
 800c6de:	bf08      	it	eq
 800c6e0:	f8c8 1000 	streq.w	r1, [r8]
 800c6e4:	5162      	str	r2, [r4, r5]
 800c6e6:	604b      	str	r3, [r1, #4]
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	f000 f82f 	bl	800c74c <__malloc_unlock>
 800c6ee:	f104 000b 	add.w	r0, r4, #11
 800c6f2:	1d23      	adds	r3, r4, #4
 800c6f4:	f020 0007 	bic.w	r0, r0, #7
 800c6f8:	1ac2      	subs	r2, r0, r3
 800c6fa:	bf1c      	itt	ne
 800c6fc:	1a1b      	subne	r3, r3, r0
 800c6fe:	50a3      	strne	r3, [r4, r2]
 800c700:	e7af      	b.n	800c662 <_malloc_r+0x22>
 800c702:	6862      	ldr	r2, [r4, #4]
 800c704:	42a3      	cmp	r3, r4
 800c706:	bf0c      	ite	eq
 800c708:	f8c8 2000 	streq.w	r2, [r8]
 800c70c:	605a      	strne	r2, [r3, #4]
 800c70e:	e7eb      	b.n	800c6e8 <_malloc_r+0xa8>
 800c710:	4623      	mov	r3, r4
 800c712:	6864      	ldr	r4, [r4, #4]
 800c714:	e7ae      	b.n	800c674 <_malloc_r+0x34>
 800c716:	463c      	mov	r4, r7
 800c718:	687f      	ldr	r7, [r7, #4]
 800c71a:	e7b6      	b.n	800c68a <_malloc_r+0x4a>
 800c71c:	461a      	mov	r2, r3
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	42a3      	cmp	r3, r4
 800c722:	d1fb      	bne.n	800c71c <_malloc_r+0xdc>
 800c724:	2300      	movs	r3, #0
 800c726:	6053      	str	r3, [r2, #4]
 800c728:	e7de      	b.n	800c6e8 <_malloc_r+0xa8>
 800c72a:	230c      	movs	r3, #12
 800c72c:	6033      	str	r3, [r6, #0]
 800c72e:	4630      	mov	r0, r6
 800c730:	f000 f80c 	bl	800c74c <__malloc_unlock>
 800c734:	e794      	b.n	800c660 <_malloc_r+0x20>
 800c736:	6005      	str	r5, [r0, #0]
 800c738:	e7d6      	b.n	800c6e8 <_malloc_r+0xa8>
 800c73a:	bf00      	nop
 800c73c:	200020e4 	.word	0x200020e4

0800c740 <__malloc_lock>:
 800c740:	4801      	ldr	r0, [pc, #4]	@ (800c748 <__malloc_lock+0x8>)
 800c742:	f7ff b8ba 	b.w	800b8ba <__retarget_lock_acquire_recursive>
 800c746:	bf00      	nop
 800c748:	200020dc 	.word	0x200020dc

0800c74c <__malloc_unlock>:
 800c74c:	4801      	ldr	r0, [pc, #4]	@ (800c754 <__malloc_unlock+0x8>)
 800c74e:	f7ff b8b5 	b.w	800b8bc <__retarget_lock_release_recursive>
 800c752:	bf00      	nop
 800c754:	200020dc 	.word	0x200020dc

0800c758 <_Balloc>:
 800c758:	b570      	push	{r4, r5, r6, lr}
 800c75a:	69c6      	ldr	r6, [r0, #28]
 800c75c:	4604      	mov	r4, r0
 800c75e:	460d      	mov	r5, r1
 800c760:	b976      	cbnz	r6, 800c780 <_Balloc+0x28>
 800c762:	2010      	movs	r0, #16
 800c764:	f7ff ff42 	bl	800c5ec <malloc>
 800c768:	4602      	mov	r2, r0
 800c76a:	61e0      	str	r0, [r4, #28]
 800c76c:	b920      	cbnz	r0, 800c778 <_Balloc+0x20>
 800c76e:	4b18      	ldr	r3, [pc, #96]	@ (800c7d0 <_Balloc+0x78>)
 800c770:	4818      	ldr	r0, [pc, #96]	@ (800c7d4 <_Balloc+0x7c>)
 800c772:	216b      	movs	r1, #107	@ 0x6b
 800c774:	f000 fdae 	bl	800d2d4 <__assert_func>
 800c778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c77c:	6006      	str	r6, [r0, #0]
 800c77e:	60c6      	str	r6, [r0, #12]
 800c780:	69e6      	ldr	r6, [r4, #28]
 800c782:	68f3      	ldr	r3, [r6, #12]
 800c784:	b183      	cbz	r3, 800c7a8 <_Balloc+0x50>
 800c786:	69e3      	ldr	r3, [r4, #28]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c78e:	b9b8      	cbnz	r0, 800c7c0 <_Balloc+0x68>
 800c790:	2101      	movs	r1, #1
 800c792:	fa01 f605 	lsl.w	r6, r1, r5
 800c796:	1d72      	adds	r2, r6, #5
 800c798:	0092      	lsls	r2, r2, #2
 800c79a:	4620      	mov	r0, r4
 800c79c:	f000 fdb8 	bl	800d310 <_calloc_r>
 800c7a0:	b160      	cbz	r0, 800c7bc <_Balloc+0x64>
 800c7a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c7a6:	e00e      	b.n	800c7c6 <_Balloc+0x6e>
 800c7a8:	2221      	movs	r2, #33	@ 0x21
 800c7aa:	2104      	movs	r1, #4
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	f000 fdaf 	bl	800d310 <_calloc_r>
 800c7b2:	69e3      	ldr	r3, [r4, #28]
 800c7b4:	60f0      	str	r0, [r6, #12]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d1e4      	bne.n	800c786 <_Balloc+0x2e>
 800c7bc:	2000      	movs	r0, #0
 800c7be:	bd70      	pop	{r4, r5, r6, pc}
 800c7c0:	6802      	ldr	r2, [r0, #0]
 800c7c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c7cc:	e7f7      	b.n	800c7be <_Balloc+0x66>
 800c7ce:	bf00      	nop
 800c7d0:	0800dba9 	.word	0x0800dba9
 800c7d4:	0800dc29 	.word	0x0800dc29

0800c7d8 <_Bfree>:
 800c7d8:	b570      	push	{r4, r5, r6, lr}
 800c7da:	69c6      	ldr	r6, [r0, #28]
 800c7dc:	4605      	mov	r5, r0
 800c7de:	460c      	mov	r4, r1
 800c7e0:	b976      	cbnz	r6, 800c800 <_Bfree+0x28>
 800c7e2:	2010      	movs	r0, #16
 800c7e4:	f7ff ff02 	bl	800c5ec <malloc>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	61e8      	str	r0, [r5, #28]
 800c7ec:	b920      	cbnz	r0, 800c7f8 <_Bfree+0x20>
 800c7ee:	4b09      	ldr	r3, [pc, #36]	@ (800c814 <_Bfree+0x3c>)
 800c7f0:	4809      	ldr	r0, [pc, #36]	@ (800c818 <_Bfree+0x40>)
 800c7f2:	218f      	movs	r1, #143	@ 0x8f
 800c7f4:	f000 fd6e 	bl	800d2d4 <__assert_func>
 800c7f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7fc:	6006      	str	r6, [r0, #0]
 800c7fe:	60c6      	str	r6, [r0, #12]
 800c800:	b13c      	cbz	r4, 800c812 <_Bfree+0x3a>
 800c802:	69eb      	ldr	r3, [r5, #28]
 800c804:	6862      	ldr	r2, [r4, #4]
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c80c:	6021      	str	r1, [r4, #0]
 800c80e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c812:	bd70      	pop	{r4, r5, r6, pc}
 800c814:	0800dba9 	.word	0x0800dba9
 800c818:	0800dc29 	.word	0x0800dc29

0800c81c <__multadd>:
 800c81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c820:	690d      	ldr	r5, [r1, #16]
 800c822:	4607      	mov	r7, r0
 800c824:	460c      	mov	r4, r1
 800c826:	461e      	mov	r6, r3
 800c828:	f101 0c14 	add.w	ip, r1, #20
 800c82c:	2000      	movs	r0, #0
 800c82e:	f8dc 3000 	ldr.w	r3, [ip]
 800c832:	b299      	uxth	r1, r3
 800c834:	fb02 6101 	mla	r1, r2, r1, r6
 800c838:	0c1e      	lsrs	r6, r3, #16
 800c83a:	0c0b      	lsrs	r3, r1, #16
 800c83c:	fb02 3306 	mla	r3, r2, r6, r3
 800c840:	b289      	uxth	r1, r1
 800c842:	3001      	adds	r0, #1
 800c844:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c848:	4285      	cmp	r5, r0
 800c84a:	f84c 1b04 	str.w	r1, [ip], #4
 800c84e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c852:	dcec      	bgt.n	800c82e <__multadd+0x12>
 800c854:	b30e      	cbz	r6, 800c89a <__multadd+0x7e>
 800c856:	68a3      	ldr	r3, [r4, #8]
 800c858:	42ab      	cmp	r3, r5
 800c85a:	dc19      	bgt.n	800c890 <__multadd+0x74>
 800c85c:	6861      	ldr	r1, [r4, #4]
 800c85e:	4638      	mov	r0, r7
 800c860:	3101      	adds	r1, #1
 800c862:	f7ff ff79 	bl	800c758 <_Balloc>
 800c866:	4680      	mov	r8, r0
 800c868:	b928      	cbnz	r0, 800c876 <__multadd+0x5a>
 800c86a:	4602      	mov	r2, r0
 800c86c:	4b0c      	ldr	r3, [pc, #48]	@ (800c8a0 <__multadd+0x84>)
 800c86e:	480d      	ldr	r0, [pc, #52]	@ (800c8a4 <__multadd+0x88>)
 800c870:	21ba      	movs	r1, #186	@ 0xba
 800c872:	f000 fd2f 	bl	800d2d4 <__assert_func>
 800c876:	6922      	ldr	r2, [r4, #16]
 800c878:	3202      	adds	r2, #2
 800c87a:	f104 010c 	add.w	r1, r4, #12
 800c87e:	0092      	lsls	r2, r2, #2
 800c880:	300c      	adds	r0, #12
 800c882:	f000 fd19 	bl	800d2b8 <memcpy>
 800c886:	4621      	mov	r1, r4
 800c888:	4638      	mov	r0, r7
 800c88a:	f7ff ffa5 	bl	800c7d8 <_Bfree>
 800c88e:	4644      	mov	r4, r8
 800c890:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c894:	3501      	adds	r5, #1
 800c896:	615e      	str	r6, [r3, #20]
 800c898:	6125      	str	r5, [r4, #16]
 800c89a:	4620      	mov	r0, r4
 800c89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a0:	0800dc18 	.word	0x0800dc18
 800c8a4:	0800dc29 	.word	0x0800dc29

0800c8a8 <__hi0bits>:
 800c8a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	bf36      	itet	cc
 800c8b0:	0403      	lslcc	r3, r0, #16
 800c8b2:	2000      	movcs	r0, #0
 800c8b4:	2010      	movcc	r0, #16
 800c8b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c8ba:	bf3c      	itt	cc
 800c8bc:	021b      	lslcc	r3, r3, #8
 800c8be:	3008      	addcc	r0, #8
 800c8c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c8c4:	bf3c      	itt	cc
 800c8c6:	011b      	lslcc	r3, r3, #4
 800c8c8:	3004      	addcc	r0, #4
 800c8ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8ce:	bf3c      	itt	cc
 800c8d0:	009b      	lslcc	r3, r3, #2
 800c8d2:	3002      	addcc	r0, #2
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	db05      	blt.n	800c8e4 <__hi0bits+0x3c>
 800c8d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c8dc:	f100 0001 	add.w	r0, r0, #1
 800c8e0:	bf08      	it	eq
 800c8e2:	2020      	moveq	r0, #32
 800c8e4:	4770      	bx	lr

0800c8e6 <__lo0bits>:
 800c8e6:	6803      	ldr	r3, [r0, #0]
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	f013 0007 	ands.w	r0, r3, #7
 800c8ee:	d00b      	beq.n	800c908 <__lo0bits+0x22>
 800c8f0:	07d9      	lsls	r1, r3, #31
 800c8f2:	d421      	bmi.n	800c938 <__lo0bits+0x52>
 800c8f4:	0798      	lsls	r0, r3, #30
 800c8f6:	bf49      	itett	mi
 800c8f8:	085b      	lsrmi	r3, r3, #1
 800c8fa:	089b      	lsrpl	r3, r3, #2
 800c8fc:	2001      	movmi	r0, #1
 800c8fe:	6013      	strmi	r3, [r2, #0]
 800c900:	bf5c      	itt	pl
 800c902:	6013      	strpl	r3, [r2, #0]
 800c904:	2002      	movpl	r0, #2
 800c906:	4770      	bx	lr
 800c908:	b299      	uxth	r1, r3
 800c90a:	b909      	cbnz	r1, 800c910 <__lo0bits+0x2a>
 800c90c:	0c1b      	lsrs	r3, r3, #16
 800c90e:	2010      	movs	r0, #16
 800c910:	b2d9      	uxtb	r1, r3
 800c912:	b909      	cbnz	r1, 800c918 <__lo0bits+0x32>
 800c914:	3008      	adds	r0, #8
 800c916:	0a1b      	lsrs	r3, r3, #8
 800c918:	0719      	lsls	r1, r3, #28
 800c91a:	bf04      	itt	eq
 800c91c:	091b      	lsreq	r3, r3, #4
 800c91e:	3004      	addeq	r0, #4
 800c920:	0799      	lsls	r1, r3, #30
 800c922:	bf04      	itt	eq
 800c924:	089b      	lsreq	r3, r3, #2
 800c926:	3002      	addeq	r0, #2
 800c928:	07d9      	lsls	r1, r3, #31
 800c92a:	d403      	bmi.n	800c934 <__lo0bits+0x4e>
 800c92c:	085b      	lsrs	r3, r3, #1
 800c92e:	f100 0001 	add.w	r0, r0, #1
 800c932:	d003      	beq.n	800c93c <__lo0bits+0x56>
 800c934:	6013      	str	r3, [r2, #0]
 800c936:	4770      	bx	lr
 800c938:	2000      	movs	r0, #0
 800c93a:	4770      	bx	lr
 800c93c:	2020      	movs	r0, #32
 800c93e:	4770      	bx	lr

0800c940 <__i2b>:
 800c940:	b510      	push	{r4, lr}
 800c942:	460c      	mov	r4, r1
 800c944:	2101      	movs	r1, #1
 800c946:	f7ff ff07 	bl	800c758 <_Balloc>
 800c94a:	4602      	mov	r2, r0
 800c94c:	b928      	cbnz	r0, 800c95a <__i2b+0x1a>
 800c94e:	4b05      	ldr	r3, [pc, #20]	@ (800c964 <__i2b+0x24>)
 800c950:	4805      	ldr	r0, [pc, #20]	@ (800c968 <__i2b+0x28>)
 800c952:	f240 1145 	movw	r1, #325	@ 0x145
 800c956:	f000 fcbd 	bl	800d2d4 <__assert_func>
 800c95a:	2301      	movs	r3, #1
 800c95c:	6144      	str	r4, [r0, #20]
 800c95e:	6103      	str	r3, [r0, #16]
 800c960:	bd10      	pop	{r4, pc}
 800c962:	bf00      	nop
 800c964:	0800dc18 	.word	0x0800dc18
 800c968:	0800dc29 	.word	0x0800dc29

0800c96c <__multiply>:
 800c96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c970:	4614      	mov	r4, r2
 800c972:	690a      	ldr	r2, [r1, #16]
 800c974:	6923      	ldr	r3, [r4, #16]
 800c976:	429a      	cmp	r2, r3
 800c978:	bfa8      	it	ge
 800c97a:	4623      	movge	r3, r4
 800c97c:	460f      	mov	r7, r1
 800c97e:	bfa4      	itt	ge
 800c980:	460c      	movge	r4, r1
 800c982:	461f      	movge	r7, r3
 800c984:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c988:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c98c:	68a3      	ldr	r3, [r4, #8]
 800c98e:	6861      	ldr	r1, [r4, #4]
 800c990:	eb0a 0609 	add.w	r6, sl, r9
 800c994:	42b3      	cmp	r3, r6
 800c996:	b085      	sub	sp, #20
 800c998:	bfb8      	it	lt
 800c99a:	3101      	addlt	r1, #1
 800c99c:	f7ff fedc 	bl	800c758 <_Balloc>
 800c9a0:	b930      	cbnz	r0, 800c9b0 <__multiply+0x44>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	4b44      	ldr	r3, [pc, #272]	@ (800cab8 <__multiply+0x14c>)
 800c9a6:	4845      	ldr	r0, [pc, #276]	@ (800cabc <__multiply+0x150>)
 800c9a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c9ac:	f000 fc92 	bl	800d2d4 <__assert_func>
 800c9b0:	f100 0514 	add.w	r5, r0, #20
 800c9b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c9b8:	462b      	mov	r3, r5
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	4543      	cmp	r3, r8
 800c9be:	d321      	bcc.n	800ca04 <__multiply+0x98>
 800c9c0:	f107 0114 	add.w	r1, r7, #20
 800c9c4:	f104 0214 	add.w	r2, r4, #20
 800c9c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c9cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c9d0:	9302      	str	r3, [sp, #8]
 800c9d2:	1b13      	subs	r3, r2, r4
 800c9d4:	3b15      	subs	r3, #21
 800c9d6:	f023 0303 	bic.w	r3, r3, #3
 800c9da:	3304      	adds	r3, #4
 800c9dc:	f104 0715 	add.w	r7, r4, #21
 800c9e0:	42ba      	cmp	r2, r7
 800c9e2:	bf38      	it	cc
 800c9e4:	2304      	movcc	r3, #4
 800c9e6:	9301      	str	r3, [sp, #4]
 800c9e8:	9b02      	ldr	r3, [sp, #8]
 800c9ea:	9103      	str	r1, [sp, #12]
 800c9ec:	428b      	cmp	r3, r1
 800c9ee:	d80c      	bhi.n	800ca0a <__multiply+0x9e>
 800c9f0:	2e00      	cmp	r6, #0
 800c9f2:	dd03      	ble.n	800c9fc <__multiply+0x90>
 800c9f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d05b      	beq.n	800cab4 <__multiply+0x148>
 800c9fc:	6106      	str	r6, [r0, #16]
 800c9fe:	b005      	add	sp, #20
 800ca00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca04:	f843 2b04 	str.w	r2, [r3], #4
 800ca08:	e7d8      	b.n	800c9bc <__multiply+0x50>
 800ca0a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ca0e:	f1ba 0f00 	cmp.w	sl, #0
 800ca12:	d024      	beq.n	800ca5e <__multiply+0xf2>
 800ca14:	f104 0e14 	add.w	lr, r4, #20
 800ca18:	46a9      	mov	r9, r5
 800ca1a:	f04f 0c00 	mov.w	ip, #0
 800ca1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ca22:	f8d9 3000 	ldr.w	r3, [r9]
 800ca26:	fa1f fb87 	uxth.w	fp, r7
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ca30:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ca34:	f8d9 7000 	ldr.w	r7, [r9]
 800ca38:	4463      	add	r3, ip
 800ca3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ca3e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ca42:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ca4c:	4572      	cmp	r2, lr
 800ca4e:	f849 3b04 	str.w	r3, [r9], #4
 800ca52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ca56:	d8e2      	bhi.n	800ca1e <__multiply+0xb2>
 800ca58:	9b01      	ldr	r3, [sp, #4]
 800ca5a:	f845 c003 	str.w	ip, [r5, r3]
 800ca5e:	9b03      	ldr	r3, [sp, #12]
 800ca60:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ca64:	3104      	adds	r1, #4
 800ca66:	f1b9 0f00 	cmp.w	r9, #0
 800ca6a:	d021      	beq.n	800cab0 <__multiply+0x144>
 800ca6c:	682b      	ldr	r3, [r5, #0]
 800ca6e:	f104 0c14 	add.w	ip, r4, #20
 800ca72:	46ae      	mov	lr, r5
 800ca74:	f04f 0a00 	mov.w	sl, #0
 800ca78:	f8bc b000 	ldrh.w	fp, [ip]
 800ca7c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ca80:	fb09 770b 	mla	r7, r9, fp, r7
 800ca84:	4457      	add	r7, sl
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ca8c:	f84e 3b04 	str.w	r3, [lr], #4
 800ca90:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ca94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca98:	f8be 3000 	ldrh.w	r3, [lr]
 800ca9c:	fb09 330a 	mla	r3, r9, sl, r3
 800caa0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800caa4:	4562      	cmp	r2, ip
 800caa6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800caaa:	d8e5      	bhi.n	800ca78 <__multiply+0x10c>
 800caac:	9f01      	ldr	r7, [sp, #4]
 800caae:	51eb      	str	r3, [r5, r7]
 800cab0:	3504      	adds	r5, #4
 800cab2:	e799      	b.n	800c9e8 <__multiply+0x7c>
 800cab4:	3e01      	subs	r6, #1
 800cab6:	e79b      	b.n	800c9f0 <__multiply+0x84>
 800cab8:	0800dc18 	.word	0x0800dc18
 800cabc:	0800dc29 	.word	0x0800dc29

0800cac0 <__pow5mult>:
 800cac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cac4:	4615      	mov	r5, r2
 800cac6:	f012 0203 	ands.w	r2, r2, #3
 800caca:	4607      	mov	r7, r0
 800cacc:	460e      	mov	r6, r1
 800cace:	d007      	beq.n	800cae0 <__pow5mult+0x20>
 800cad0:	4c25      	ldr	r4, [pc, #148]	@ (800cb68 <__pow5mult+0xa8>)
 800cad2:	3a01      	subs	r2, #1
 800cad4:	2300      	movs	r3, #0
 800cad6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cada:	f7ff fe9f 	bl	800c81c <__multadd>
 800cade:	4606      	mov	r6, r0
 800cae0:	10ad      	asrs	r5, r5, #2
 800cae2:	d03d      	beq.n	800cb60 <__pow5mult+0xa0>
 800cae4:	69fc      	ldr	r4, [r7, #28]
 800cae6:	b97c      	cbnz	r4, 800cb08 <__pow5mult+0x48>
 800cae8:	2010      	movs	r0, #16
 800caea:	f7ff fd7f 	bl	800c5ec <malloc>
 800caee:	4602      	mov	r2, r0
 800caf0:	61f8      	str	r0, [r7, #28]
 800caf2:	b928      	cbnz	r0, 800cb00 <__pow5mult+0x40>
 800caf4:	4b1d      	ldr	r3, [pc, #116]	@ (800cb6c <__pow5mult+0xac>)
 800caf6:	481e      	ldr	r0, [pc, #120]	@ (800cb70 <__pow5mult+0xb0>)
 800caf8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cafc:	f000 fbea 	bl	800d2d4 <__assert_func>
 800cb00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb04:	6004      	str	r4, [r0, #0]
 800cb06:	60c4      	str	r4, [r0, #12]
 800cb08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cb0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb10:	b94c      	cbnz	r4, 800cb26 <__pow5mult+0x66>
 800cb12:	f240 2171 	movw	r1, #625	@ 0x271
 800cb16:	4638      	mov	r0, r7
 800cb18:	f7ff ff12 	bl	800c940 <__i2b>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb22:	4604      	mov	r4, r0
 800cb24:	6003      	str	r3, [r0, #0]
 800cb26:	f04f 0900 	mov.w	r9, #0
 800cb2a:	07eb      	lsls	r3, r5, #31
 800cb2c:	d50a      	bpl.n	800cb44 <__pow5mult+0x84>
 800cb2e:	4631      	mov	r1, r6
 800cb30:	4622      	mov	r2, r4
 800cb32:	4638      	mov	r0, r7
 800cb34:	f7ff ff1a 	bl	800c96c <__multiply>
 800cb38:	4631      	mov	r1, r6
 800cb3a:	4680      	mov	r8, r0
 800cb3c:	4638      	mov	r0, r7
 800cb3e:	f7ff fe4b 	bl	800c7d8 <_Bfree>
 800cb42:	4646      	mov	r6, r8
 800cb44:	106d      	asrs	r5, r5, #1
 800cb46:	d00b      	beq.n	800cb60 <__pow5mult+0xa0>
 800cb48:	6820      	ldr	r0, [r4, #0]
 800cb4a:	b938      	cbnz	r0, 800cb5c <__pow5mult+0x9c>
 800cb4c:	4622      	mov	r2, r4
 800cb4e:	4621      	mov	r1, r4
 800cb50:	4638      	mov	r0, r7
 800cb52:	f7ff ff0b 	bl	800c96c <__multiply>
 800cb56:	6020      	str	r0, [r4, #0]
 800cb58:	f8c0 9000 	str.w	r9, [r0]
 800cb5c:	4604      	mov	r4, r0
 800cb5e:	e7e4      	b.n	800cb2a <__pow5mult+0x6a>
 800cb60:	4630      	mov	r0, r6
 800cb62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb66:	bf00      	nop
 800cb68:	0800dc84 	.word	0x0800dc84
 800cb6c:	0800dba9 	.word	0x0800dba9
 800cb70:	0800dc29 	.word	0x0800dc29

0800cb74 <__lshift>:
 800cb74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb78:	460c      	mov	r4, r1
 800cb7a:	6849      	ldr	r1, [r1, #4]
 800cb7c:	6923      	ldr	r3, [r4, #16]
 800cb7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb82:	68a3      	ldr	r3, [r4, #8]
 800cb84:	4607      	mov	r7, r0
 800cb86:	4691      	mov	r9, r2
 800cb88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb8c:	f108 0601 	add.w	r6, r8, #1
 800cb90:	42b3      	cmp	r3, r6
 800cb92:	db0b      	blt.n	800cbac <__lshift+0x38>
 800cb94:	4638      	mov	r0, r7
 800cb96:	f7ff fddf 	bl	800c758 <_Balloc>
 800cb9a:	4605      	mov	r5, r0
 800cb9c:	b948      	cbnz	r0, 800cbb2 <__lshift+0x3e>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	4b28      	ldr	r3, [pc, #160]	@ (800cc44 <__lshift+0xd0>)
 800cba2:	4829      	ldr	r0, [pc, #164]	@ (800cc48 <__lshift+0xd4>)
 800cba4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cba8:	f000 fb94 	bl	800d2d4 <__assert_func>
 800cbac:	3101      	adds	r1, #1
 800cbae:	005b      	lsls	r3, r3, #1
 800cbb0:	e7ee      	b.n	800cb90 <__lshift+0x1c>
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	f100 0114 	add.w	r1, r0, #20
 800cbb8:	f100 0210 	add.w	r2, r0, #16
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	4553      	cmp	r3, sl
 800cbc0:	db33      	blt.n	800cc2a <__lshift+0xb6>
 800cbc2:	6920      	ldr	r0, [r4, #16]
 800cbc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbc8:	f104 0314 	add.w	r3, r4, #20
 800cbcc:	f019 091f 	ands.w	r9, r9, #31
 800cbd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cbd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cbd8:	d02b      	beq.n	800cc32 <__lshift+0xbe>
 800cbda:	f1c9 0e20 	rsb	lr, r9, #32
 800cbde:	468a      	mov	sl, r1
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	6818      	ldr	r0, [r3, #0]
 800cbe4:	fa00 f009 	lsl.w	r0, r0, r9
 800cbe8:	4310      	orrs	r0, r2
 800cbea:	f84a 0b04 	str.w	r0, [sl], #4
 800cbee:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbf2:	459c      	cmp	ip, r3
 800cbf4:	fa22 f20e 	lsr.w	r2, r2, lr
 800cbf8:	d8f3      	bhi.n	800cbe2 <__lshift+0x6e>
 800cbfa:	ebac 0304 	sub.w	r3, ip, r4
 800cbfe:	3b15      	subs	r3, #21
 800cc00:	f023 0303 	bic.w	r3, r3, #3
 800cc04:	3304      	adds	r3, #4
 800cc06:	f104 0015 	add.w	r0, r4, #21
 800cc0a:	4584      	cmp	ip, r0
 800cc0c:	bf38      	it	cc
 800cc0e:	2304      	movcc	r3, #4
 800cc10:	50ca      	str	r2, [r1, r3]
 800cc12:	b10a      	cbz	r2, 800cc18 <__lshift+0xa4>
 800cc14:	f108 0602 	add.w	r6, r8, #2
 800cc18:	3e01      	subs	r6, #1
 800cc1a:	4638      	mov	r0, r7
 800cc1c:	612e      	str	r6, [r5, #16]
 800cc1e:	4621      	mov	r1, r4
 800cc20:	f7ff fdda 	bl	800c7d8 <_Bfree>
 800cc24:	4628      	mov	r0, r5
 800cc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc2e:	3301      	adds	r3, #1
 800cc30:	e7c5      	b.n	800cbbe <__lshift+0x4a>
 800cc32:	3904      	subs	r1, #4
 800cc34:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc38:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc3c:	459c      	cmp	ip, r3
 800cc3e:	d8f9      	bhi.n	800cc34 <__lshift+0xc0>
 800cc40:	e7ea      	b.n	800cc18 <__lshift+0xa4>
 800cc42:	bf00      	nop
 800cc44:	0800dc18 	.word	0x0800dc18
 800cc48:	0800dc29 	.word	0x0800dc29

0800cc4c <__mcmp>:
 800cc4c:	690a      	ldr	r2, [r1, #16]
 800cc4e:	4603      	mov	r3, r0
 800cc50:	6900      	ldr	r0, [r0, #16]
 800cc52:	1a80      	subs	r0, r0, r2
 800cc54:	b530      	push	{r4, r5, lr}
 800cc56:	d10e      	bne.n	800cc76 <__mcmp+0x2a>
 800cc58:	3314      	adds	r3, #20
 800cc5a:	3114      	adds	r1, #20
 800cc5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cc60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cc64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cc68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cc6c:	4295      	cmp	r5, r2
 800cc6e:	d003      	beq.n	800cc78 <__mcmp+0x2c>
 800cc70:	d205      	bcs.n	800cc7e <__mcmp+0x32>
 800cc72:	f04f 30ff 	mov.w	r0, #4294967295
 800cc76:	bd30      	pop	{r4, r5, pc}
 800cc78:	42a3      	cmp	r3, r4
 800cc7a:	d3f3      	bcc.n	800cc64 <__mcmp+0x18>
 800cc7c:	e7fb      	b.n	800cc76 <__mcmp+0x2a>
 800cc7e:	2001      	movs	r0, #1
 800cc80:	e7f9      	b.n	800cc76 <__mcmp+0x2a>
	...

0800cc84 <__mdiff>:
 800cc84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc88:	4689      	mov	r9, r1
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	4611      	mov	r1, r2
 800cc8e:	4648      	mov	r0, r9
 800cc90:	4614      	mov	r4, r2
 800cc92:	f7ff ffdb 	bl	800cc4c <__mcmp>
 800cc96:	1e05      	subs	r5, r0, #0
 800cc98:	d112      	bne.n	800ccc0 <__mdiff+0x3c>
 800cc9a:	4629      	mov	r1, r5
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	f7ff fd5b 	bl	800c758 <_Balloc>
 800cca2:	4602      	mov	r2, r0
 800cca4:	b928      	cbnz	r0, 800ccb2 <__mdiff+0x2e>
 800cca6:	4b3f      	ldr	r3, [pc, #252]	@ (800cda4 <__mdiff+0x120>)
 800cca8:	f240 2137 	movw	r1, #567	@ 0x237
 800ccac:	483e      	ldr	r0, [pc, #248]	@ (800cda8 <__mdiff+0x124>)
 800ccae:	f000 fb11 	bl	800d2d4 <__assert_func>
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ccb8:	4610      	mov	r0, r2
 800ccba:	b003      	add	sp, #12
 800ccbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccc0:	bfbc      	itt	lt
 800ccc2:	464b      	movlt	r3, r9
 800ccc4:	46a1      	movlt	r9, r4
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cccc:	bfba      	itte	lt
 800ccce:	461c      	movlt	r4, r3
 800ccd0:	2501      	movlt	r5, #1
 800ccd2:	2500      	movge	r5, #0
 800ccd4:	f7ff fd40 	bl	800c758 <_Balloc>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	b918      	cbnz	r0, 800cce4 <__mdiff+0x60>
 800ccdc:	4b31      	ldr	r3, [pc, #196]	@ (800cda4 <__mdiff+0x120>)
 800ccde:	f240 2145 	movw	r1, #581	@ 0x245
 800cce2:	e7e3      	b.n	800ccac <__mdiff+0x28>
 800cce4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cce8:	6926      	ldr	r6, [r4, #16]
 800ccea:	60c5      	str	r5, [r0, #12]
 800ccec:	f109 0310 	add.w	r3, r9, #16
 800ccf0:	f109 0514 	add.w	r5, r9, #20
 800ccf4:	f104 0e14 	add.w	lr, r4, #20
 800ccf8:	f100 0b14 	add.w	fp, r0, #20
 800ccfc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cd00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cd04:	9301      	str	r3, [sp, #4]
 800cd06:	46d9      	mov	r9, fp
 800cd08:	f04f 0c00 	mov.w	ip, #0
 800cd0c:	9b01      	ldr	r3, [sp, #4]
 800cd0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cd12:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cd16:	9301      	str	r3, [sp, #4]
 800cd18:	fa1f f38a 	uxth.w	r3, sl
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	b283      	uxth	r3, r0
 800cd20:	1acb      	subs	r3, r1, r3
 800cd22:	0c00      	lsrs	r0, r0, #16
 800cd24:	4463      	add	r3, ip
 800cd26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cd2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cd34:	4576      	cmp	r6, lr
 800cd36:	f849 3b04 	str.w	r3, [r9], #4
 800cd3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd3e:	d8e5      	bhi.n	800cd0c <__mdiff+0x88>
 800cd40:	1b33      	subs	r3, r6, r4
 800cd42:	3b15      	subs	r3, #21
 800cd44:	f023 0303 	bic.w	r3, r3, #3
 800cd48:	3415      	adds	r4, #21
 800cd4a:	3304      	adds	r3, #4
 800cd4c:	42a6      	cmp	r6, r4
 800cd4e:	bf38      	it	cc
 800cd50:	2304      	movcc	r3, #4
 800cd52:	441d      	add	r5, r3
 800cd54:	445b      	add	r3, fp
 800cd56:	461e      	mov	r6, r3
 800cd58:	462c      	mov	r4, r5
 800cd5a:	4544      	cmp	r4, r8
 800cd5c:	d30e      	bcc.n	800cd7c <__mdiff+0xf8>
 800cd5e:	f108 0103 	add.w	r1, r8, #3
 800cd62:	1b49      	subs	r1, r1, r5
 800cd64:	f021 0103 	bic.w	r1, r1, #3
 800cd68:	3d03      	subs	r5, #3
 800cd6a:	45a8      	cmp	r8, r5
 800cd6c:	bf38      	it	cc
 800cd6e:	2100      	movcc	r1, #0
 800cd70:	440b      	add	r3, r1
 800cd72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd76:	b191      	cbz	r1, 800cd9e <__mdiff+0x11a>
 800cd78:	6117      	str	r7, [r2, #16]
 800cd7a:	e79d      	b.n	800ccb8 <__mdiff+0x34>
 800cd7c:	f854 1b04 	ldr.w	r1, [r4], #4
 800cd80:	46e6      	mov	lr, ip
 800cd82:	0c08      	lsrs	r0, r1, #16
 800cd84:	fa1c fc81 	uxtah	ip, ip, r1
 800cd88:	4471      	add	r1, lr
 800cd8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cd8e:	b289      	uxth	r1, r1
 800cd90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cd94:	f846 1b04 	str.w	r1, [r6], #4
 800cd98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd9c:	e7dd      	b.n	800cd5a <__mdiff+0xd6>
 800cd9e:	3f01      	subs	r7, #1
 800cda0:	e7e7      	b.n	800cd72 <__mdiff+0xee>
 800cda2:	bf00      	nop
 800cda4:	0800dc18 	.word	0x0800dc18
 800cda8:	0800dc29 	.word	0x0800dc29

0800cdac <__d2b>:
 800cdac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cdb0:	460f      	mov	r7, r1
 800cdb2:	2101      	movs	r1, #1
 800cdb4:	ec59 8b10 	vmov	r8, r9, d0
 800cdb8:	4616      	mov	r6, r2
 800cdba:	f7ff fccd 	bl	800c758 <_Balloc>
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	b930      	cbnz	r0, 800cdd0 <__d2b+0x24>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	4b23      	ldr	r3, [pc, #140]	@ (800ce54 <__d2b+0xa8>)
 800cdc6:	4824      	ldr	r0, [pc, #144]	@ (800ce58 <__d2b+0xac>)
 800cdc8:	f240 310f 	movw	r1, #783	@ 0x30f
 800cdcc:	f000 fa82 	bl	800d2d4 <__assert_func>
 800cdd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cdd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cdd8:	b10d      	cbz	r5, 800cdde <__d2b+0x32>
 800cdda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cdde:	9301      	str	r3, [sp, #4]
 800cde0:	f1b8 0300 	subs.w	r3, r8, #0
 800cde4:	d023      	beq.n	800ce2e <__d2b+0x82>
 800cde6:	4668      	mov	r0, sp
 800cde8:	9300      	str	r3, [sp, #0]
 800cdea:	f7ff fd7c 	bl	800c8e6 <__lo0bits>
 800cdee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cdf2:	b1d0      	cbz	r0, 800ce2a <__d2b+0x7e>
 800cdf4:	f1c0 0320 	rsb	r3, r0, #32
 800cdf8:	fa02 f303 	lsl.w	r3, r2, r3
 800cdfc:	430b      	orrs	r3, r1
 800cdfe:	40c2      	lsrs	r2, r0
 800ce00:	6163      	str	r3, [r4, #20]
 800ce02:	9201      	str	r2, [sp, #4]
 800ce04:	9b01      	ldr	r3, [sp, #4]
 800ce06:	61a3      	str	r3, [r4, #24]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	bf0c      	ite	eq
 800ce0c:	2201      	moveq	r2, #1
 800ce0e:	2202      	movne	r2, #2
 800ce10:	6122      	str	r2, [r4, #16]
 800ce12:	b1a5      	cbz	r5, 800ce3e <__d2b+0x92>
 800ce14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ce18:	4405      	add	r5, r0
 800ce1a:	603d      	str	r5, [r7, #0]
 800ce1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ce20:	6030      	str	r0, [r6, #0]
 800ce22:	4620      	mov	r0, r4
 800ce24:	b003      	add	sp, #12
 800ce26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce2a:	6161      	str	r1, [r4, #20]
 800ce2c:	e7ea      	b.n	800ce04 <__d2b+0x58>
 800ce2e:	a801      	add	r0, sp, #4
 800ce30:	f7ff fd59 	bl	800c8e6 <__lo0bits>
 800ce34:	9b01      	ldr	r3, [sp, #4]
 800ce36:	6163      	str	r3, [r4, #20]
 800ce38:	3020      	adds	r0, #32
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	e7e8      	b.n	800ce10 <__d2b+0x64>
 800ce3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ce46:	6038      	str	r0, [r7, #0]
 800ce48:	6918      	ldr	r0, [r3, #16]
 800ce4a:	f7ff fd2d 	bl	800c8a8 <__hi0bits>
 800ce4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce52:	e7e5      	b.n	800ce20 <__d2b+0x74>
 800ce54:	0800dc18 	.word	0x0800dc18
 800ce58:	0800dc29 	.word	0x0800dc29

0800ce5c <__ssputs_r>:
 800ce5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce60:	688e      	ldr	r6, [r1, #8]
 800ce62:	461f      	mov	r7, r3
 800ce64:	42be      	cmp	r6, r7
 800ce66:	680b      	ldr	r3, [r1, #0]
 800ce68:	4682      	mov	sl, r0
 800ce6a:	460c      	mov	r4, r1
 800ce6c:	4690      	mov	r8, r2
 800ce6e:	d82d      	bhi.n	800cecc <__ssputs_r+0x70>
 800ce70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ce78:	d026      	beq.n	800cec8 <__ssputs_r+0x6c>
 800ce7a:	6965      	ldr	r5, [r4, #20]
 800ce7c:	6909      	ldr	r1, [r1, #16]
 800ce7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce82:	eba3 0901 	sub.w	r9, r3, r1
 800ce86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce8a:	1c7b      	adds	r3, r7, #1
 800ce8c:	444b      	add	r3, r9
 800ce8e:	106d      	asrs	r5, r5, #1
 800ce90:	429d      	cmp	r5, r3
 800ce92:	bf38      	it	cc
 800ce94:	461d      	movcc	r5, r3
 800ce96:	0553      	lsls	r3, r2, #21
 800ce98:	d527      	bpl.n	800ceea <__ssputs_r+0x8e>
 800ce9a:	4629      	mov	r1, r5
 800ce9c:	f7ff fbd0 	bl	800c640 <_malloc_r>
 800cea0:	4606      	mov	r6, r0
 800cea2:	b360      	cbz	r0, 800cefe <__ssputs_r+0xa2>
 800cea4:	6921      	ldr	r1, [r4, #16]
 800cea6:	464a      	mov	r2, r9
 800cea8:	f000 fa06 	bl	800d2b8 <memcpy>
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ceb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ceb6:	81a3      	strh	r3, [r4, #12]
 800ceb8:	6126      	str	r6, [r4, #16]
 800ceba:	6165      	str	r5, [r4, #20]
 800cebc:	444e      	add	r6, r9
 800cebe:	eba5 0509 	sub.w	r5, r5, r9
 800cec2:	6026      	str	r6, [r4, #0]
 800cec4:	60a5      	str	r5, [r4, #8]
 800cec6:	463e      	mov	r6, r7
 800cec8:	42be      	cmp	r6, r7
 800ceca:	d900      	bls.n	800cece <__ssputs_r+0x72>
 800cecc:	463e      	mov	r6, r7
 800cece:	6820      	ldr	r0, [r4, #0]
 800ced0:	4632      	mov	r2, r6
 800ced2:	4641      	mov	r1, r8
 800ced4:	f000 f9c6 	bl	800d264 <memmove>
 800ced8:	68a3      	ldr	r3, [r4, #8]
 800ceda:	1b9b      	subs	r3, r3, r6
 800cedc:	60a3      	str	r3, [r4, #8]
 800cede:	6823      	ldr	r3, [r4, #0]
 800cee0:	4433      	add	r3, r6
 800cee2:	6023      	str	r3, [r4, #0]
 800cee4:	2000      	movs	r0, #0
 800cee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceea:	462a      	mov	r2, r5
 800ceec:	f000 fa36 	bl	800d35c <_realloc_r>
 800cef0:	4606      	mov	r6, r0
 800cef2:	2800      	cmp	r0, #0
 800cef4:	d1e0      	bne.n	800ceb8 <__ssputs_r+0x5c>
 800cef6:	6921      	ldr	r1, [r4, #16]
 800cef8:	4650      	mov	r0, sl
 800cefa:	f7ff fb2d 	bl	800c558 <_free_r>
 800cefe:	230c      	movs	r3, #12
 800cf00:	f8ca 3000 	str.w	r3, [sl]
 800cf04:	89a3      	ldrh	r3, [r4, #12]
 800cf06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf0a:	81a3      	strh	r3, [r4, #12]
 800cf0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf10:	e7e9      	b.n	800cee6 <__ssputs_r+0x8a>
	...

0800cf14 <_svfiprintf_r>:
 800cf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf18:	4698      	mov	r8, r3
 800cf1a:	898b      	ldrh	r3, [r1, #12]
 800cf1c:	061b      	lsls	r3, r3, #24
 800cf1e:	b09d      	sub	sp, #116	@ 0x74
 800cf20:	4607      	mov	r7, r0
 800cf22:	460d      	mov	r5, r1
 800cf24:	4614      	mov	r4, r2
 800cf26:	d510      	bpl.n	800cf4a <_svfiprintf_r+0x36>
 800cf28:	690b      	ldr	r3, [r1, #16]
 800cf2a:	b973      	cbnz	r3, 800cf4a <_svfiprintf_r+0x36>
 800cf2c:	2140      	movs	r1, #64	@ 0x40
 800cf2e:	f7ff fb87 	bl	800c640 <_malloc_r>
 800cf32:	6028      	str	r0, [r5, #0]
 800cf34:	6128      	str	r0, [r5, #16]
 800cf36:	b930      	cbnz	r0, 800cf46 <_svfiprintf_r+0x32>
 800cf38:	230c      	movs	r3, #12
 800cf3a:	603b      	str	r3, [r7, #0]
 800cf3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf40:	b01d      	add	sp, #116	@ 0x74
 800cf42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf46:	2340      	movs	r3, #64	@ 0x40
 800cf48:	616b      	str	r3, [r5, #20]
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf4e:	2320      	movs	r3, #32
 800cf50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf54:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf58:	2330      	movs	r3, #48	@ 0x30
 800cf5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d0f8 <_svfiprintf_r+0x1e4>
 800cf5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf62:	f04f 0901 	mov.w	r9, #1
 800cf66:	4623      	mov	r3, r4
 800cf68:	469a      	mov	sl, r3
 800cf6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf6e:	b10a      	cbz	r2, 800cf74 <_svfiprintf_r+0x60>
 800cf70:	2a25      	cmp	r2, #37	@ 0x25
 800cf72:	d1f9      	bne.n	800cf68 <_svfiprintf_r+0x54>
 800cf74:	ebba 0b04 	subs.w	fp, sl, r4
 800cf78:	d00b      	beq.n	800cf92 <_svfiprintf_r+0x7e>
 800cf7a:	465b      	mov	r3, fp
 800cf7c:	4622      	mov	r2, r4
 800cf7e:	4629      	mov	r1, r5
 800cf80:	4638      	mov	r0, r7
 800cf82:	f7ff ff6b 	bl	800ce5c <__ssputs_r>
 800cf86:	3001      	adds	r0, #1
 800cf88:	f000 80a7 	beq.w	800d0da <_svfiprintf_r+0x1c6>
 800cf8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf8e:	445a      	add	r2, fp
 800cf90:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf92:	f89a 3000 	ldrb.w	r3, [sl]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	f000 809f 	beq.w	800d0da <_svfiprintf_r+0x1c6>
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cfa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfa6:	f10a 0a01 	add.w	sl, sl, #1
 800cfaa:	9304      	str	r3, [sp, #16]
 800cfac:	9307      	str	r3, [sp, #28]
 800cfae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cfb2:	931a      	str	r3, [sp, #104]	@ 0x68
 800cfb4:	4654      	mov	r4, sl
 800cfb6:	2205      	movs	r2, #5
 800cfb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfbc:	484e      	ldr	r0, [pc, #312]	@ (800d0f8 <_svfiprintf_r+0x1e4>)
 800cfbe:	f7f3 f937 	bl	8000230 <memchr>
 800cfc2:	9a04      	ldr	r2, [sp, #16]
 800cfc4:	b9d8      	cbnz	r0, 800cffe <_svfiprintf_r+0xea>
 800cfc6:	06d0      	lsls	r0, r2, #27
 800cfc8:	bf44      	itt	mi
 800cfca:	2320      	movmi	r3, #32
 800cfcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfd0:	0711      	lsls	r1, r2, #28
 800cfd2:	bf44      	itt	mi
 800cfd4:	232b      	movmi	r3, #43	@ 0x2b
 800cfd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfda:	f89a 3000 	ldrb.w	r3, [sl]
 800cfde:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfe0:	d015      	beq.n	800d00e <_svfiprintf_r+0xfa>
 800cfe2:	9a07      	ldr	r2, [sp, #28]
 800cfe4:	4654      	mov	r4, sl
 800cfe6:	2000      	movs	r0, #0
 800cfe8:	f04f 0c0a 	mov.w	ip, #10
 800cfec:	4621      	mov	r1, r4
 800cfee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cff2:	3b30      	subs	r3, #48	@ 0x30
 800cff4:	2b09      	cmp	r3, #9
 800cff6:	d94b      	bls.n	800d090 <_svfiprintf_r+0x17c>
 800cff8:	b1b0      	cbz	r0, 800d028 <_svfiprintf_r+0x114>
 800cffa:	9207      	str	r2, [sp, #28]
 800cffc:	e014      	b.n	800d028 <_svfiprintf_r+0x114>
 800cffe:	eba0 0308 	sub.w	r3, r0, r8
 800d002:	fa09 f303 	lsl.w	r3, r9, r3
 800d006:	4313      	orrs	r3, r2
 800d008:	9304      	str	r3, [sp, #16]
 800d00a:	46a2      	mov	sl, r4
 800d00c:	e7d2      	b.n	800cfb4 <_svfiprintf_r+0xa0>
 800d00e:	9b03      	ldr	r3, [sp, #12]
 800d010:	1d19      	adds	r1, r3, #4
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	9103      	str	r1, [sp, #12]
 800d016:	2b00      	cmp	r3, #0
 800d018:	bfbb      	ittet	lt
 800d01a:	425b      	neglt	r3, r3
 800d01c:	f042 0202 	orrlt.w	r2, r2, #2
 800d020:	9307      	strge	r3, [sp, #28]
 800d022:	9307      	strlt	r3, [sp, #28]
 800d024:	bfb8      	it	lt
 800d026:	9204      	strlt	r2, [sp, #16]
 800d028:	7823      	ldrb	r3, [r4, #0]
 800d02a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d02c:	d10a      	bne.n	800d044 <_svfiprintf_r+0x130>
 800d02e:	7863      	ldrb	r3, [r4, #1]
 800d030:	2b2a      	cmp	r3, #42	@ 0x2a
 800d032:	d132      	bne.n	800d09a <_svfiprintf_r+0x186>
 800d034:	9b03      	ldr	r3, [sp, #12]
 800d036:	1d1a      	adds	r2, r3, #4
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	9203      	str	r2, [sp, #12]
 800d03c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d040:	3402      	adds	r4, #2
 800d042:	9305      	str	r3, [sp, #20]
 800d044:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d108 <_svfiprintf_r+0x1f4>
 800d048:	7821      	ldrb	r1, [r4, #0]
 800d04a:	2203      	movs	r2, #3
 800d04c:	4650      	mov	r0, sl
 800d04e:	f7f3 f8ef 	bl	8000230 <memchr>
 800d052:	b138      	cbz	r0, 800d064 <_svfiprintf_r+0x150>
 800d054:	9b04      	ldr	r3, [sp, #16]
 800d056:	eba0 000a 	sub.w	r0, r0, sl
 800d05a:	2240      	movs	r2, #64	@ 0x40
 800d05c:	4082      	lsls	r2, r0
 800d05e:	4313      	orrs	r3, r2
 800d060:	3401      	adds	r4, #1
 800d062:	9304      	str	r3, [sp, #16]
 800d064:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d068:	4824      	ldr	r0, [pc, #144]	@ (800d0fc <_svfiprintf_r+0x1e8>)
 800d06a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d06e:	2206      	movs	r2, #6
 800d070:	f7f3 f8de 	bl	8000230 <memchr>
 800d074:	2800      	cmp	r0, #0
 800d076:	d036      	beq.n	800d0e6 <_svfiprintf_r+0x1d2>
 800d078:	4b21      	ldr	r3, [pc, #132]	@ (800d100 <_svfiprintf_r+0x1ec>)
 800d07a:	bb1b      	cbnz	r3, 800d0c4 <_svfiprintf_r+0x1b0>
 800d07c:	9b03      	ldr	r3, [sp, #12]
 800d07e:	3307      	adds	r3, #7
 800d080:	f023 0307 	bic.w	r3, r3, #7
 800d084:	3308      	adds	r3, #8
 800d086:	9303      	str	r3, [sp, #12]
 800d088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d08a:	4433      	add	r3, r6
 800d08c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d08e:	e76a      	b.n	800cf66 <_svfiprintf_r+0x52>
 800d090:	fb0c 3202 	mla	r2, ip, r2, r3
 800d094:	460c      	mov	r4, r1
 800d096:	2001      	movs	r0, #1
 800d098:	e7a8      	b.n	800cfec <_svfiprintf_r+0xd8>
 800d09a:	2300      	movs	r3, #0
 800d09c:	3401      	adds	r4, #1
 800d09e:	9305      	str	r3, [sp, #20]
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	f04f 0c0a 	mov.w	ip, #10
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0ac:	3a30      	subs	r2, #48	@ 0x30
 800d0ae:	2a09      	cmp	r2, #9
 800d0b0:	d903      	bls.n	800d0ba <_svfiprintf_r+0x1a6>
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d0c6      	beq.n	800d044 <_svfiprintf_r+0x130>
 800d0b6:	9105      	str	r1, [sp, #20]
 800d0b8:	e7c4      	b.n	800d044 <_svfiprintf_r+0x130>
 800d0ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0be:	4604      	mov	r4, r0
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	e7f0      	b.n	800d0a6 <_svfiprintf_r+0x192>
 800d0c4:	ab03      	add	r3, sp, #12
 800d0c6:	9300      	str	r3, [sp, #0]
 800d0c8:	462a      	mov	r2, r5
 800d0ca:	4b0e      	ldr	r3, [pc, #56]	@ (800d104 <_svfiprintf_r+0x1f0>)
 800d0cc:	a904      	add	r1, sp, #16
 800d0ce:	4638      	mov	r0, r7
 800d0d0:	f7fd fe98 	bl	800ae04 <_printf_float>
 800d0d4:	1c42      	adds	r2, r0, #1
 800d0d6:	4606      	mov	r6, r0
 800d0d8:	d1d6      	bne.n	800d088 <_svfiprintf_r+0x174>
 800d0da:	89ab      	ldrh	r3, [r5, #12]
 800d0dc:	065b      	lsls	r3, r3, #25
 800d0de:	f53f af2d 	bmi.w	800cf3c <_svfiprintf_r+0x28>
 800d0e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0e4:	e72c      	b.n	800cf40 <_svfiprintf_r+0x2c>
 800d0e6:	ab03      	add	r3, sp, #12
 800d0e8:	9300      	str	r3, [sp, #0]
 800d0ea:	462a      	mov	r2, r5
 800d0ec:	4b05      	ldr	r3, [pc, #20]	@ (800d104 <_svfiprintf_r+0x1f0>)
 800d0ee:	a904      	add	r1, sp, #16
 800d0f0:	4638      	mov	r0, r7
 800d0f2:	f7fe f91f 	bl	800b334 <_printf_i>
 800d0f6:	e7ed      	b.n	800d0d4 <_svfiprintf_r+0x1c0>
 800d0f8:	0800dd80 	.word	0x0800dd80
 800d0fc:	0800dd8a 	.word	0x0800dd8a
 800d100:	0800ae05 	.word	0x0800ae05
 800d104:	0800ce5d 	.word	0x0800ce5d
 800d108:	0800dd86 	.word	0x0800dd86

0800d10c <__sflush_r>:
 800d10c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d114:	0716      	lsls	r6, r2, #28
 800d116:	4605      	mov	r5, r0
 800d118:	460c      	mov	r4, r1
 800d11a:	d454      	bmi.n	800d1c6 <__sflush_r+0xba>
 800d11c:	684b      	ldr	r3, [r1, #4]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	dc02      	bgt.n	800d128 <__sflush_r+0x1c>
 800d122:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d124:	2b00      	cmp	r3, #0
 800d126:	dd48      	ble.n	800d1ba <__sflush_r+0xae>
 800d128:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d12a:	2e00      	cmp	r6, #0
 800d12c:	d045      	beq.n	800d1ba <__sflush_r+0xae>
 800d12e:	2300      	movs	r3, #0
 800d130:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d134:	682f      	ldr	r7, [r5, #0]
 800d136:	6a21      	ldr	r1, [r4, #32]
 800d138:	602b      	str	r3, [r5, #0]
 800d13a:	d030      	beq.n	800d19e <__sflush_r+0x92>
 800d13c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d13e:	89a3      	ldrh	r3, [r4, #12]
 800d140:	0759      	lsls	r1, r3, #29
 800d142:	d505      	bpl.n	800d150 <__sflush_r+0x44>
 800d144:	6863      	ldr	r3, [r4, #4]
 800d146:	1ad2      	subs	r2, r2, r3
 800d148:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d14a:	b10b      	cbz	r3, 800d150 <__sflush_r+0x44>
 800d14c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d14e:	1ad2      	subs	r2, r2, r3
 800d150:	2300      	movs	r3, #0
 800d152:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d154:	6a21      	ldr	r1, [r4, #32]
 800d156:	4628      	mov	r0, r5
 800d158:	47b0      	blx	r6
 800d15a:	1c43      	adds	r3, r0, #1
 800d15c:	89a3      	ldrh	r3, [r4, #12]
 800d15e:	d106      	bne.n	800d16e <__sflush_r+0x62>
 800d160:	6829      	ldr	r1, [r5, #0]
 800d162:	291d      	cmp	r1, #29
 800d164:	d82b      	bhi.n	800d1be <__sflush_r+0xb2>
 800d166:	4a2a      	ldr	r2, [pc, #168]	@ (800d210 <__sflush_r+0x104>)
 800d168:	410a      	asrs	r2, r1
 800d16a:	07d6      	lsls	r6, r2, #31
 800d16c:	d427      	bmi.n	800d1be <__sflush_r+0xb2>
 800d16e:	2200      	movs	r2, #0
 800d170:	6062      	str	r2, [r4, #4]
 800d172:	04d9      	lsls	r1, r3, #19
 800d174:	6922      	ldr	r2, [r4, #16]
 800d176:	6022      	str	r2, [r4, #0]
 800d178:	d504      	bpl.n	800d184 <__sflush_r+0x78>
 800d17a:	1c42      	adds	r2, r0, #1
 800d17c:	d101      	bne.n	800d182 <__sflush_r+0x76>
 800d17e:	682b      	ldr	r3, [r5, #0]
 800d180:	b903      	cbnz	r3, 800d184 <__sflush_r+0x78>
 800d182:	6560      	str	r0, [r4, #84]	@ 0x54
 800d184:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d186:	602f      	str	r7, [r5, #0]
 800d188:	b1b9      	cbz	r1, 800d1ba <__sflush_r+0xae>
 800d18a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d18e:	4299      	cmp	r1, r3
 800d190:	d002      	beq.n	800d198 <__sflush_r+0x8c>
 800d192:	4628      	mov	r0, r5
 800d194:	f7ff f9e0 	bl	800c558 <_free_r>
 800d198:	2300      	movs	r3, #0
 800d19a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d19c:	e00d      	b.n	800d1ba <__sflush_r+0xae>
 800d19e:	2301      	movs	r3, #1
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	47b0      	blx	r6
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	1c50      	adds	r0, r2, #1
 800d1a8:	d1c9      	bne.n	800d13e <__sflush_r+0x32>
 800d1aa:	682b      	ldr	r3, [r5, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d0c6      	beq.n	800d13e <__sflush_r+0x32>
 800d1b0:	2b1d      	cmp	r3, #29
 800d1b2:	d001      	beq.n	800d1b8 <__sflush_r+0xac>
 800d1b4:	2b16      	cmp	r3, #22
 800d1b6:	d11e      	bne.n	800d1f6 <__sflush_r+0xea>
 800d1b8:	602f      	str	r7, [r5, #0]
 800d1ba:	2000      	movs	r0, #0
 800d1bc:	e022      	b.n	800d204 <__sflush_r+0xf8>
 800d1be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1c2:	b21b      	sxth	r3, r3
 800d1c4:	e01b      	b.n	800d1fe <__sflush_r+0xf2>
 800d1c6:	690f      	ldr	r7, [r1, #16]
 800d1c8:	2f00      	cmp	r7, #0
 800d1ca:	d0f6      	beq.n	800d1ba <__sflush_r+0xae>
 800d1cc:	0793      	lsls	r3, r2, #30
 800d1ce:	680e      	ldr	r6, [r1, #0]
 800d1d0:	bf08      	it	eq
 800d1d2:	694b      	ldreq	r3, [r1, #20]
 800d1d4:	600f      	str	r7, [r1, #0]
 800d1d6:	bf18      	it	ne
 800d1d8:	2300      	movne	r3, #0
 800d1da:	eba6 0807 	sub.w	r8, r6, r7
 800d1de:	608b      	str	r3, [r1, #8]
 800d1e0:	f1b8 0f00 	cmp.w	r8, #0
 800d1e4:	dde9      	ble.n	800d1ba <__sflush_r+0xae>
 800d1e6:	6a21      	ldr	r1, [r4, #32]
 800d1e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d1ea:	4643      	mov	r3, r8
 800d1ec:	463a      	mov	r2, r7
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	47b0      	blx	r6
 800d1f2:	2800      	cmp	r0, #0
 800d1f4:	dc08      	bgt.n	800d208 <__sflush_r+0xfc>
 800d1f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1fe:	81a3      	strh	r3, [r4, #12]
 800d200:	f04f 30ff 	mov.w	r0, #4294967295
 800d204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d208:	4407      	add	r7, r0
 800d20a:	eba8 0800 	sub.w	r8, r8, r0
 800d20e:	e7e7      	b.n	800d1e0 <__sflush_r+0xd4>
 800d210:	dfbffffe 	.word	0xdfbffffe

0800d214 <_fflush_r>:
 800d214:	b538      	push	{r3, r4, r5, lr}
 800d216:	690b      	ldr	r3, [r1, #16]
 800d218:	4605      	mov	r5, r0
 800d21a:	460c      	mov	r4, r1
 800d21c:	b913      	cbnz	r3, 800d224 <_fflush_r+0x10>
 800d21e:	2500      	movs	r5, #0
 800d220:	4628      	mov	r0, r5
 800d222:	bd38      	pop	{r3, r4, r5, pc}
 800d224:	b118      	cbz	r0, 800d22e <_fflush_r+0x1a>
 800d226:	6a03      	ldr	r3, [r0, #32]
 800d228:	b90b      	cbnz	r3, 800d22e <_fflush_r+0x1a>
 800d22a:	f7fe fa2f 	bl	800b68c <__sinit>
 800d22e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d0f3      	beq.n	800d21e <_fflush_r+0xa>
 800d236:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d238:	07d0      	lsls	r0, r2, #31
 800d23a:	d404      	bmi.n	800d246 <_fflush_r+0x32>
 800d23c:	0599      	lsls	r1, r3, #22
 800d23e:	d402      	bmi.n	800d246 <_fflush_r+0x32>
 800d240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d242:	f7fe fb3a 	bl	800b8ba <__retarget_lock_acquire_recursive>
 800d246:	4628      	mov	r0, r5
 800d248:	4621      	mov	r1, r4
 800d24a:	f7ff ff5f 	bl	800d10c <__sflush_r>
 800d24e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d250:	07da      	lsls	r2, r3, #31
 800d252:	4605      	mov	r5, r0
 800d254:	d4e4      	bmi.n	800d220 <_fflush_r+0xc>
 800d256:	89a3      	ldrh	r3, [r4, #12]
 800d258:	059b      	lsls	r3, r3, #22
 800d25a:	d4e1      	bmi.n	800d220 <_fflush_r+0xc>
 800d25c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d25e:	f7fe fb2d 	bl	800b8bc <__retarget_lock_release_recursive>
 800d262:	e7dd      	b.n	800d220 <_fflush_r+0xc>

0800d264 <memmove>:
 800d264:	4288      	cmp	r0, r1
 800d266:	b510      	push	{r4, lr}
 800d268:	eb01 0402 	add.w	r4, r1, r2
 800d26c:	d902      	bls.n	800d274 <memmove+0x10>
 800d26e:	4284      	cmp	r4, r0
 800d270:	4623      	mov	r3, r4
 800d272:	d807      	bhi.n	800d284 <memmove+0x20>
 800d274:	1e43      	subs	r3, r0, #1
 800d276:	42a1      	cmp	r1, r4
 800d278:	d008      	beq.n	800d28c <memmove+0x28>
 800d27a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d27e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d282:	e7f8      	b.n	800d276 <memmove+0x12>
 800d284:	4402      	add	r2, r0
 800d286:	4601      	mov	r1, r0
 800d288:	428a      	cmp	r2, r1
 800d28a:	d100      	bne.n	800d28e <memmove+0x2a>
 800d28c:	bd10      	pop	{r4, pc}
 800d28e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d292:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d296:	e7f7      	b.n	800d288 <memmove+0x24>

0800d298 <_sbrk_r>:
 800d298:	b538      	push	{r3, r4, r5, lr}
 800d29a:	4d06      	ldr	r5, [pc, #24]	@ (800d2b4 <_sbrk_r+0x1c>)
 800d29c:	2300      	movs	r3, #0
 800d29e:	4604      	mov	r4, r0
 800d2a0:	4608      	mov	r0, r1
 800d2a2:	602b      	str	r3, [r5, #0]
 800d2a4:	f7f4 fe30 	bl	8001f08 <_sbrk>
 800d2a8:	1c43      	adds	r3, r0, #1
 800d2aa:	d102      	bne.n	800d2b2 <_sbrk_r+0x1a>
 800d2ac:	682b      	ldr	r3, [r5, #0]
 800d2ae:	b103      	cbz	r3, 800d2b2 <_sbrk_r+0x1a>
 800d2b0:	6023      	str	r3, [r4, #0]
 800d2b2:	bd38      	pop	{r3, r4, r5, pc}
 800d2b4:	200020d8 	.word	0x200020d8

0800d2b8 <memcpy>:
 800d2b8:	440a      	add	r2, r1
 800d2ba:	4291      	cmp	r1, r2
 800d2bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2c0:	d100      	bne.n	800d2c4 <memcpy+0xc>
 800d2c2:	4770      	bx	lr
 800d2c4:	b510      	push	{r4, lr}
 800d2c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2ce:	4291      	cmp	r1, r2
 800d2d0:	d1f9      	bne.n	800d2c6 <memcpy+0xe>
 800d2d2:	bd10      	pop	{r4, pc}

0800d2d4 <__assert_func>:
 800d2d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2d6:	4614      	mov	r4, r2
 800d2d8:	461a      	mov	r2, r3
 800d2da:	4b09      	ldr	r3, [pc, #36]	@ (800d300 <__assert_func+0x2c>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4605      	mov	r5, r0
 800d2e0:	68d8      	ldr	r0, [r3, #12]
 800d2e2:	b954      	cbnz	r4, 800d2fa <__assert_func+0x26>
 800d2e4:	4b07      	ldr	r3, [pc, #28]	@ (800d304 <__assert_func+0x30>)
 800d2e6:	461c      	mov	r4, r3
 800d2e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d2ec:	9100      	str	r1, [sp, #0]
 800d2ee:	462b      	mov	r3, r5
 800d2f0:	4905      	ldr	r1, [pc, #20]	@ (800d308 <__assert_func+0x34>)
 800d2f2:	f000 f86f 	bl	800d3d4 <fiprintf>
 800d2f6:	f000 f87f 	bl	800d3f8 <abort>
 800d2fa:	4b04      	ldr	r3, [pc, #16]	@ (800d30c <__assert_func+0x38>)
 800d2fc:	e7f4      	b.n	800d2e8 <__assert_func+0x14>
 800d2fe:	bf00      	nop
 800d300:	2000011c 	.word	0x2000011c
 800d304:	0800ddd6 	.word	0x0800ddd6
 800d308:	0800dda8 	.word	0x0800dda8
 800d30c:	0800dd9b 	.word	0x0800dd9b

0800d310 <_calloc_r>:
 800d310:	b570      	push	{r4, r5, r6, lr}
 800d312:	fba1 5402 	umull	r5, r4, r1, r2
 800d316:	b93c      	cbnz	r4, 800d328 <_calloc_r+0x18>
 800d318:	4629      	mov	r1, r5
 800d31a:	f7ff f991 	bl	800c640 <_malloc_r>
 800d31e:	4606      	mov	r6, r0
 800d320:	b928      	cbnz	r0, 800d32e <_calloc_r+0x1e>
 800d322:	2600      	movs	r6, #0
 800d324:	4630      	mov	r0, r6
 800d326:	bd70      	pop	{r4, r5, r6, pc}
 800d328:	220c      	movs	r2, #12
 800d32a:	6002      	str	r2, [r0, #0]
 800d32c:	e7f9      	b.n	800d322 <_calloc_r+0x12>
 800d32e:	462a      	mov	r2, r5
 800d330:	4621      	mov	r1, r4
 800d332:	f7fe fa44 	bl	800b7be <memset>
 800d336:	e7f5      	b.n	800d324 <_calloc_r+0x14>

0800d338 <__ascii_mbtowc>:
 800d338:	b082      	sub	sp, #8
 800d33a:	b901      	cbnz	r1, 800d33e <__ascii_mbtowc+0x6>
 800d33c:	a901      	add	r1, sp, #4
 800d33e:	b142      	cbz	r2, 800d352 <__ascii_mbtowc+0x1a>
 800d340:	b14b      	cbz	r3, 800d356 <__ascii_mbtowc+0x1e>
 800d342:	7813      	ldrb	r3, [r2, #0]
 800d344:	600b      	str	r3, [r1, #0]
 800d346:	7812      	ldrb	r2, [r2, #0]
 800d348:	1e10      	subs	r0, r2, #0
 800d34a:	bf18      	it	ne
 800d34c:	2001      	movne	r0, #1
 800d34e:	b002      	add	sp, #8
 800d350:	4770      	bx	lr
 800d352:	4610      	mov	r0, r2
 800d354:	e7fb      	b.n	800d34e <__ascii_mbtowc+0x16>
 800d356:	f06f 0001 	mvn.w	r0, #1
 800d35a:	e7f8      	b.n	800d34e <__ascii_mbtowc+0x16>

0800d35c <_realloc_r>:
 800d35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d360:	4680      	mov	r8, r0
 800d362:	4615      	mov	r5, r2
 800d364:	460c      	mov	r4, r1
 800d366:	b921      	cbnz	r1, 800d372 <_realloc_r+0x16>
 800d368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d36c:	4611      	mov	r1, r2
 800d36e:	f7ff b967 	b.w	800c640 <_malloc_r>
 800d372:	b92a      	cbnz	r2, 800d380 <_realloc_r+0x24>
 800d374:	f7ff f8f0 	bl	800c558 <_free_r>
 800d378:	2400      	movs	r4, #0
 800d37a:	4620      	mov	r0, r4
 800d37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d380:	f000 f841 	bl	800d406 <_malloc_usable_size_r>
 800d384:	4285      	cmp	r5, r0
 800d386:	4606      	mov	r6, r0
 800d388:	d802      	bhi.n	800d390 <_realloc_r+0x34>
 800d38a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d38e:	d8f4      	bhi.n	800d37a <_realloc_r+0x1e>
 800d390:	4629      	mov	r1, r5
 800d392:	4640      	mov	r0, r8
 800d394:	f7ff f954 	bl	800c640 <_malloc_r>
 800d398:	4607      	mov	r7, r0
 800d39a:	2800      	cmp	r0, #0
 800d39c:	d0ec      	beq.n	800d378 <_realloc_r+0x1c>
 800d39e:	42b5      	cmp	r5, r6
 800d3a0:	462a      	mov	r2, r5
 800d3a2:	4621      	mov	r1, r4
 800d3a4:	bf28      	it	cs
 800d3a6:	4632      	movcs	r2, r6
 800d3a8:	f7ff ff86 	bl	800d2b8 <memcpy>
 800d3ac:	4621      	mov	r1, r4
 800d3ae:	4640      	mov	r0, r8
 800d3b0:	f7ff f8d2 	bl	800c558 <_free_r>
 800d3b4:	463c      	mov	r4, r7
 800d3b6:	e7e0      	b.n	800d37a <_realloc_r+0x1e>

0800d3b8 <__ascii_wctomb>:
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	4608      	mov	r0, r1
 800d3bc:	b141      	cbz	r1, 800d3d0 <__ascii_wctomb+0x18>
 800d3be:	2aff      	cmp	r2, #255	@ 0xff
 800d3c0:	d904      	bls.n	800d3cc <__ascii_wctomb+0x14>
 800d3c2:	228a      	movs	r2, #138	@ 0x8a
 800d3c4:	601a      	str	r2, [r3, #0]
 800d3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ca:	4770      	bx	lr
 800d3cc:	700a      	strb	r2, [r1, #0]
 800d3ce:	2001      	movs	r0, #1
 800d3d0:	4770      	bx	lr
	...

0800d3d4 <fiprintf>:
 800d3d4:	b40e      	push	{r1, r2, r3}
 800d3d6:	b503      	push	{r0, r1, lr}
 800d3d8:	4601      	mov	r1, r0
 800d3da:	ab03      	add	r3, sp, #12
 800d3dc:	4805      	ldr	r0, [pc, #20]	@ (800d3f4 <fiprintf+0x20>)
 800d3de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3e2:	6800      	ldr	r0, [r0, #0]
 800d3e4:	9301      	str	r3, [sp, #4]
 800d3e6:	f000 f83f 	bl	800d468 <_vfiprintf_r>
 800d3ea:	b002      	add	sp, #8
 800d3ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3f0:	b003      	add	sp, #12
 800d3f2:	4770      	bx	lr
 800d3f4:	2000011c 	.word	0x2000011c

0800d3f8 <abort>:
 800d3f8:	b508      	push	{r3, lr}
 800d3fa:	2006      	movs	r0, #6
 800d3fc:	f000 fa08 	bl	800d810 <raise>
 800d400:	2001      	movs	r0, #1
 800d402:	f7f4 fd09 	bl	8001e18 <_exit>

0800d406 <_malloc_usable_size_r>:
 800d406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d40a:	1f18      	subs	r0, r3, #4
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	bfbc      	itt	lt
 800d410:	580b      	ldrlt	r3, [r1, r0]
 800d412:	18c0      	addlt	r0, r0, r3
 800d414:	4770      	bx	lr

0800d416 <__sfputc_r>:
 800d416:	6893      	ldr	r3, [r2, #8]
 800d418:	3b01      	subs	r3, #1
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	b410      	push	{r4}
 800d41e:	6093      	str	r3, [r2, #8]
 800d420:	da08      	bge.n	800d434 <__sfputc_r+0x1e>
 800d422:	6994      	ldr	r4, [r2, #24]
 800d424:	42a3      	cmp	r3, r4
 800d426:	db01      	blt.n	800d42c <__sfputc_r+0x16>
 800d428:	290a      	cmp	r1, #10
 800d42a:	d103      	bne.n	800d434 <__sfputc_r+0x1e>
 800d42c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d430:	f000 b932 	b.w	800d698 <__swbuf_r>
 800d434:	6813      	ldr	r3, [r2, #0]
 800d436:	1c58      	adds	r0, r3, #1
 800d438:	6010      	str	r0, [r2, #0]
 800d43a:	7019      	strb	r1, [r3, #0]
 800d43c:	4608      	mov	r0, r1
 800d43e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d442:	4770      	bx	lr

0800d444 <__sfputs_r>:
 800d444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d446:	4606      	mov	r6, r0
 800d448:	460f      	mov	r7, r1
 800d44a:	4614      	mov	r4, r2
 800d44c:	18d5      	adds	r5, r2, r3
 800d44e:	42ac      	cmp	r4, r5
 800d450:	d101      	bne.n	800d456 <__sfputs_r+0x12>
 800d452:	2000      	movs	r0, #0
 800d454:	e007      	b.n	800d466 <__sfputs_r+0x22>
 800d456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d45a:	463a      	mov	r2, r7
 800d45c:	4630      	mov	r0, r6
 800d45e:	f7ff ffda 	bl	800d416 <__sfputc_r>
 800d462:	1c43      	adds	r3, r0, #1
 800d464:	d1f3      	bne.n	800d44e <__sfputs_r+0xa>
 800d466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d468 <_vfiprintf_r>:
 800d468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d46c:	460d      	mov	r5, r1
 800d46e:	b09d      	sub	sp, #116	@ 0x74
 800d470:	4614      	mov	r4, r2
 800d472:	4698      	mov	r8, r3
 800d474:	4606      	mov	r6, r0
 800d476:	b118      	cbz	r0, 800d480 <_vfiprintf_r+0x18>
 800d478:	6a03      	ldr	r3, [r0, #32]
 800d47a:	b90b      	cbnz	r3, 800d480 <_vfiprintf_r+0x18>
 800d47c:	f7fe f906 	bl	800b68c <__sinit>
 800d480:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d482:	07d9      	lsls	r1, r3, #31
 800d484:	d405      	bmi.n	800d492 <_vfiprintf_r+0x2a>
 800d486:	89ab      	ldrh	r3, [r5, #12]
 800d488:	059a      	lsls	r2, r3, #22
 800d48a:	d402      	bmi.n	800d492 <_vfiprintf_r+0x2a>
 800d48c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d48e:	f7fe fa14 	bl	800b8ba <__retarget_lock_acquire_recursive>
 800d492:	89ab      	ldrh	r3, [r5, #12]
 800d494:	071b      	lsls	r3, r3, #28
 800d496:	d501      	bpl.n	800d49c <_vfiprintf_r+0x34>
 800d498:	692b      	ldr	r3, [r5, #16]
 800d49a:	b99b      	cbnz	r3, 800d4c4 <_vfiprintf_r+0x5c>
 800d49c:	4629      	mov	r1, r5
 800d49e:	4630      	mov	r0, r6
 800d4a0:	f000 f938 	bl	800d714 <__swsetup_r>
 800d4a4:	b170      	cbz	r0, 800d4c4 <_vfiprintf_r+0x5c>
 800d4a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4a8:	07dc      	lsls	r4, r3, #31
 800d4aa:	d504      	bpl.n	800d4b6 <_vfiprintf_r+0x4e>
 800d4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b0:	b01d      	add	sp, #116	@ 0x74
 800d4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4b6:	89ab      	ldrh	r3, [r5, #12]
 800d4b8:	0598      	lsls	r0, r3, #22
 800d4ba:	d4f7      	bmi.n	800d4ac <_vfiprintf_r+0x44>
 800d4bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4be:	f7fe f9fd 	bl	800b8bc <__retarget_lock_release_recursive>
 800d4c2:	e7f3      	b.n	800d4ac <_vfiprintf_r+0x44>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4c8:	2320      	movs	r3, #32
 800d4ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d4ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4d2:	2330      	movs	r3, #48	@ 0x30
 800d4d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d684 <_vfiprintf_r+0x21c>
 800d4d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d4dc:	f04f 0901 	mov.w	r9, #1
 800d4e0:	4623      	mov	r3, r4
 800d4e2:	469a      	mov	sl, r3
 800d4e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4e8:	b10a      	cbz	r2, 800d4ee <_vfiprintf_r+0x86>
 800d4ea:	2a25      	cmp	r2, #37	@ 0x25
 800d4ec:	d1f9      	bne.n	800d4e2 <_vfiprintf_r+0x7a>
 800d4ee:	ebba 0b04 	subs.w	fp, sl, r4
 800d4f2:	d00b      	beq.n	800d50c <_vfiprintf_r+0xa4>
 800d4f4:	465b      	mov	r3, fp
 800d4f6:	4622      	mov	r2, r4
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	f7ff ffa2 	bl	800d444 <__sfputs_r>
 800d500:	3001      	adds	r0, #1
 800d502:	f000 80a7 	beq.w	800d654 <_vfiprintf_r+0x1ec>
 800d506:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d508:	445a      	add	r2, fp
 800d50a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d50c:	f89a 3000 	ldrb.w	r3, [sl]
 800d510:	2b00      	cmp	r3, #0
 800d512:	f000 809f 	beq.w	800d654 <_vfiprintf_r+0x1ec>
 800d516:	2300      	movs	r3, #0
 800d518:	f04f 32ff 	mov.w	r2, #4294967295
 800d51c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d520:	f10a 0a01 	add.w	sl, sl, #1
 800d524:	9304      	str	r3, [sp, #16]
 800d526:	9307      	str	r3, [sp, #28]
 800d528:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d52c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d52e:	4654      	mov	r4, sl
 800d530:	2205      	movs	r2, #5
 800d532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d536:	4853      	ldr	r0, [pc, #332]	@ (800d684 <_vfiprintf_r+0x21c>)
 800d538:	f7f2 fe7a 	bl	8000230 <memchr>
 800d53c:	9a04      	ldr	r2, [sp, #16]
 800d53e:	b9d8      	cbnz	r0, 800d578 <_vfiprintf_r+0x110>
 800d540:	06d1      	lsls	r1, r2, #27
 800d542:	bf44      	itt	mi
 800d544:	2320      	movmi	r3, #32
 800d546:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d54a:	0713      	lsls	r3, r2, #28
 800d54c:	bf44      	itt	mi
 800d54e:	232b      	movmi	r3, #43	@ 0x2b
 800d550:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d554:	f89a 3000 	ldrb.w	r3, [sl]
 800d558:	2b2a      	cmp	r3, #42	@ 0x2a
 800d55a:	d015      	beq.n	800d588 <_vfiprintf_r+0x120>
 800d55c:	9a07      	ldr	r2, [sp, #28]
 800d55e:	4654      	mov	r4, sl
 800d560:	2000      	movs	r0, #0
 800d562:	f04f 0c0a 	mov.w	ip, #10
 800d566:	4621      	mov	r1, r4
 800d568:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d56c:	3b30      	subs	r3, #48	@ 0x30
 800d56e:	2b09      	cmp	r3, #9
 800d570:	d94b      	bls.n	800d60a <_vfiprintf_r+0x1a2>
 800d572:	b1b0      	cbz	r0, 800d5a2 <_vfiprintf_r+0x13a>
 800d574:	9207      	str	r2, [sp, #28]
 800d576:	e014      	b.n	800d5a2 <_vfiprintf_r+0x13a>
 800d578:	eba0 0308 	sub.w	r3, r0, r8
 800d57c:	fa09 f303 	lsl.w	r3, r9, r3
 800d580:	4313      	orrs	r3, r2
 800d582:	9304      	str	r3, [sp, #16]
 800d584:	46a2      	mov	sl, r4
 800d586:	e7d2      	b.n	800d52e <_vfiprintf_r+0xc6>
 800d588:	9b03      	ldr	r3, [sp, #12]
 800d58a:	1d19      	adds	r1, r3, #4
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	9103      	str	r1, [sp, #12]
 800d590:	2b00      	cmp	r3, #0
 800d592:	bfbb      	ittet	lt
 800d594:	425b      	neglt	r3, r3
 800d596:	f042 0202 	orrlt.w	r2, r2, #2
 800d59a:	9307      	strge	r3, [sp, #28]
 800d59c:	9307      	strlt	r3, [sp, #28]
 800d59e:	bfb8      	it	lt
 800d5a0:	9204      	strlt	r2, [sp, #16]
 800d5a2:	7823      	ldrb	r3, [r4, #0]
 800d5a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5a6:	d10a      	bne.n	800d5be <_vfiprintf_r+0x156>
 800d5a8:	7863      	ldrb	r3, [r4, #1]
 800d5aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5ac:	d132      	bne.n	800d614 <_vfiprintf_r+0x1ac>
 800d5ae:	9b03      	ldr	r3, [sp, #12]
 800d5b0:	1d1a      	adds	r2, r3, #4
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	9203      	str	r2, [sp, #12]
 800d5b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5ba:	3402      	adds	r4, #2
 800d5bc:	9305      	str	r3, [sp, #20]
 800d5be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d694 <_vfiprintf_r+0x22c>
 800d5c2:	7821      	ldrb	r1, [r4, #0]
 800d5c4:	2203      	movs	r2, #3
 800d5c6:	4650      	mov	r0, sl
 800d5c8:	f7f2 fe32 	bl	8000230 <memchr>
 800d5cc:	b138      	cbz	r0, 800d5de <_vfiprintf_r+0x176>
 800d5ce:	9b04      	ldr	r3, [sp, #16]
 800d5d0:	eba0 000a 	sub.w	r0, r0, sl
 800d5d4:	2240      	movs	r2, #64	@ 0x40
 800d5d6:	4082      	lsls	r2, r0
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	3401      	adds	r4, #1
 800d5dc:	9304      	str	r3, [sp, #16]
 800d5de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5e2:	4829      	ldr	r0, [pc, #164]	@ (800d688 <_vfiprintf_r+0x220>)
 800d5e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d5e8:	2206      	movs	r2, #6
 800d5ea:	f7f2 fe21 	bl	8000230 <memchr>
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	d03f      	beq.n	800d672 <_vfiprintf_r+0x20a>
 800d5f2:	4b26      	ldr	r3, [pc, #152]	@ (800d68c <_vfiprintf_r+0x224>)
 800d5f4:	bb1b      	cbnz	r3, 800d63e <_vfiprintf_r+0x1d6>
 800d5f6:	9b03      	ldr	r3, [sp, #12]
 800d5f8:	3307      	adds	r3, #7
 800d5fa:	f023 0307 	bic.w	r3, r3, #7
 800d5fe:	3308      	adds	r3, #8
 800d600:	9303      	str	r3, [sp, #12]
 800d602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d604:	443b      	add	r3, r7
 800d606:	9309      	str	r3, [sp, #36]	@ 0x24
 800d608:	e76a      	b.n	800d4e0 <_vfiprintf_r+0x78>
 800d60a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d60e:	460c      	mov	r4, r1
 800d610:	2001      	movs	r0, #1
 800d612:	e7a8      	b.n	800d566 <_vfiprintf_r+0xfe>
 800d614:	2300      	movs	r3, #0
 800d616:	3401      	adds	r4, #1
 800d618:	9305      	str	r3, [sp, #20]
 800d61a:	4619      	mov	r1, r3
 800d61c:	f04f 0c0a 	mov.w	ip, #10
 800d620:	4620      	mov	r0, r4
 800d622:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d626:	3a30      	subs	r2, #48	@ 0x30
 800d628:	2a09      	cmp	r2, #9
 800d62a:	d903      	bls.n	800d634 <_vfiprintf_r+0x1cc>
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d0c6      	beq.n	800d5be <_vfiprintf_r+0x156>
 800d630:	9105      	str	r1, [sp, #20]
 800d632:	e7c4      	b.n	800d5be <_vfiprintf_r+0x156>
 800d634:	fb0c 2101 	mla	r1, ip, r1, r2
 800d638:	4604      	mov	r4, r0
 800d63a:	2301      	movs	r3, #1
 800d63c:	e7f0      	b.n	800d620 <_vfiprintf_r+0x1b8>
 800d63e:	ab03      	add	r3, sp, #12
 800d640:	9300      	str	r3, [sp, #0]
 800d642:	462a      	mov	r2, r5
 800d644:	4b12      	ldr	r3, [pc, #72]	@ (800d690 <_vfiprintf_r+0x228>)
 800d646:	a904      	add	r1, sp, #16
 800d648:	4630      	mov	r0, r6
 800d64a:	f7fd fbdb 	bl	800ae04 <_printf_float>
 800d64e:	4607      	mov	r7, r0
 800d650:	1c78      	adds	r0, r7, #1
 800d652:	d1d6      	bne.n	800d602 <_vfiprintf_r+0x19a>
 800d654:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d656:	07d9      	lsls	r1, r3, #31
 800d658:	d405      	bmi.n	800d666 <_vfiprintf_r+0x1fe>
 800d65a:	89ab      	ldrh	r3, [r5, #12]
 800d65c:	059a      	lsls	r2, r3, #22
 800d65e:	d402      	bmi.n	800d666 <_vfiprintf_r+0x1fe>
 800d660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d662:	f7fe f92b 	bl	800b8bc <__retarget_lock_release_recursive>
 800d666:	89ab      	ldrh	r3, [r5, #12]
 800d668:	065b      	lsls	r3, r3, #25
 800d66a:	f53f af1f 	bmi.w	800d4ac <_vfiprintf_r+0x44>
 800d66e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d670:	e71e      	b.n	800d4b0 <_vfiprintf_r+0x48>
 800d672:	ab03      	add	r3, sp, #12
 800d674:	9300      	str	r3, [sp, #0]
 800d676:	462a      	mov	r2, r5
 800d678:	4b05      	ldr	r3, [pc, #20]	@ (800d690 <_vfiprintf_r+0x228>)
 800d67a:	a904      	add	r1, sp, #16
 800d67c:	4630      	mov	r0, r6
 800d67e:	f7fd fe59 	bl	800b334 <_printf_i>
 800d682:	e7e4      	b.n	800d64e <_vfiprintf_r+0x1e6>
 800d684:	0800dd80 	.word	0x0800dd80
 800d688:	0800dd8a 	.word	0x0800dd8a
 800d68c:	0800ae05 	.word	0x0800ae05
 800d690:	0800d445 	.word	0x0800d445
 800d694:	0800dd86 	.word	0x0800dd86

0800d698 <__swbuf_r>:
 800d698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d69a:	460e      	mov	r6, r1
 800d69c:	4614      	mov	r4, r2
 800d69e:	4605      	mov	r5, r0
 800d6a0:	b118      	cbz	r0, 800d6aa <__swbuf_r+0x12>
 800d6a2:	6a03      	ldr	r3, [r0, #32]
 800d6a4:	b90b      	cbnz	r3, 800d6aa <__swbuf_r+0x12>
 800d6a6:	f7fd fff1 	bl	800b68c <__sinit>
 800d6aa:	69a3      	ldr	r3, [r4, #24]
 800d6ac:	60a3      	str	r3, [r4, #8]
 800d6ae:	89a3      	ldrh	r3, [r4, #12]
 800d6b0:	071a      	lsls	r2, r3, #28
 800d6b2:	d501      	bpl.n	800d6b8 <__swbuf_r+0x20>
 800d6b4:	6923      	ldr	r3, [r4, #16]
 800d6b6:	b943      	cbnz	r3, 800d6ca <__swbuf_r+0x32>
 800d6b8:	4621      	mov	r1, r4
 800d6ba:	4628      	mov	r0, r5
 800d6bc:	f000 f82a 	bl	800d714 <__swsetup_r>
 800d6c0:	b118      	cbz	r0, 800d6ca <__swbuf_r+0x32>
 800d6c2:	f04f 37ff 	mov.w	r7, #4294967295
 800d6c6:	4638      	mov	r0, r7
 800d6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6ca:	6823      	ldr	r3, [r4, #0]
 800d6cc:	6922      	ldr	r2, [r4, #16]
 800d6ce:	1a98      	subs	r0, r3, r2
 800d6d0:	6963      	ldr	r3, [r4, #20]
 800d6d2:	b2f6      	uxtb	r6, r6
 800d6d4:	4283      	cmp	r3, r0
 800d6d6:	4637      	mov	r7, r6
 800d6d8:	dc05      	bgt.n	800d6e6 <__swbuf_r+0x4e>
 800d6da:	4621      	mov	r1, r4
 800d6dc:	4628      	mov	r0, r5
 800d6de:	f7ff fd99 	bl	800d214 <_fflush_r>
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	d1ed      	bne.n	800d6c2 <__swbuf_r+0x2a>
 800d6e6:	68a3      	ldr	r3, [r4, #8]
 800d6e8:	3b01      	subs	r3, #1
 800d6ea:	60a3      	str	r3, [r4, #8]
 800d6ec:	6823      	ldr	r3, [r4, #0]
 800d6ee:	1c5a      	adds	r2, r3, #1
 800d6f0:	6022      	str	r2, [r4, #0]
 800d6f2:	701e      	strb	r6, [r3, #0]
 800d6f4:	6962      	ldr	r2, [r4, #20]
 800d6f6:	1c43      	adds	r3, r0, #1
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d004      	beq.n	800d706 <__swbuf_r+0x6e>
 800d6fc:	89a3      	ldrh	r3, [r4, #12]
 800d6fe:	07db      	lsls	r3, r3, #31
 800d700:	d5e1      	bpl.n	800d6c6 <__swbuf_r+0x2e>
 800d702:	2e0a      	cmp	r6, #10
 800d704:	d1df      	bne.n	800d6c6 <__swbuf_r+0x2e>
 800d706:	4621      	mov	r1, r4
 800d708:	4628      	mov	r0, r5
 800d70a:	f7ff fd83 	bl	800d214 <_fflush_r>
 800d70e:	2800      	cmp	r0, #0
 800d710:	d0d9      	beq.n	800d6c6 <__swbuf_r+0x2e>
 800d712:	e7d6      	b.n	800d6c2 <__swbuf_r+0x2a>

0800d714 <__swsetup_r>:
 800d714:	b538      	push	{r3, r4, r5, lr}
 800d716:	4b29      	ldr	r3, [pc, #164]	@ (800d7bc <__swsetup_r+0xa8>)
 800d718:	4605      	mov	r5, r0
 800d71a:	6818      	ldr	r0, [r3, #0]
 800d71c:	460c      	mov	r4, r1
 800d71e:	b118      	cbz	r0, 800d728 <__swsetup_r+0x14>
 800d720:	6a03      	ldr	r3, [r0, #32]
 800d722:	b90b      	cbnz	r3, 800d728 <__swsetup_r+0x14>
 800d724:	f7fd ffb2 	bl	800b68c <__sinit>
 800d728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d72c:	0719      	lsls	r1, r3, #28
 800d72e:	d422      	bmi.n	800d776 <__swsetup_r+0x62>
 800d730:	06da      	lsls	r2, r3, #27
 800d732:	d407      	bmi.n	800d744 <__swsetup_r+0x30>
 800d734:	2209      	movs	r2, #9
 800d736:	602a      	str	r2, [r5, #0]
 800d738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d73c:	81a3      	strh	r3, [r4, #12]
 800d73e:	f04f 30ff 	mov.w	r0, #4294967295
 800d742:	e033      	b.n	800d7ac <__swsetup_r+0x98>
 800d744:	0758      	lsls	r0, r3, #29
 800d746:	d512      	bpl.n	800d76e <__swsetup_r+0x5a>
 800d748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d74a:	b141      	cbz	r1, 800d75e <__swsetup_r+0x4a>
 800d74c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d750:	4299      	cmp	r1, r3
 800d752:	d002      	beq.n	800d75a <__swsetup_r+0x46>
 800d754:	4628      	mov	r0, r5
 800d756:	f7fe feff 	bl	800c558 <_free_r>
 800d75a:	2300      	movs	r3, #0
 800d75c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d75e:	89a3      	ldrh	r3, [r4, #12]
 800d760:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d764:	81a3      	strh	r3, [r4, #12]
 800d766:	2300      	movs	r3, #0
 800d768:	6063      	str	r3, [r4, #4]
 800d76a:	6923      	ldr	r3, [r4, #16]
 800d76c:	6023      	str	r3, [r4, #0]
 800d76e:	89a3      	ldrh	r3, [r4, #12]
 800d770:	f043 0308 	orr.w	r3, r3, #8
 800d774:	81a3      	strh	r3, [r4, #12]
 800d776:	6923      	ldr	r3, [r4, #16]
 800d778:	b94b      	cbnz	r3, 800d78e <__swsetup_r+0x7a>
 800d77a:	89a3      	ldrh	r3, [r4, #12]
 800d77c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d784:	d003      	beq.n	800d78e <__swsetup_r+0x7a>
 800d786:	4621      	mov	r1, r4
 800d788:	4628      	mov	r0, r5
 800d78a:	f000 f883 	bl	800d894 <__smakebuf_r>
 800d78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d792:	f013 0201 	ands.w	r2, r3, #1
 800d796:	d00a      	beq.n	800d7ae <__swsetup_r+0x9a>
 800d798:	2200      	movs	r2, #0
 800d79a:	60a2      	str	r2, [r4, #8]
 800d79c:	6962      	ldr	r2, [r4, #20]
 800d79e:	4252      	negs	r2, r2
 800d7a0:	61a2      	str	r2, [r4, #24]
 800d7a2:	6922      	ldr	r2, [r4, #16]
 800d7a4:	b942      	cbnz	r2, 800d7b8 <__swsetup_r+0xa4>
 800d7a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d7aa:	d1c5      	bne.n	800d738 <__swsetup_r+0x24>
 800d7ac:	bd38      	pop	{r3, r4, r5, pc}
 800d7ae:	0799      	lsls	r1, r3, #30
 800d7b0:	bf58      	it	pl
 800d7b2:	6962      	ldrpl	r2, [r4, #20]
 800d7b4:	60a2      	str	r2, [r4, #8]
 800d7b6:	e7f4      	b.n	800d7a2 <__swsetup_r+0x8e>
 800d7b8:	2000      	movs	r0, #0
 800d7ba:	e7f7      	b.n	800d7ac <__swsetup_r+0x98>
 800d7bc:	2000011c 	.word	0x2000011c

0800d7c0 <_raise_r>:
 800d7c0:	291f      	cmp	r1, #31
 800d7c2:	b538      	push	{r3, r4, r5, lr}
 800d7c4:	4605      	mov	r5, r0
 800d7c6:	460c      	mov	r4, r1
 800d7c8:	d904      	bls.n	800d7d4 <_raise_r+0x14>
 800d7ca:	2316      	movs	r3, #22
 800d7cc:	6003      	str	r3, [r0, #0]
 800d7ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d2:	bd38      	pop	{r3, r4, r5, pc}
 800d7d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d7d6:	b112      	cbz	r2, 800d7de <_raise_r+0x1e>
 800d7d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7dc:	b94b      	cbnz	r3, 800d7f2 <_raise_r+0x32>
 800d7de:	4628      	mov	r0, r5
 800d7e0:	f000 f830 	bl	800d844 <_getpid_r>
 800d7e4:	4622      	mov	r2, r4
 800d7e6:	4601      	mov	r1, r0
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7ee:	f000 b817 	b.w	800d820 <_kill_r>
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d00a      	beq.n	800d80c <_raise_r+0x4c>
 800d7f6:	1c59      	adds	r1, r3, #1
 800d7f8:	d103      	bne.n	800d802 <_raise_r+0x42>
 800d7fa:	2316      	movs	r3, #22
 800d7fc:	6003      	str	r3, [r0, #0]
 800d7fe:	2001      	movs	r0, #1
 800d800:	e7e7      	b.n	800d7d2 <_raise_r+0x12>
 800d802:	2100      	movs	r1, #0
 800d804:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d808:	4620      	mov	r0, r4
 800d80a:	4798      	blx	r3
 800d80c:	2000      	movs	r0, #0
 800d80e:	e7e0      	b.n	800d7d2 <_raise_r+0x12>

0800d810 <raise>:
 800d810:	4b02      	ldr	r3, [pc, #8]	@ (800d81c <raise+0xc>)
 800d812:	4601      	mov	r1, r0
 800d814:	6818      	ldr	r0, [r3, #0]
 800d816:	f7ff bfd3 	b.w	800d7c0 <_raise_r>
 800d81a:	bf00      	nop
 800d81c:	2000011c 	.word	0x2000011c

0800d820 <_kill_r>:
 800d820:	b538      	push	{r3, r4, r5, lr}
 800d822:	4d07      	ldr	r5, [pc, #28]	@ (800d840 <_kill_r+0x20>)
 800d824:	2300      	movs	r3, #0
 800d826:	4604      	mov	r4, r0
 800d828:	4608      	mov	r0, r1
 800d82a:	4611      	mov	r1, r2
 800d82c:	602b      	str	r3, [r5, #0]
 800d82e:	f7f4 fae3 	bl	8001df8 <_kill>
 800d832:	1c43      	adds	r3, r0, #1
 800d834:	d102      	bne.n	800d83c <_kill_r+0x1c>
 800d836:	682b      	ldr	r3, [r5, #0]
 800d838:	b103      	cbz	r3, 800d83c <_kill_r+0x1c>
 800d83a:	6023      	str	r3, [r4, #0]
 800d83c:	bd38      	pop	{r3, r4, r5, pc}
 800d83e:	bf00      	nop
 800d840:	200020d8 	.word	0x200020d8

0800d844 <_getpid_r>:
 800d844:	f7f4 bad0 	b.w	8001de8 <_getpid>

0800d848 <__swhatbuf_r>:
 800d848:	b570      	push	{r4, r5, r6, lr}
 800d84a:	460c      	mov	r4, r1
 800d84c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d850:	2900      	cmp	r1, #0
 800d852:	b096      	sub	sp, #88	@ 0x58
 800d854:	4615      	mov	r5, r2
 800d856:	461e      	mov	r6, r3
 800d858:	da0d      	bge.n	800d876 <__swhatbuf_r+0x2e>
 800d85a:	89a3      	ldrh	r3, [r4, #12]
 800d85c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d860:	f04f 0100 	mov.w	r1, #0
 800d864:	bf14      	ite	ne
 800d866:	2340      	movne	r3, #64	@ 0x40
 800d868:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d86c:	2000      	movs	r0, #0
 800d86e:	6031      	str	r1, [r6, #0]
 800d870:	602b      	str	r3, [r5, #0]
 800d872:	b016      	add	sp, #88	@ 0x58
 800d874:	bd70      	pop	{r4, r5, r6, pc}
 800d876:	466a      	mov	r2, sp
 800d878:	f000 f848 	bl	800d90c <_fstat_r>
 800d87c:	2800      	cmp	r0, #0
 800d87e:	dbec      	blt.n	800d85a <__swhatbuf_r+0x12>
 800d880:	9901      	ldr	r1, [sp, #4]
 800d882:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d886:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d88a:	4259      	negs	r1, r3
 800d88c:	4159      	adcs	r1, r3
 800d88e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d892:	e7eb      	b.n	800d86c <__swhatbuf_r+0x24>

0800d894 <__smakebuf_r>:
 800d894:	898b      	ldrh	r3, [r1, #12]
 800d896:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d898:	079d      	lsls	r5, r3, #30
 800d89a:	4606      	mov	r6, r0
 800d89c:	460c      	mov	r4, r1
 800d89e:	d507      	bpl.n	800d8b0 <__smakebuf_r+0x1c>
 800d8a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d8a4:	6023      	str	r3, [r4, #0]
 800d8a6:	6123      	str	r3, [r4, #16]
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	6163      	str	r3, [r4, #20]
 800d8ac:	b003      	add	sp, #12
 800d8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8b0:	ab01      	add	r3, sp, #4
 800d8b2:	466a      	mov	r2, sp
 800d8b4:	f7ff ffc8 	bl	800d848 <__swhatbuf_r>
 800d8b8:	9f00      	ldr	r7, [sp, #0]
 800d8ba:	4605      	mov	r5, r0
 800d8bc:	4639      	mov	r1, r7
 800d8be:	4630      	mov	r0, r6
 800d8c0:	f7fe febe 	bl	800c640 <_malloc_r>
 800d8c4:	b948      	cbnz	r0, 800d8da <__smakebuf_r+0x46>
 800d8c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8ca:	059a      	lsls	r2, r3, #22
 800d8cc:	d4ee      	bmi.n	800d8ac <__smakebuf_r+0x18>
 800d8ce:	f023 0303 	bic.w	r3, r3, #3
 800d8d2:	f043 0302 	orr.w	r3, r3, #2
 800d8d6:	81a3      	strh	r3, [r4, #12]
 800d8d8:	e7e2      	b.n	800d8a0 <__smakebuf_r+0xc>
 800d8da:	89a3      	ldrh	r3, [r4, #12]
 800d8dc:	6020      	str	r0, [r4, #0]
 800d8de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8e2:	81a3      	strh	r3, [r4, #12]
 800d8e4:	9b01      	ldr	r3, [sp, #4]
 800d8e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d8ea:	b15b      	cbz	r3, 800d904 <__smakebuf_r+0x70>
 800d8ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8f0:	4630      	mov	r0, r6
 800d8f2:	f000 f81d 	bl	800d930 <_isatty_r>
 800d8f6:	b128      	cbz	r0, 800d904 <__smakebuf_r+0x70>
 800d8f8:	89a3      	ldrh	r3, [r4, #12]
 800d8fa:	f023 0303 	bic.w	r3, r3, #3
 800d8fe:	f043 0301 	orr.w	r3, r3, #1
 800d902:	81a3      	strh	r3, [r4, #12]
 800d904:	89a3      	ldrh	r3, [r4, #12]
 800d906:	431d      	orrs	r5, r3
 800d908:	81a5      	strh	r5, [r4, #12]
 800d90a:	e7cf      	b.n	800d8ac <__smakebuf_r+0x18>

0800d90c <_fstat_r>:
 800d90c:	b538      	push	{r3, r4, r5, lr}
 800d90e:	4d07      	ldr	r5, [pc, #28]	@ (800d92c <_fstat_r+0x20>)
 800d910:	2300      	movs	r3, #0
 800d912:	4604      	mov	r4, r0
 800d914:	4608      	mov	r0, r1
 800d916:	4611      	mov	r1, r2
 800d918:	602b      	str	r3, [r5, #0]
 800d91a:	f7f4 facd 	bl	8001eb8 <_fstat>
 800d91e:	1c43      	adds	r3, r0, #1
 800d920:	d102      	bne.n	800d928 <_fstat_r+0x1c>
 800d922:	682b      	ldr	r3, [r5, #0]
 800d924:	b103      	cbz	r3, 800d928 <_fstat_r+0x1c>
 800d926:	6023      	str	r3, [r4, #0]
 800d928:	bd38      	pop	{r3, r4, r5, pc}
 800d92a:	bf00      	nop
 800d92c:	200020d8 	.word	0x200020d8

0800d930 <_isatty_r>:
 800d930:	b538      	push	{r3, r4, r5, lr}
 800d932:	4d06      	ldr	r5, [pc, #24]	@ (800d94c <_isatty_r+0x1c>)
 800d934:	2300      	movs	r3, #0
 800d936:	4604      	mov	r4, r0
 800d938:	4608      	mov	r0, r1
 800d93a:	602b      	str	r3, [r5, #0]
 800d93c:	f7f4 facc 	bl	8001ed8 <_isatty>
 800d940:	1c43      	adds	r3, r0, #1
 800d942:	d102      	bne.n	800d94a <_isatty_r+0x1a>
 800d944:	682b      	ldr	r3, [r5, #0]
 800d946:	b103      	cbz	r3, 800d94a <_isatty_r+0x1a>
 800d948:	6023      	str	r3, [r4, #0]
 800d94a:	bd38      	pop	{r3, r4, r5, pc}
 800d94c:	200020d8 	.word	0x200020d8

0800d950 <_init>:
 800d950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d952:	bf00      	nop
 800d954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d956:	bc08      	pop	{r3}
 800d958:	469e      	mov	lr, r3
 800d95a:	4770      	bx	lr

0800d95c <_fini>:
 800d95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d95e:	bf00      	nop
 800d960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d962:	bc08      	pop	{r3}
 800d964:	469e      	mov	lr, r3
 800d966:	4770      	bx	lr
